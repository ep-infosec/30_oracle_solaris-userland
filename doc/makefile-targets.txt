This is a guide to explain various useful targets in Userland component
Makefiles.  There is a set of targets that all Makefiles must include, plus
some additional targets that are there for convenience.

Most targets depend on your component Makefile, so changes to your component
Makefile will automatically trigger a re-download and subsequent build steps
that depend on it.  You can use the MAKEFILE_PREREQ macro to override this
behaviour and avoid rebuilding with each Makefile change.  This macro should
only be used in the calling environment via something like:
  $ gmake MAKEFILE_PREREQ= install

component-environment-check::
  This target is an optional target that will be included in most Makefiles
  automatically.  It is defined in $(WS_MAKE_RULES)/environment.mk which is
  included by $(WS_MAKE_RULES)/shares-macros.mk.  It reports on some interesting
  information about the current environment and whether or not it is suitable
  to build, publish, or test the component.

component-environment-prep::
  This target is an optional target that will be included in most Makefiles
  automatically.  It is defined in $(WS_MAKE_RULES)/environment.mk which is
  included by $(WS_MAKE_RULES)/shares-macros.mk.  It uses the REQUIRE_PACKAGES
  macro contents to attempt to install any required packages in the current
  environment.  It should never by used by developers to update any public
  build machines as those are managed by dedicated staff.

download::
  This target is present in all Makefiles.  It can be used at the top level
  to act across all components, or on an individual component basis.  It is
  typically defined by including $(WS_MAKE_RULES)/prep.mk in your component
  Makefile.

unpack::
  This target is present in all Makefiles.  It can be used at the top level
  to act across all components, or on an individual component basis.  It is
  typically defined by including $(WS_MAKE_RULES)/prep.mk in your component
  Makefile.  This target depends on the previously described "download" target,
  This target will unpack any downloaded source archives.  It is an interim
  step in the source code preparation phase of the build.

patch::
  This target is present in all Makefiles.  It can be used at the top level
  to act across all components, or on an individual component basis.  It is
  typically defined by including $(WS_MAKE_RULES)/prep.mk in your component
  Makefile.  This target depends on the previously described "unpack" target,
  This target will patch any unpacked source.  It is an interim step in the
  source code preparation phase of the build.

prep::
  This target is present in all Makefiles.  It can be used at the top level
  to act across all components, or on an individual component basis.  It is 
  typically defined by including $(WS_MAKE_RULES)/prep.mk in your component
  Makefile.  It depends on the previously described "download" target, as well
  as internal interim targets to unpack source archives and apply patches to
  the unpacked source.

configure:
  This target is an optional target that can be included in component Makefiles
  to run the community source configuration phase of a component build.  It is
  typically defined in component Makefiles that make use of the
  $(WS_MAKE_RULES)/configure.mk Makefile fragment, but could be defined in
  others that include a source code configuration step.  It is not explicitly
  called during the build, but provides a convenient means of downloading,
  unpacking, patching, and "configuring" component source for building without
  actually compiling the bits.

build::
  This target must be present in all Makefiles.  It can be used at the top level
  to act across all components, or on an individual component basis.  It is
  defined in the individual component Makefiles, but most Makefile fragments
  under $(WS_MAKE_RULES) include targets that allow the definitions to depend
  on one of several convenience macros $(BUILD_32), $(BUILD_64),
  $(BUILD_32_and_64), and $(BUILD_NO_ARCH) to build 32-bit support, 64-bit
  support, both 32 and 64 bit support, or architecture neutral support.  The
  macro used will depend on the component.

install::
  This target must be present in all Makefiles.  It can be used at the top level
  to act across all components, or on an individual component basis.  It is
  defined in the individual component Makefiles, but most Makefile fragments
  under $(WS_MAKE_RULES) include targets that allow the definitions to depend
  on one of several convenience macros $(INSTALL_32), $(INSTALL_64),
  $(INSTALL_32_and_64), and $(INSTALL_NO_ARCH) to install 32-bit support, 64-bit
  support, both 32 and 64 bit support, or architecture neutral support.  The
  macro used will depend on the component and corresponds to the build target
  macro used.

pkglint::
  This target is an optional target is automatically defined in each Makefile
  by the inclusion of $(WS_MAKE_RULES)/prep.mk.  It will run the build steps
  necessary to pkglint the manifests for a component.

publish::
  This target is present in all Makefiles.  It can be used at the top level
  to act across all components, or on an individual component basis.  It is
  automatically defined by including $(WS_MAKE_RULES)/ips.mk.  It depends
  on the previously described 'install' target and will perform a series of
  internal, intermediate steps to use the component package manifests to
  generate and publish packages for that component.

clean::
  This target is present in all Makefiles.  It can be used at the top level
  to act across all components, or on an individual component basis.  It is
  often automatically defined by including one of the $(WS_MAKE_RULES)
  Makefile fragments.  It cleans up any files created by building the component
  with the exception of any downloaded files.

clobber::
  This target is present in all Makefiles.  It can be used at the top level
  to act across all components, or on an individual component basis.  It is
  often automatically defined by including one of the $(WS_MAKE_RULES)
  Makefile fragments.  It depends on the previously described 'clean' target
  and additionally cleans up any downloaded source archives.  In addition,
  when done from the top level or component sub-directory, it will do a find
  of 'manifest-*.published' and clean those up; these can be left over from
  components that were published but then 'hg rm'd before the next clobber.

REQUIRED_PACKAGES::
  This target is present in all component Makefiles.  It is automatically
  defined by including $(WS_MAKE_RULES)/ips.mk.  It is a convenience that can
  be used to generate the set of REQUIRED_PACKAGES that is needed by the
  'pkgdepend resolve' portion of package generation and publication (publish
  target).  It automatically appends to the component Makefile, but the results
  should be manually verified.

check_anitya:
  This target is present in all Makefiles.  It can be used at the top level to
  act across all components, or on an individual component basis.  It is defined
  by including $(WS_MAKE_RULES)/shared-macros.mk.  It runs curl to get the data
  in JSON format from the release-monitoring.org REST API for all
  COMPONENT_ANITYA_ID entries in the Makefile, showing the COMPONENT name,
  version, project URL and ANITYA_API_URL from the Makefile for comparison, to
  help check that the correct id is entered and to compare our information
  against the latest upstream info being tracked by release-monitoring.org.

check_rtime:
  This target is present in all Makefiles.  It can be used at the top level
  to act across all components, or on an individual component basis.  It is
  defined by including $(WS_MAKE_RULES)/shared-macros.mk.  It runs the
  check_rtime script from pkg:/developer/build/onbld to check for common
  errors in ELF binaries.  It checks the binaries from the component's
  prototype directory for the current platform, resolving any dependencies
  not found there against the installed versions on the machine its run on.
  A global exceptions file is provided in $(WS_TOP)/exception_lists/check_rtime
  and is automatically supplemented with the contest of test/check_rtime in
  the component directory.

regen-patches:
  This target is present in all Makefiles, but may not work in those with
  unusual or complex unpacking & patching targets, so while it may be run
  at the top level, it's best used on a subset of components or an individual
  component basis.  It is automatically included in component Makefiles via
  $(WS_MAKE_RULES)/prep-patch.mk.  It unpacks the pristine upstream source,
  applies each patch file in turn, and generates a new patch file under the
  new/ directory for those changes against the current source, making it
  easier to keep our local patches in sync when we upgraded to new upstream
  releases, reducing fuzz and line offset warnings and improving the odds
  that the patches could be carried forward to new releases.  After running
  it, you will need to manually compare the patches in patches/ against new/
  to decide which existing patches to replace with the new versions and if
  any manual edits are necessary.  You may then discard the new/ directory
  and any remaining patch files in it.

pkg_install::
  This target is present in component Makefiles. It is defined by including
  $(WS_MAKE_RULES)/{common.mk,ips.mk}. The target is used by a privileged user
  to install a particular component from repository to local system. The
  component can be installed in a single step along with its dependencies.
  Dependencies can be passed on command line in REQUIRED_COMPONENTS macro. An
  alternative IPS repository can be specified in PKG_REPO macro. It is a
  requirement that the component and all dependencies (REQUIRED_COMPONENTS) are
  built and published as pkg_install target is going to process manifest files
  created during the build. To debug and display what pkg commands are going to
  be run define macro PKG_INST_DEBUG=1.

  Usage examples follow.

  Example for single component (nodejs12):
  cd components/nodejs12 && sudo gmake pkg_install

  Example for single component (nodejs12) with its dependency (nghttp2):
  cd components/nodejs12 && \
  	sudo gmake pkg_install REQUIRED_COMPONENTS=nghttp2
 
  Example of using wildcard in dependency specification (install whole gnome):
  cd components/gnome/gnome-desktop && \
	  sudo gmake pkg_install PKG_INST_FORCE=1 REQUIRED_COMPONENTS=gnome/*

  Example of passing an alternative IPS repository for installation:
  cd components/nodejs12 && sudo gmake pkg_install PKG_REPO=/path/to/repo

  Debugging example:
  cd gnome/pygobject3 && gmake pkg_install PKG_INST_DEBUG=1

  The installation consists of 3 steps: making publisher non-sticky, unlocking
  version-locks facets and final pkg install. These actions are internally
  defined in macros:

  * PKG_INST_SET_PUBLISHER
  * PKG_INST_CHANGE_FACET
  * PKG_INST_INSTALL

  Should the component require special installation instructions it might be
  necessary to override above macros, e.g. in component-level Makefile.


print-*::
  This target is used for debugging Makefile variables

  Example:
  gmake print-COMPONENT_VERSION
  COMPONENT_VERSION=610c25 (origin: file, flavor: recursive)
