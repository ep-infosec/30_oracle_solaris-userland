#/bin/bash
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#

#
# Copyright (c) 2021, Oracle and/or its affiliates.
#

PROG="$( basename "${BASH_SOURCE[0]}" )"
WSTOP="$( realpath "${BASH_SOURCE[0]}" | sed s@/tools/$PROG@@ )"
OLDBLD=build.old_build_with_parfait


function usage {
    cat <<-EOT
    $ $PROG [help|-h|--help|-?] - print this help

    $ $PROG - compare Parfait builds between  the last and the penultimate revision of the workspace

    This script updates to the penultimate revision of the workspace and runs a Parfait build.
    It saves the result, switches to the current revision of the workspace and runs the Parfait build again.
    It then compares the parfait baselines.
EOT
}

################################################################################
### PROCESS INPUT PARAMETERS
################################################################################

while [ $# -gt 0 ]; do
    case "$1" in
        help|-h|--help|-\?)
            usage
            exit 0
            ;;
        *)
            echo "Error: unknown argument '$1'" 1>&2
            exit 1
            ;;
    esac
done


if [[ "$PWD" != *'/components/'* ]] || [[ ! -f Makefile ]]; then
    echo "Error: this command must be run inside a particular component directory." 1>&2
    exit 1
fi


MACH=$(uname -p)
if [ "$MACH" == "i386" ]; then
    MACH32=i86
    MACH64=amd64
elif [ "$MACH" == "sparc" ]; then
    MACH32=sparcv7
    MACH64=sparcv9
else
    echo "Error: couldn't figure out mach" 1>&2
    exit 2
fi

COMPONENT=$( echo ${PWD#$WSTOP/components/} | sed s@/@.@g )
 
gmake clean > $WSTOP/$MACH/logs/parfait.$COMPONENT.gmake.clean.1.log 2>&1
rm -rf $OLDBLD

echo "updating to the previous revision of this component"
PREV_REV=$(hg log -l2 -b . -T '{rev}\n' | tail -1)
hg update -r $PREV_REV
echo "building previous revision of this component"
PARFAIT_BUILD=yes gmake install > $WSTOP/$MACH/logs/parfait.$COMPONENT.gmake.install.1.log 2>&1
mv build $OLDBLD
gmake clean > $WSTOP/$MACH/logs/parfait.$COMPONENT.gmake.clean.2.log 2>&1
echo "reverting to the current revision of this component"
hg update
echo "building the current revision of this component"
PARFAIT_BUILD=yes gmake install > $WSTOP/$MACH/logs/parfait.$COMPONENT.gmake.install.2.log 2>&1

for BLDMACH in $MACH32 $MACH64; do
    if [[ ! -d $OLDBLD/$BLDMACH ]] || [[ ! -d build/$BLDMACH ]]; then
        continue
    fi

    echo "Comparing $BLDMACH/parfait.baseline ..."
    if [ -f $OLDBLD/$BLDMACH/parfait.baseline ] && [ -f build/$BLDMACH/parfait.baseline ]; then
        diff $OLDBLD/$BLDMACH/parfait.baseline build/$BLDMACH/parfait.baseline > /dev/null 2>&1
        if [ $? != "0" ]; then
            echo "There's a difference in Parfait findings"
            echo "running \$PARFAIT -b $OLDBLD/$BLDMACH/parfait.baseline build"
            PARFAIT=$(gmake -f $WSTOP/make-rules/shared-macros.mk print-PARFAIT | ggrep -o '/[^ ]*')
            $PARFAIT -e all -W -j 80% -b $OLDBLD/$BLDMACH/parfait.baseline build
        fi
    else
        echo "Error: one or both baselines not found" 2>&1
    fi
done

