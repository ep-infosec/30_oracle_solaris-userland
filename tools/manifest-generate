#!/bin/bash
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#

#
# Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
#

set -eu -o pipefail
export PATH=/usr/bin

if [ $# -eq 0 ]; then
	cat <<-EOT
	manifest-generate [--manifest target.p5m] [--target file] dir [dir ...]
	
	--target file - argument is passed to pkgsend(1), see details there

	--manifest - manifest file name which will be used to extract
	   hardlinks and convert them to appropriate --target arguments.

	-D... -I... - arguments passed to pkgsend(1)

	dir - a proto directory from which we create actions
	    - dir can be specified as dir^transpose which prepends
	      string 'transpose/' in front of every 'path' attribute.
	
	The tool is intended to be replacement for 'pkgsend generate' adding
	support for dir^transpose proto dir specification and stable hardlink
	generation.
	EOT
	exit 0
fi

function fail {
	echo "ERROR: $@" 1>&2
	exit 1
}

# Process the command line arguments
HARDLINKS=()
PKG_OPTIONS=()
TARGET_P5M=
while [[ $# -gt 0 ]] ; do
	case "$1" in
		-D)
			PKG_OPTIONS+=( "$1" "$2" )
			shift 2
			;;
		-I)
			PKG_OPTIONS+=( "$1" "$2" )
			shift 2
			;;
		-D*)
			PKG_OPTIONS+=( "$1" )
			shift
			;;
		-I*)
			PKG_OPTIONS+=( "$1" )
			shift
			;;
		--target)
			[[ $# -gt 1 ]] || fail "Option $1 needs an argument"
			HARDLINKS+=( "$1" "$2" )
			shift 2
			;;
		--manifest)
			[[ $# -gt 1 ]] || fail "Option $1 needs an argument"
			[[ -z "$TARGET_P5M" ]] || fail "Internal error, $1 can be specified only once"
			TARGET_P5M="$2"
			shift 2
			;;
		*) break ;;
	esac
done

if [ -n "$TARGET_P5M" ] && [[ ${#HARDLINKS[@]} -gt 0 ]] ; then
	fail "--target and --manifest options are mutualy exclusive"
fi

if [ -e "$TARGET_P5M" ]; then
	# We were given the source p5m name, and so we need to turn it into
	# series of --target command line parameters
	OUT=$(
		# For every hardlink print its path and target on separate
		# lines
		pkgmogrify "${PKG_OPTIONS[@]}" "${HARDLINKS[@]}" /dev/fd/0 "$TARGET_P5M" <<-EOT
			<transform hardlink -> print %(path)>
			<transform hardlink -> print %(target)>
			<transform -> drop>
		EOT
	)

	# Filter out comments and empty lines
	OUT=$( ggrep -Ev "^$|^#" <<<"$OUT" || : )

	TMP=$(
		while read LINK_PATH; do
			# If "OUT" is empty, we'll break here
			read LINK_TARGET || break

			# For example:
			# LINK_PATH=usr/share/lib/zoneinfo/Chile/Continental
			# LINK_TARGET=../America/Santiago

			# We need to convert every path and relative target to
			# full path

			# First split the path components (delimited by '/')
			# into an array
			mapfile -d / -t LINK_TARGET <<<"$LINK_TARGET"

			# now LINK_TARGET=(".." "America" "Santiago")

			# Remove last part of the path which will be replaced
			# by link target
			LINK_PATH=$( dirname "$LINK_PATH" )

			# Loop over every part of the link target
			for PIECE in "${LINK_TARGET[@]}"; do

				# We can ignore if the target contains blah/./blah
				[[ "$PIECE" != . ]] || continue

				# If it is '..', delete last part of the target path
				if [[ "$PIECE" == .. ]]; then
					LINK_PATH=$( dirname "$LINK_PATH" )
					continue
				fi

				# Or just add the link part to the final path
				LINK_PATH="${LINK_PATH}/$PIECE"
			done

			# Now LINK_PATH=usr/share/lib/zoneinfo/America/Santiago
			echo "$LINK_PATH"
		done <<<"$OUT" | sort -u
	)

	# Now turn that into list of --target command line
	# options
	if [ -n "$TMP" ]; then
		while read L; do
			HARDLINKS+=( "--target" "$L" )
		done <<<"$TMP"
	fi
fi

# First generate manifest for $(PROTO_DIR), which is always specified as a
# first argument. The hardlinks apply only to this area
pkgsend generate "${HARDLINKS[@]}" "$1"

shift

# Now process the optional $(GENERATE_PROTO_DIRS)
for PROTO in "$@"; do
	if [[ "$PROTO" == *^* ]]; then
		# If the proto dir is specified as some/where^translate
		# The result will be files from some/where appearing as if they
		# would be in a "translate" directory. Thus file
		# some/where/file will generate
		#
		# file path=translate/file
		#
		# Action hash is not translated because it is removed
		# in the following pkgmogrify in GENERATE_TRANSFORMS
		# anyway
		OFFSET="${PROTO##*^}"
		PROTO="${PROTO%^*}"
	else
		OFFSET=
	fi

	pkgsend generate $PROTO |
	if [ -n "$OFFSET" ]; then
		pkgmogrify /dev/fd/0 <(echo "<transform file link hardlink dir -> edit path ^ ${OFFSET#/}/>")
	else
		cat
	fi
done
