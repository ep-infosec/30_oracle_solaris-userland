#!/bin/bash
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#

#
# Copyright (c) 2018, 2020, Oracle and/or its affiliates.
#

set -eu -o pipefail
export PATH=/usr/bin

if [ $# -eq 0 ]; then
	cat <<-EOT
	manifest-check [--update] target_file PKG_OPTIONS
	
	This tool constructs a manifest according to instructions in 'generate'
	directory and compares the result to existing .p5m manifest. Details
	are in 'doc/manifest-check.txt'

	This tool expects a number of environment variables to be set for it's
	function. See make-rules/ips.mk for details on how it is called.

	If --update option is given, manifest is patched with resulting diff.
	EOT
	exit 0
fi

RESULT="$1"
shift

PKGFMT_ARGS=
DO_MANIFEST_UPDATE=false
if [[ "$1" == "--update" ]]; then
	PKGFMT_ARGS=-u
	DO_MANIFEST_UPDATE=true
	shift
fi

PKG_OPTIONS=( "$@" )

# Based on the result file name find out the original .p5m file we compare
# ourselves to
ORIGIN="${RESULT#$MANIFEST_BASE-}"
NAME="${ORIGIN%.constructed}" # This is used as a base for temporary file names
ORIGIN="$NAME.p5m"

# The environment variable PKG_AUTO_HARDLINKS is exported when this script is
# bein called from Makefile. We need to turn it into command line argument
# for manifest-generate
if [ -n "${PKG_AUTO_HARDLINKS:-}" ]; then
	TARGET_MANIFEST=( --manifest "$ORIGIN" )
else
	TARGET_MANIFEST=( )
fi

# Those are the files used to create the generated manifest
TRANSFORM="$COMPONENT_DIR/generate/$NAME.generate"
STATIC="$COMPONENT_DIR/generate/$NAME.static"

# If there is no transform file found, no check is performed. Print a notice
# and exit
if [ ! -e "$TRANSFORM" ]; then
	echo "No '$TRANSFORM' found, skipping manifest-check"
	exit 0
fi

RESULT="$MANIFEST_BASE-$NAME.generated"
DEBUG="$MANIFEST_BASE-$NAME.generate.debug"

# Move the hardlink arguments to easier to use array
HARDLINKS=()
[ -z "$PKG_HARDLINKS" ] || mapfile -t HARDLINKS < <(printf -- "--target %s " $PKG_HARDLINKS)

(
	# First generate the sample manifest as 'gmake sample-manifest' would do
	# Then pass it though the $TRANSFORM with full debug output.
	"$MANIFEST_GENERATE" "${TARGET_MANIFEST[@]}" "${PKG_OPTIONS[@]}" ${HARDLINKS[@]} $PROTO_DIR $GENERATE_PROTO_DIRS |
	pkgmogrify -v "${PKG_OPTIONS[@]}" /dev/fd/0 \
		$GENERATE_TRANSFORMS $MANIFEST_CLEANUP_TRANSFORM $TRANSFORM > "$DEBUG"


	# 1st part of the generated manifest - the output of the transform
	# - the debug needs to be removed
	# - the manifest is normalized
	# - long split actions joined back into single line
	# - duplicate lines removed
	/usr/gnu/bin/grep -E -v "^#|^\['#" "$DEBUG" |
		pkgfmt |
		perl -e '
			# We have to pkgfmt the output so that
			# duplicate lines get next to each other
			# And then straighten the folded lines so that
			# uniq(1) can remove duplicates
			$_ = join "", <>;
			s/\\\n//gms;
			print;
		' |
		uniq

	# 2nd part: copy multiple things from the original *p5m:
	# - set
	# - license
	# - depend
	# - all transforms
	# - anything with variant.arch != current variant.arch
	perl -e '
		my $arch;
		BEGIN {
			# Read our architecture before running rest of the
			# program
			$arch=`/usr/bin/uname -p`;
			chomp($arch);
		}

		# Regular expression matching what we want to copy out of original .p5m
		$re = qr{
			# Match anything we can _not_ detect from the proto area

			^	# Beginning of line
			\s*	# Potentially whitespace
			(?:
				(?&SPECIAL_LINE)
				| # or
				(?&FOREIGN_ARCH_LINE)
			)
			(?:
				\n|\Z # Take final end of line if it is there
			)


			(?(DEFINE)
				# We can not autogenerate and thus need to
				# copy:
				#  - transform
				#  - set
				#  - license
				#  - depend
				(?<SPECIAL_LINE>
					# Find beginning of a line
					(?:
						<	# This is supposed to match <transform and <include
						|
						set
						|
						license
						|
						depend
					)
					(?&ONE_CHARACTER)* # Take rest of line
				)

				# A line having variant.arch not equal to current architecture
				(?<FOREIGN_ARCH_LINE>
					(?&ONE_CHARACTER)*?	# Take as few characters as possible followed by ...
					[ \t]			# space
					variant\.arch=		# literal text
					(?!$arch)		# not followed by our actual arch but rather ...
					\S++			# any other string representing the arch in the manifest
					(?:			# followed by
						[ \t]			# space
						(?&ONE_CHARACTER)*	# ... and rest of line
					)?			# ... optionally
				)

				# One character not including end of line but
				# including backslash-newline combination
				(?<ONE_CHARACTER>
					[^\\\n]			# Take anything but backslash or newline
					|			# or
					\\.			# Take \ with anything after that (including newline)
				)

			)
		}xms;

		# Read whole file into $_
		$_ = join "", <>;
		while ( m/($re)/g ) {
			# Print every match
			print "$1";
		}
	' "$ORIGIN"

	# 3rd part - add static data if available
	[ ! -e "$STATIC" ] || cat "$STATIC"
) |
sed -e '/^$/d' -e '/^#.*$/d' |
pkgfmt $PKGFMT_ARGS > "$RESULT"

PWDSLASH="$PWD/"
RESULT_RELATIVE="${RESULT#$PWDSLASH}"

echo "Comparing '$RESULT_RELATIVE' to '$ORIGIN'"

RET=0

FILENAME="$(realpath --relative-to="$PWD" "$RESULT")"
# To compare we have to remove comments from the original .p5m file too
MANIFEST_DIFF=$(/usr/gnu/bin/diff -u \
	--label "Generated $FILENAME" --label "Current $ORIGIN" \
	"$RESULT" <( sed -e '/^$/d' -e '/^#.*$/d' "$ORIGIN" | pkgfmt $PKGFMT_ARGS )) || RET=$?

if [ "$DO_MANIFEST_UPDATE" = true ]; then

	if [ $RET -eq 0 ]; then
		echo "Nothing to update"
		exit 0
	fi

	# Get current manifest without broken lines
	CURRENT_MANIFEST=$(cat "$ORIGIN" | pkgfmt -u)

	# Filter out removed lines
	REMOVE_LINES=$(ggrep -oP "^\+\K[^\+].*$" <<< "$MANIFEST_DIFF" || true)
	if [ -z "$REMOVE_LINES" ]; then
		# If no removed lines were found, skip the line-deleting ggrep command
		echo -E "$CURRENT_MANIFEST" > "$ORIGIN"
	else
		ggrep -xFf <( echo "$REMOVE_LINES" ) -v <<< "$CURRENT_MANIFEST" > "$ORIGIN"
	fi

	# Add newly added lines into the manifest
	ggrep -oP "^-\K[^-].*$" <<< "$MANIFEST_DIFF" >> "$ORIGIN" || true

	# Format manifest file back to normal
	pkgfmt "$ORIGIN"
	echo "Manifest updated"
	exit 0
fi

[ -z "$MANIFEST_DIFF" ] || echo "$MANIFEST_DIFF"

if [ $RET -ne 0 ]; then
	echo "Comparing '${RESULT_RELATIVE}' to '$ORIGIN' failed"
	DEBUG_RELATIVE="${DEBUG#$PWDSLASH}"
	echo "You can see '$DEBUG_RELATIVE' for debugging info"
fi
exit $RET
