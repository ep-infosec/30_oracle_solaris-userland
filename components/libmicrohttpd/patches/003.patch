Tomas Heran <tomas.heran@oracle.com>
Allow MHD to work with connections not represented by file descriptors but
rather an object that has recv and send "methods".
NOTE: This RFE hasn't been shared with upstream yet.

diff -r 8cabd8ab3e3b -r 0b399364b890 src/include/microhttpd.h
--- a/src/include/microhttpd.h	Fri Oct 21 16:18:03 2016 +0200
+++ b/src/include/microhttpd.h	Fri Oct 21 16:28:01 2016 +0200
@@ -693,7 +693,8 @@
    * open up an extra file descriptor, which we do not want to do
    * unless necessary.
    */
-  MHD_USE_TLS_EPOLL_UPGRADE = 32768 | MHD_USE_SUSPEND_RESUME | MHD_USE_EPOLL | MHD_USE_TLS
+  MHD_USE_TLS_EPOLL_UPGRADE = 32768 | MHD_USE_SUSPEND_RESUME | MHD_USE_EPOLL | MHD_USE_TLS,
+  MHD_USE_STREAM_CONNS = 65536 | MHD_USE_NO_LISTEN_SOCKET
 
 };
 
@@ -1698,6 +1699,16 @@
 		    const struct sockaddr *addr,
 		    socklen_t addrlen);
 
+_MHD_EXTERN int
+MHD_add_stream_connection (struct MHD_Daemon *daemon,
+    void *stream,
+    ssize_t (*recv_cls_u) (struct MHD_Connection * conn,
+	    void *write_to, size_t max_bytes),
+    ssize_t (*send_cls_u) (struct MHD_Connection * conn,
+	    const void *write_to, size_t max_bytes));
+
+_MHD_EXTERN void * MHD_get_stream_connection_data(struct MHD_Connection *conn);
+
 
 /**
  * Obtain the `select()` sets for this daemon.
@@ -1931,7 +1942,7 @@
  *  shorter afterwards due to elimination of escape sequences)
  */
 _MHD_EXTERN size_t
-MHD_http_unescape (char *val);
+MHD_http_unescape (void *, void *, char *val);
 
 
 /**
diff -r 8cabd8ab3e3b -r 0b399364b890 src/microhttpd/connection.c
--- a/src/microhttpd/connection.c	Fri Oct 21 16:18:03 2016 +0200
+++ b/src/microhttpd/connection.c	Fri Oct 21 16:28:01 2016 +0200
@@ -3038,7 +3038,13 @@
               connection->read_buffer_size
                 = connection->daemon->pool_size / 2;
             }
-	  connection->client_aware = MHD_NO;
+	  /*
+	   * This member, if set to MHD_NO, causes completion notification *NOT*
+	   * to be fired if client closes a connection. So, in this case, if
+	   * client closed a connection after a request/response exchange was
+	   * finished, the completion handler wouldn't be called.
+	   */
+	  /* connection->client_aware = MHD_NO; */
           connection->client_context = NULL;
           connection->continue_message_write_offset = 0;
           connection->responseCode = 0;
diff -r 8cabd8ab3e3b -r 0b399364b890 src/microhttpd/daemon.c
--- a/src/microhttpd/daemon.c	Fri Oct 21 16:18:03 2016 +0200
+++ b/src/microhttpd/daemon.c	Fri Oct 21 16:28:01 2016 +0200
@@ -1767,7 +1767,10 @@
 			 MHD_socket client_socket,
 			 const struct sockaddr *addr,
 			 socklen_t addrlen,
-			 int external_add)
+			 int external_add,
+			 ReceiveCallback recv_cls_u,
+			 TransmitCallback send_cls_u,
+			 void *callback_data)
 {
   struct MHD_Connection *connection;
   unsigned int i;
@@ -1790,7 +1793,10 @@
                                             client_socket,
                                             addr,
                                             addrlen,
-                                            external_add);
+                                            external_add,
+					    recv_cls_u,
+					    send_cls_u,
+					    callback_data);
         }
       /* all pools are at their connection limit, must refuse */
       MHD_socket_close_chk_ (client_socket);
@@ -1944,7 +1950,20 @@
   connection->recv_cls = &recv_param_adapter;
   connection->send_cls = &send_param_adapter;
 
-  if (0 == (connection->daemon->options & MHD_USE_EPOLL_TURBO))
+  if (recv_cls_u == NULL)
+    connection->recv_cls = &recv_param_adapter;
+  else
+    connection->recv_cls = recv_cls_u;
+
+  if (send_cls_u == NULL)
+    connection->send_cls = &send_param_adapter;
+  else
+    connection->send_cls = send_cls_u;
+
+  connection->callback_data = callback_data;
+
+  if (0 == (connection->daemon->options & MHD_USE_EPOLL_TURBO) &&
+      0 == (connection->daemon->options & MHD_USE_STREAM_CONNS))
     {
       /* in turbo mode, we assume that non-blocking was already set
 	 by 'accept4' or whoever calls 'MHD_add_connection' */
@@ -1952,8 +1971,8 @@
         {
 #ifdef HAVE_MESSAGES
           MHD_DLOG (connection->daemon,
-                    _("Failed to set nonblocking mode on connection socket: %s\n"),
-                    MHD_socket_last_strerr_());
+                    _("Failed to set nonblocking mode on connection socket %d %d: %s\n"),
+                    connection->socket_fd, connection->daemon->options, MHD_socket_last_strerr_());
 #endif
         }
     }
@@ -2379,7 +2398,28 @@
 				  client_socket,
 				  addr,
                                   addrlen,
-				  MHD_YES);
+				  MHD_YES,
+				  NULL,
+				  NULL,
+				  NULL);
+}
+
+int
+MHD_add_stream_connection (struct MHD_Daemon *daemon,
+    void *stream,
+    ssize_t (*recv_cls_u) (struct MHD_Connection * conn,
+	    void *write_to, size_t max_bytes),
+    ssize_t (*send_cls_u) (struct MHD_Connection * conn,
+	    const void *write_to, size_t max_bytes))
+{
+  return internal_add_connection (daemon, -1, NULL, 0, MHD_YES, recv_cls_u,
+                                  send_cls_u, stream);
+}
+
+void *
+MHD_get_stream_connection_data(struct MHD_Connection *conn)
+{
+  return (conn->callback_data);
 }
 
 
@@ -2501,7 +2541,10 @@
                                   s,
 				  addr,
                                   addrlen,
-				  MHD_NO);
+				  MHD_NO,
+				  NULL,
+				  NULL,
+				  NULL);
   return MHD_YES;
 }
 
@@ -2793,6 +2836,45 @@
   return MHD_YES;
 }
 
+/**
+ */
+int
+MHD_poll_stream_conns (struct MHD_Daemon *daemon,
+	    int may_block)
+{
+  int num_ready;
+  struct MHD_Connection *pos;
+  struct MHD_Connection *next;
+
+  if (MHD_YES == daemon->shutdown)
+    return MHD_NO;
+
+  next = daemon->connections_head;
+  while (NULL != (pos = next))
+  {
+    next = pos->next;
+
+    /* Is there any I/O event there? */
+      switch (pos->event_loop_info)
+      {
+      case MHD_EVENT_LOOP_INFO_READ:
+				pos->read_handler (pos);
+        break;
+      case MHD_EVENT_LOOP_INFO_WRITE:
+				pos->write_handler (pos);
+        break;
+      case MHD_EVENT_LOOP_INFO_BLOCK:
+        break;
+      case MHD_EVENT_LOOP_INFO_CLEANUP:
+        /* should never happen */
+        break;
+      }
+
+    pos->idle_handler (pos);
+  }
+
+  return MHD_YES;
+}
 
 /**
  * Main internal select() call.  Will compute select sets, call select()
@@ -3655,7 +3737,12 @@
     MHD_cleanup_connections (daemon);
   }
 #endif
-  else
+  else if (0 != (daemon->options & MHD_USE_STREAM_CONNS))
+  {
+    MHD_poll_stream_conns (daemon, MHD_NO);
+    MHD_cleanup_connections (daemon);
+  }
+   else
   {
     MHD_select (daemon, MHD_NO);
     /* MHD_select does MHD_cleanup_connections already */
@@ -3753,7 +3840,7 @@
                   struct MHD_Connection *connection,
                   char *val)
 {
-  return MHD_http_unescape (val);
+  return MHD_http_unescape (NULL, NULL, val);
 }
 
 
@@ -4880,36 +4967,38 @@
       socket_fd = daemon->socket_fd;
     }
 
-  if (!MHD_socket_nonblocking_ (socket_fd))
-    {
+  if (MHD_INVALID_SOCKET != socket_fd) {
+	  if (!MHD_socket_nonblocking_ (socket_fd))
+	    {
 #ifdef HAVE_MESSAGES
-      MHD_DLOG (daemon,
-                _("Failed to set nonblocking mode on listening socket: %s\n"),
-                MHD_socket_last_strerr_());
-#endif
-      if (0 != (flags & MHD_USE_EPOLL) ||
-          daemon->worker_pool_size > 0)
-        {
-           /* Accept must be non-blocking. Multiple children may wake up
-            * to handle a new connection, but only one will win the race.
-            * The others must immediately return. */
-          MHD_socket_close_chk_ (socket_fd);
-          goto free_and_fail;
-        }
-    }
-  if ( (!MHD_SCKT_FD_FITS_FDSET_(socket_fd,
-                                 NULL)) &&
-       (0 == (flags & (MHD_USE_POLL | MHD_USE_EPOLL)) ) )
-    {
+	      MHD_DLOG (daemon,
+			_("Failed to set nonblocking mode on listening socket: %s\n"),
+			MHD_socket_last_strerr_());
+#endif
+	      if (0 != (flags & MHD_USE_EPOLL) ||
+		  daemon->worker_pool_size > 0)
+		{
+		   /* Accept must be non-blocking. Multiple children may wake up
+		    * to handle a new connection, but only one will win the race.
+		    * The others must immediately return. */
+		  MHD_socket_close_chk_ (socket_fd);
+		  goto free_and_fail;
+		}
+	    }
+	  if ( (!MHD_SCKT_FD_FITS_FDSET_(socket_fd,
+					 NULL)) &&
+	       (0 == (flags & (MHD_USE_POLL | MHD_USE_EPOLL)) ) )
+	    {
 #ifdef HAVE_MESSAGES
-      MHD_DLOG (daemon,
-                _("Socket descriptor larger than FD_SETSIZE: %d > %d\n"),
-                socket_fd,
-                FD_SETSIZE);
-#endif
-      MHD_socket_close_chk_ (socket_fd);
-      goto free_and_fail;
-    }
+	      MHD_DLOG (daemon,
+			_("Socket descriptor larger than FD_SETSIZE: %d > %d\n"),
+			socket_fd,
+			FD_SETSIZE);
+#endif
+	      MHD_socket_close_chk_ (socket_fd);
+	      goto free_and_fail;
+	    }
+  }
 
 #ifdef EPOLL_SUPPORT
   if ( (0 != (flags & MHD_USE_EPOLL)) &&
diff -r 8cabd8ab3e3b -r 0b399364b890 src/microhttpd/internal.c
--- a/src/microhttpd/internal.c	Fri Oct 21 16:18:03 2016 +0200
+++ b/src/microhttpd/internal.c	Fri Oct 21 16:28:01 2016 +0200
@@ -135,7 +135,7 @@
  *  shorter afterwards due to elimination of escape sequences)
  */
 size_t
-MHD_http_unescape (char *val)
+MHD_http_unescape (void *ign1, void *ign2, char *val)
 {
   char *rpos = val;
   char *wpos = val;
diff -r 8cabd8ab3e3b -r 0b399364b890 src/microhttpd/internal.h
--- a/src/microhttpd/internal.h	Fri Oct 21 16:18:03 2016 +0200
+++ b/src/microhttpd/internal.h	Fri Oct 21 16:28:01 2016 +0200
@@ -881,6 +881,11 @@
   TransmitCallback send_cls;
 
   /**
+   * User specified data that's associated with a connection.
+   */
+  void *callback_data;
+
+  /**
    * If this connection was upgraded and if we are using
    * #MHD_USE_THREAD_PER_CONNECTION or #MHD_USE_TLS, this points to
    * the upgrade response details such that the
diff -r 8cabd8ab3e3b -r 0b399364b890 src/microhttpd/postprocessor.c
--- a/src/microhttpd/postprocessor.c	Fri Oct 21 16:18:03 2016 +0200
+++ b/src/microhttpd/postprocessor.c	Fri Oct 21 16:28:01 2016 +0200
@@ -394,7 +394,7 @@
           buf[pp->buffer_pos] = '\0';   /* 0-terminate key */
           pp->buffer_pos = 0;   /* reset for next key */
 	  MHD_unescape_plus (buf);
-          MHD_http_unescape (buf);
+          MHD_http_unescape (NULL, NULL, buf);
           poff += equals + 1;
           pp->state = PP_ProcessValue;
           pp->value_offset = 0;
@@ -460,7 +460,7 @@
           /* unescape */
           xbuf[xoff] = '\0';    /* 0-terminate in preparation */
 	  MHD_unescape_plus (xbuf);
-          xoff = MHD_http_unescape (xbuf);
+          xoff = MHD_http_unescape (NULL, NULL, xbuf);
           /* finally: call application! */
 	  pp->must_ikvi = MHD_NO;
           if (MHD_NO == pp->ikvi (pp->cls,
