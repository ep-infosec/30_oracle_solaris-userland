Solaris anti-recursion patch for samba(8) to work with nscd(8).

diff -x '*~' -x '*.pyc' -Nru samba-4.13.8.orig/nsswitch/winbind_nss_hook.c samba-4.13.8/nsswitch/winbind_nss_hook.c
--- samba-4.13.8.orig/nsswitch/winbind_nss_hook.c	1970-01-01 01:00:00.000000000 +0000
+++ samba-4.13.8/nsswitch/winbind_nss_hook.c	2021-09-30 15:43:47.294363438 +0000
@@ -0,0 +1,320 @@
+/*
+ * Samba anti-recursion wrapper for Solaris to work with nscd(8). It's a shared
+ * library preloaded for any Samba process to interpose anti-recursion aware
+ * implementation of getgrnam, getgrgid, getpwnam, getpwuid, setpwent,
+ * getpwent, endpwent, setgrent, getgrent, endgrent and their re-entrant
+ * variants. The new code dynamically excludes winbind as search backend based
+ * on Samba's private anti-recursion tricky solution that uses _NO_WINBINDD
+ * environment variable. When this variable is set to 1, then no lookup should
+ * visit winbindd(8). If nscd is not running the lookup is done by nss_winbind
+ * library in the same process that defines _NO_WINBINDD variable. If nscd is
+ * running, lookup is done by nscd process, so we need to check the variable
+ * before making door_call(3C) and tell nscd whether it should exclude winbind
+ * from the search or not.
+ */
+#include <stdlib.h>
+#include <strings.h>
+#include <limits.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+#include <unistd.h>
+#include <dlfcn.h>
+#include <stdbool.h>
+#include <stdio.h>
+#include <nss_dbdefs.h>
+#include <nss_common.h>
+#include <pthread.h>
+/*
+ * Provide both __posix_get*_r and get*_r definitions for 3rd party code,
+ * e.g. idmap_script(8) backends.
+ */
+#ifdef __PRAGMA_REDEFINE_EXTNAME
+#undef __PRAGMA_REDEFINE_EXTNAME
+#endif
+#define	__lint
+#include <pwd.h>
+#include <grp.h>
+#undef __lint
+#undef getpwuid_r
+#undef getpwnam_r
+#undef getgrgid_r
+#undef getgrnam_r
+#include "nsswitch/winbindd_dont_env.h"
+
+static void constructor(void) __attribute__((constructor));
+static void destructor(void) __attribute__((destructor));
+static bool is_recursion_disabled(void);
+
+extern int str2passwd(const char *, int, void *, char *, int);
+extern int str2group(const char *, int, void *, char *, int);
+
+static const char *passwd_config = NSS_DEFCONF_PASSWD;
+static const char *group_config = NSS_DEFCONF_GROUP;
+static DEFINE_NSS_DB_ROOT(dbroot);
+static DEFINE_NSS_GETENT(context);
+static pthread_key_t tsd_pw_key;
+static pthread_key_t tsd_gr_key;
+static bool initialized;
+
+#define	DEFINE_INITF_FUNC(fname, capital) \
+	static void \
+	nss_initf_ ## fname(nss_db_params_t *params) \
+	{ \
+		params->name = NSS_DBNAM_ ## capital; \
+		if (is_recursion_disabled()) { \
+			params->flags |= NSS_USE_DEFAULT_CONFIG; \
+			params->default_config = fname ## _config; \
+		} else { \
+			params->default_config = NSS_DEFCONF_ ## capital; \
+		} \
+	}
+
+DEFINE_INITF_FUNC(passwd, PASSWD)
+DEFINE_INITF_FUNC(group, GROUP)
+
+#define	DEFINE_CMN_FUNC(func_name, type, ktype, kname, dbop) \
+	static struct type * func_name ## _cmn(ktype kname, \
+	    struct type *result, char *buffer, size_t bufsize) \
+	{ \
+		nss_XbyY_args_t arg; \
+		NSS_XbyY_INIT(&arg, result, buffer, bufsize, str2 ## type); \
+		arg.key.kname = kname; \
+		(void) nss_search(&dbroot, nss_initf_ ## type, dbop, &arg); \
+		return ((struct type *)NSS_XbyY_FINI(&arg)); \
+	}
+
+DEFINE_CMN_FUNC(getpwuid, passwd, uid_t, uid, NSS_DBOP_PASSWD_BYUID)
+DEFINE_CMN_FUNC(getpwnam, passwd, const char *, name, NSS_DBOP_PASSWD_BYNAME)
+DEFINE_CMN_FUNC(getgrgid, group, gid_t, gid, NSS_DBOP_GROUP_BYGID)
+DEFINE_CMN_FUNC(getgrnam, group, const char *, name, NSS_DBOP_GROUP_BYNAME)
+
+#define	POSIX_CHECK_uid
+#define	POSIX_CHECK_gid
+#define	POSIX_CHECK_name \
+	if ((name) == NULL) return (ERANGE)
+
+#define	DEFINE_POSIX_FUNC_PREFIX(func_name, type, ktype, kname, prefix) \
+	int prefix ## func_name ## _r(ktype kname, struct type *t, \
+	    char *buffer, size_t bufsize, struct type **result) \
+	{ \
+		int nerrno = 0; \
+		int oerrno = errno; \
+		POSIX_CHECK_ ## kname; \
+		if (bufsize > INT_MAX) \
+			return (EINVAL); \
+		errno = 0; \
+		*result = func_name ## _cmn(kname, t, buffer, bufsize); \
+		if (*result == NULL) { \
+			nerrno = errno; \
+		} \
+		errno = oerrno; \
+		return (nerrno); \
+	}
+
+#define	DEFINE_POSIX_FUNC(func_name, type, ktype, kname) \
+	DEFINE_POSIX_FUNC_PREFIX(func_name, type, ktype, kname, ) \
+	DEFINE_POSIX_FUNC_PREFIX(func_name, type, ktype, kname, __posix_)
+
+DEFINE_POSIX_FUNC(getpwuid, passwd, uid_t, uid)
+DEFINE_POSIX_FUNC(getpwnam, passwd, const char *, name)
+DEFINE_POSIX_FUNC(getgrgid, group, gid_t, gid)
+DEFINE_POSIX_FUNC(getgrnam, group, const char *, name)
+
+#define	CHECK_LENGTH_passwd
+#define	CHECK_LENGTH_group(buf, sz) \
+	if ((buf)->buflen < sz) \
+		NSS_XbyY_FREE(&buf);
+
+#define	DEFINE_ALLOC_FUNC(name, type, tsd_key) \
+	static nss_XbyY_buf_t *name(size_t sz) \
+	{ \
+		nss_XbyY_buf_t *buffer, *obuffer; \
+		int rc; \
+		\
+		if (! initialized) \
+			return (NULL); \
+		\
+		obuffer = buffer = pthread_getspecific(tsd_key); \
+		if (buffer != NULL) { \
+			CHECK_LENGTH_ ## type(buffer, sz); \
+		} \
+		(void) NSS_XbyY_ALLOC(&buffer, sizeof (struct type), sz);\
+		if (obuffer != buffer) { \
+			rc = pthread_setspecific(tsd_key, buffer); \
+			if (rc != 0) \
+				NSS_XbyY_FREE(&buffer); /* buffer = NULL */ \
+		} \
+		return (buffer); \
+	}
+
+DEFINE_ALLOC_FUNC(alloc_pwbuf, passwd, tsd_pw_key)
+DEFINE_ALLOC_FUNC(alloc_grbuf, group, tsd_gr_key)
+
+/*
+ * Practical buffer limit set by PSARC/2005/133.
+ */
+#define	_NSS_BUFLEN_GROUP (512*1024)
+
+#define	REALLOC_GR_CHECK_gid(ret, error, gid) \
+	((ret) == NULL && (error) == ERANGE)
+#define	REALLOC_GR_CHECK_name(ret, error, name) \
+	((ret) == NULL && (error) == ERANGE && (name) != NULL)
+
+#define	CALL_R(error, func, kname, buf, ret) \
+	error = func ## _r(kname, buf->result, buf->buffer, buf->buflen, &ret)
+
+#define	ALLOC_BUF_passwd alloc_pwbuf(NSS_BUFLEN_PASSWD)
+#define	ALLOC_BUF_group  alloc_grbuf(_NSS_BUFLEN_GROUP)
+
+#define	ALLOC_BIG_BUF_passwd ALLOC_BUF_passwd
+#define	ALLOC_BIG_BUF_group alloc_grbuf(sysconf(_SC_GETGR_R_SIZE_MAX))
+
+#define	REALLOC_passwd(func_name, buf, ret, error, kname)
+#define	REALLOC_group(func_name, buf, ret, error, kname) \
+	if (REALLOC_GR_CHECK_ ## kname(ret, error, kname)) { \
+		buf = ALLOC_BIG_BUF_group; \
+		if (buf == NULL) { \
+			errno = error; \
+			return (NULL); \
+		} \
+		CALL_R(error, func_name, kname, buf, ret); \
+	}
+
+#define	DEFINE_CLASSIC_FUNC(func_name, type, ktype, kname) \
+	struct type *func_name(ktype kname) \
+	{ \
+		struct type *ret; \
+		int error; \
+		nss_XbyY_buf_t *buf = ALLOC_BUF_ ## type; \
+		\
+		if (buf == NULL) \
+			return (NULL); \
+		CALL_R(error, func_name, kname, buf, ret); \
+		REALLOC_ ## type(func_name, buf, ret, error, kname); \
+		if (ret == NULL) \
+			errno = error; \
+		return (ret); \
+	}
+
+DEFINE_CLASSIC_FUNC(getpwuid, passwd, uid_t, uid)
+DEFINE_CLASSIC_FUNC(getpwnam, passwd, const char *, name)
+DEFINE_CLASSIC_FUNC(getgrgid, group, gid_t, gid)
+DEFINE_CLASSIC_FUNC(getgrnam, group, const char *, name)
+
+#define	DEFINE_SETENT_FUNC(name, type) \
+	void name(void) \
+	{ \
+		nss_setent(&dbroot, nss_initf_ ## type, &context); \
+	}
+
+DEFINE_SETENT_FUNC(setpwent, passwd)
+DEFINE_SETENT_FUNC(setgrent, group)
+
+#define	DEFINE_ENDENT_FUNC(name, type) \
+	void name(void) \
+	{ \
+		nss_endent(&dbroot, nss_initf_ ## type, &context); \
+		nss_delete(&dbroot); \
+	}
+
+DEFINE_ENDENT_FUNC(endpwent, passwd)
+DEFINE_ENDENT_FUNC(endgrent, group)
+
+#define	DEFINE_GETENT_R_FUNC(name, type, kname) \
+	struct type * \
+	name ## _r(struct type *result, char *buffer, int buflen) \
+	{ \
+		nss_XbyY_args_t arg; \
+		char		*nam; \
+		\
+		/* In getXXent_r(), protect the caller from +/- entries */ \
+		do { \
+			NSS_XbyY_INIT(&arg, result, buffer, buflen, \
+			    str2 ## type); \
+			/* No key to fill in */ \
+			(void) nss_getent(&dbroot, nss_initf_ ## type, \
+			    &context, &arg); \
+		} while (arg.returnval != 0 && \
+		    (nam = ((struct type *)arg.returnval)->kname) != 0 && \
+		    (*nam == '+' || *nam == '-')); \
+		\
+		return ((struct type *)NSS_XbyY_FINI(&arg)); \
+	}
+
+DEFINE_GETENT_R_FUNC(getpwent, passwd, pw_name)
+DEFINE_GETENT_R_FUNC(getgrent, group, gr_name)
+
+#define	DEFINE_GETENT_FUNC(name, type) \
+	struct type *name(void) \
+	{ \
+		nss_XbyY_buf_t *b = ALLOC_BIG_BUF_ ## type; \
+		\
+		return (b == NULL ? NULL : name ## _r(b->result, b->buffer, \
+		    b->buflen)); \
+	}
+
+DEFINE_GETENT_FUNC(getpwent, passwd)
+DEFINE_GETENT_FUNC(getgrent, group)
+
+static bool
+is_recursion_disabled(void)
+{
+	const char *s;
+
+	s = getenv(WINBINDD_DONT_ENV);
+	if (s != NULL && strcmp(s, "1") == 0)
+		return (true);
+	return (false);
+}
+
+static void
+tsd_destructor(void *arg)
+{
+	nss_XbyY_buf_t *buffer = arg;
+
+	NSS_XbyY_FREE(&buffer);
+}
+
+static void
+constructor(void)
+{
+	const char *s;
+	int ret;
+
+	s = getenv("_NO_WINBINDD_PASSWD_POLICY");
+	if (s != NULL)
+		passwd_config = s;
+	s = getenv("_NO_WINBINDD_GROUP_POLICY");
+	if (s != NULL)
+		group_config = s;
+	ret = pthread_key_create(&tsd_pw_key, tsd_destructor); 
+	if (ret != 0)
+		return;
+	ret = pthread_key_create(&tsd_gr_key, tsd_destructor); 
+	if (ret == 0) {
+		initialized = true;
+	} else {
+		pthread_key_delete(tsd_pw_key);
+	}
+}
+
+static void
+destroy_tsd_key(pthread_key_t key)
+{
+	void *ptr = pthread_getspecific(key);
+	if (ptr != NULL)
+		tsd_destructor(ptr);
+	(void) pthread_setspecific(key, NULL);
+	(void) pthread_key_delete(key);
+}
+
+static void
+destructor(void)
+{
+	if (initialized) {
+		initialized = false;
+		destroy_tsd_key(tsd_pw_key);
+		destroy_tsd_key(tsd_gr_key);
+	}
+}
diff -x '*~' -x '*.pyc' -Nru samba-4.13.8.orig/nsswitch/winbind_nss_solaris.c samba-4.13.8/nsswitch/winbind_nss_solaris.c
--- samba-4.13.8.orig/nsswitch/winbind_nss_solaris.c	2021-09-03 11:50:25.132215280 +0000
+++ samba-4.13.8/nsswitch/winbind_nss_solaris.c	2021-09-30 13:07:11.293248875 +0000
@@ -36,6 +36,7 @@
 #include <string.h>
 #include <pwd.h>
 #include <syslog.h>
+#include <thread.h>
 
 #if !defined(HPUX)
 #include <sys/syslog.h>
diff -x '*~' -x '*.pyc' -Nru samba-4.13.8.orig/nsswitch/winbind_struct_protocol.h samba-4.13.8/nsswitch/winbind_struct_protocol.h
--- samba-4.13.8.orig/nsswitch/winbind_struct_protocol.h	2020-07-09 11:33:56.000000000 +0000
+++ samba-4.13.8/nsswitch/winbind_struct_protocol.h	2021-09-30 13:07:11.265235890 +0000
@@ -38,7 +38,7 @@
 
 #define WINBINDD_PRIV_SOCKET_SUBDIR "winbindd_privileged" /* name of subdirectory of lp_lock_directory() to hold the 'privileged' pipe */
 #define WINBINDD_DOMAIN_ENV  "WINBINDD_DOMAIN" /* Environment variables */
-#define WINBINDD_DONT_ENV    "_NO_WINBINDD"
+#include "nsswitch/winbindd_dont_env.h"
 #define WINBINDD_LOCATOR_KDC_ADDRESS "WINBINDD_LOCATOR_KDC_ADDRESS"
 
 /* Update this when you change the interface.
diff -x '*~' -x '*.pyc' -Nru samba-4.13.8.orig/nsswitch/winbindd_dont_env.h samba-4.13.8/nsswitch/winbindd_dont_env.h
--- samba-4.13.8.orig/nsswitch/winbindd_dont_env.h	1970-01-01 01:00:00.000000000 +0000
+++ samba-4.13.8/nsswitch/winbindd_dont_env.h	2021-09-30 13:07:11.265857205 +0000
@@ -0,0 +1,3 @@
+#ifndef WINBINDD_DONT_ENV
+#define WINBINDD_DONT_ENV    "_NO_WINBINDD"
+#endif
diff -x '*~' -x '*.pyc' -Nru samba-4.13.8.orig/nsswitch/wscript_build samba-4.13.8/nsswitch/wscript_build
--- samba-4.13.8.orig/nsswitch/wscript_build	2020-07-09 11:33:56.000000000 +0000
+++ samba-4.13.8/nsswitch/wscript_build	2021-09-30 13:07:11.266608157 +0000
@@ -85,6 +85,12 @@
 			  deps='winbind-client',
 			  realname='nss_winbind.so.1',
 			  vnum='1')
+
+	bld.SAMBA_LIBRARY('winbind_nss_hook',
+			  source='winbind_nss_hook.c',
+			  deps='',
+			  realname='libwinbind_nss_hook.so.1')
+
 elif (host_os.rfind('hpux') > -1):
 	bld.SAMBA_LIBRARY('nss_winbind',
 			  source='winbind_nss_linux.c',
