Linux implementation do not use possibility to return with EBUSY if mutex object
is already initialized by the other process.
Will be sent to community.

diff --git a/lib/tdb/common/mutex.c b/lib/tdb/common/mutex.c
index 78926db..d0b0930 100644
--- a/lib/tdb/common/mutex.c
+++ b/lib/tdb/common/mutex.c
@@ -589,7 +589,7 @@ int tdb_mutex_init(struct tdb_context *tdb)
 		pthread_mutex_t *chain = &m->hashchains[i];
 
 		ret = pthread_mutex_init(chain, &ma);
-		if (ret != 0) {
+		if (ret != 0 && ret != EBUSY) {
 			goto fail;
 		}
 	}
@@ -597,7 +597,7 @@ int tdb_mutex_init(struct tdb_context *tdb)
 	m->allrecord_lock = F_UNLCK;
 
 	ret = pthread_mutex_init(&m->allrecord_mutex, &ma);
-	if (ret != 0) {
+	if (ret != 0 && ret != EBUSY) {
 		goto fail;
 	}
 	ret = 0;
@@ -690,7 +690,7 @@ static bool tdb_mutex_locking_supported(void)
 		goto cleanup_ma;
 	}
 	ret = pthread_mutex_init(&m, &ma);
-	if (ret != 0) {
+	if (ret != 0 && ret != EBUSY) {
 		goto cleanup_ma;
 	}
 	ret = pthread_mutex_lock(&m);
@@ -887,7 +887,7 @@ _PUBLIC_ bool tdb_runtime_check_for_robust_mutexes(void)
 		goto cleanup;
 	}
 	ret = pthread_mutex_init(ptr, &ma);
-	if (ret != 0) {
+	if (ret != 0 && ret != EBUSY) {
 		goto cleanup;
 	}
 	m = (pthread_mutex_t *)ptr;
