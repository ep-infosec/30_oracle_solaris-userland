#!/bin/nawk
#
# Copyright (c) 2004, 2022, Oracle and/or its affiliates.
#
# Recovered from older ../Makefile to its own file.  test-summarise
# consumes the output generated by bind's `gmake test` target and
# provides an abridged summary.  It works by looking for key elements:
#
# /^T:/ = Start of a test.
# /^I:/ = Info from a test;  collected for possible use later.
# /^A:/ = About: summary of the test - collected with info.
# /^D:/ = debug or diag?
# /^S:/ = Start: pathname and date time - not used here.
# /^E:/ = End: pathname and date time - not used here.
# /^R:/ = Result:
#         When 'PASS' or 'SKIPPED' and report=1 (from command line) the result
#         and test name are displayed. When skipped=1 (from command line) the
#         collected information is also displayed.
#         For all other results (failures) the result, test name and
#         other collected info is displayed.
#         Known issues may be accounted for by adding tests, for example:
#           /^R:name:UNTESTED/ {known++;}\
#           /^R:name:UNRESOLVED/ {known++;}\
# @ EOF = Display count of RESULTS.
#
/^T:/ {name=$0;info="";mark=""}
/^[IAD]:/ {info=sprintf("%s%s\n", info, $0);}
/^R:/ {test++;}
/^R:.*:PASS/ { if (report) printf("%s: %s\n", $1, name); pass++; next}
/^R:.*:SKIPPED/ { if (report) printf("%s: %s\n", $1, name); skip++;
	if (!skipped) next;}
/^R:(nsupdate|statschannel|tsig|wildcard):FAIL/ {known++; mark=" KNOWN issue";}
/^R:.*:UNRESOLVED/ && name ~ /^T:dst:2:A/ {known++;}
/^R:/ {printf("%s\n%s%s%s\n\n", name, info, $0, mark); issue++;}
END{
	printf("\ntests=%d skip=%d known=%d pass=%d issue=%d\n",
	    test, skip, known, pass, issue);
}
