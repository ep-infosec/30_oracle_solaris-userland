diff -ruN openscap-1.3.4.org/CMakeLists.txt openscap-1.3.4/CMakeLists.txt
--- openscap-1.3.4.org/CMakeLists.txt	2021-03-02 02:38:12.665689208 +0000
+++ openscap-1.3.4/CMakeLists.txt	2021-03-02 02:39:11.282575772 +0000
@@ -292,6 +292,7 @@
 cmake_dependent_option(OPENSCAP_PROBE_SOLARIS_ISAINFO "Solaris isainfo probe" ON "ENABLE_PROBES_SOLARIS" OFF)
 cmake_dependent_option(OPENSCAP_PROBE_SOLARIS_SMF "Solaris smf probe" ON "ENABLE_PROBES_SOLARIS" OFF)
 cmake_dependent_option(OPENSCAP_PROBE_SOLARIS_SMFPROPERTY "Solaris smf probe" ON "ENABLE_PROBES_SOLARIS" OFF)
+cmake_dependent_option(OPENSCAP_PROBE_SOLARIS_VIRTUALIZATIONINFO "Solaris virtualizationinfo probe" ON "ENABLE_PROBES_SOLARIS" OFF)
 
 # WINDOWS PROBES
 cmake_dependent_option(OPENSCAP_PROBE_WINDOWS_ACCESSTOKEN "Windows accesstoken probe" ON "ENABLE_PROBES_WINDOWS" OFF)
@@ -423,6 +424,7 @@
 message(STATUS "  Solaris isainfo probe: ${OPENSCAP_PROBE_SOLARIS_ISAINFO}")
 message(STATUS "  Solaris smf probe: ${OPENSCAP_PROBE_SOLARIS_SMF}")
 message(STATUS "  Solaris smfproperty probe: ${OPENSCAP_PROBE_SOLARIS_SMFPROPERTY}")
+message(STATUS "  Solaris virtualizationinfo probe: ${OPENSCAP_PROBE_SOLARIS_VIRTUALIZATIONINFO}")
 message(STATUS " ")
 
 
diff -ruN openscap-1.3.4.org/config.h.in openscap-1.3.4/config.h.in
--- openscap-1.3.4.org/config.h.in	2021-03-02 02:38:12.649919369 +0000
+++ openscap-1.3.4/config.h.in	2021-03-02 02:39:11.283049024 +0000
@@ -112,6 +112,7 @@
 #cmakedefine OPENSCAP_PROBE_SOLARIS_ISAINFO
 #cmakedefine OPENSCAP_PROBE_SOLARIS_SMF
 #cmakedefine OPENSCAP_PROBE_SOLARIS_SMFPROPERTY
+#cmakedefine OPENSCAP_PROBE_SOLARIS_VIRTUALIZATIONINFO
 #cmakedefine OPENSCAP_PROBE_UNIX_DNSCACHE
 #cmakedefine OPENSCAP_PROBE_UNIX_FILE
 #cmakedefine OPENSCAP_PROBE_UNIX_FILEEXTENDEDATTRIBUTE
diff -ruN openscap-1.3.4.org/src/OVAL/oval_enumerations.c openscap-1.3.4/src/OVAL/oval_enumerations.c
--- openscap-1.3.4.org/src/OVAL/oval_enumerations.c	2021-03-02 02:38:12.688727072 +0000
+++ openscap-1.3.4/src/OVAL/oval_enumerations.c	2021-03-02 02:39:11.283626391 +0000
@@ -548,6 +548,7 @@
 	{OVAL_SOLARIS_PATCH54, "patch54"},
 	{OVAL_SOLARIS_SMF, "smf"},
 	{OVAL_SOLARIS_SMFPROPERTY, "smfproperty"},
+	{OVAL_SOLARIS_VIRTUALIZATIONINFO, "virtualizationinfo"},
 	{OVAL_SOLARIS_NDD, "ndd"},
 	{OVAL_SOLARIS_PACKAGECHECK, "packagecheck"},
 	{OVAL_SUBTYPE_UNKNOWN, NULL}
diff -ruN openscap-1.3.4.org/src/OVAL/probes/probe-table.c openscap-1.3.4/src/OVAL/probes/probe-table.c
--- openscap-1.3.4.org/src/OVAL/probes/probe-table.c	2021-03-02 02:38:12.691392741 +0000
+++ openscap-1.3.4/src/OVAL/probes/probe-table.c	2021-03-02 02:39:11.284128902 +0000
@@ -139,6 +139,10 @@
 #include "unix/solaris/smfproperty.h"
 #endif
 
+#ifdef OPENSCAP_PROBE_SOLARIS_VIRTUALIZATIONINFO
+#include "unix/solaris/virtualizationinfo.h"
+#endif
+
 #ifdef OPENSCAP_PROBE_UNIX_DNSCACHE
 #include "unix/dnscache_probe.h"
 #endif
@@ -305,6 +309,9 @@
 #ifdef OPENSCAP_PROBE_SOLARIS_SMFPROPERTY
 	{OVAL_SOLARIS_SMFPROPERTY, NULL, smfproperty_probe_main, NULL, NULL},
 #endif
+#ifdef OPENSCAP_PROBE_SOLARIS_VIRTUALIZATIONINFO
+	{OVAL_SOLARIS_VIRTUALIZATIONINFO, NULL, virtualizationinfo_probe_main, NULL, NULL},
+#endif
 #ifdef OPENSCAP_PROBE_UNIX_DNSCACHE
 	{OVAL_UNIX_DNSCACHE, NULL, dnscache_probe_main, NULL, NULL},
 #endif
diff -ruN openscap-1.3.4.org/src/OVAL/probes/unix/solaris/CMakeLists.txt openscap-1.3.4/src/OVAL/probes/unix/solaris/CMakeLists.txt
--- openscap-1.3.4.org/src/OVAL/probes/unix/solaris/CMakeLists.txt	2021-03-02 02:38:12.717109945 +0000
+++ openscap-1.3.4/src/OVAL/probes/unix/solaris/CMakeLists.txt	2021-03-02 02:39:11.284526209 +0000
@@ -12,13 +12,20 @@
 	)
 endif()
 
-if(OPENSCAP_PROBE_SOLARIS_SMF)
+if(OPENSCAP_PROBE_SOLARIS_SMFPROPERTY)
 	list(APPEND SOLARIS_PROBES_SOURCES
 		"smfproperty.c"
 		"smfproperty.h"
 	)
 endif()
 
+if(OPENSCAP_PROBE_SOLARIS_VIRTUALIZATIONINFO)
+	list(APPEND SOLARIS_PROBES_SOURCES
+		"virtualizationinfo.c"
+		"virtualizationinfo.h"
+	)
+endif()
+
 add_library(solaris_probes_object OBJECT ${SOLARIS_PROBES_SOURCES})
 set_oscap_generic_properties(solaris_probes_object)
 target_include_directories(solaris_probes_object PRIVATE ${SOLARIS_PROBES_INCLUDE_DIRECTORIES})
diff -ruN openscap-1.3.4.org/src/OVAL/probes/unix/solaris/virtualizationinfo.c openscap-1.3.4/src/OVAL/probes/unix/solaris/virtualizationinfo.c
--- openscap-1.3.4.org/src/OVAL/probes/unix/solaris/virtualizationinfo.c	1969-12-31 16:00:00.000000000 +0000
+++ openscap-1.3.4/src/OVAL/probes/unix/solaris/virtualizationinfo.c	2021-03-02 02:39:11.284931000 +0000
@@ -0,0 +1,236 @@
+/**
+ * @file virtualizationinfo.c
+ * @brief virtualizationinfo probe
+ * @author "Jacob Varughese" <jacob.varughese@oracle.com>
+ *
+ * This probe processes the properties of virtual environments.
+ */
+
+
+#include "probe-api.h"
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#if	defined(__SVR4)	&&	defined(__sun)
+#include <stdlib.h>
+#include <string.h>
+#include <stdio.h>
+#include <errno.h>
+#include <sys/stat.h>
+#include <ctype.h>
+#include <sys/types.h>
+#include <limits.h>
+#include <unistd.h>
+#include <libv12n.h>
+#include "probe/entcmp.h"
+#include <stdlib.h>
+#include "common/debug_priv.h"
+#include <syslog.h>
+
+
+/*
+ * virtualizationinfo probe
+ *
+ * current - name of current environment
+ * supported - list of supported virtual environments by this environment
+ * parent - parent environment of the current environment
+ * ldom-role - ldom domain role types
+ * properties - record type of properties for the current environment
+ */
+#define	BUFFER_LEN	1024;
+
+struct result_info {
+	char *current;
+	char *supported;
+	char *parent;
+	char *ldomrole;
+	SEXP_t *properties;
+};
+
+
+static void
+report_finding(struct result_info *res, probe_ctx *ctx)
+{
+	SEXP_t *item;
+
+	item = probe_item_create(OVAL_SOLARIS_VIRTUALIZATIONINFO, NULL,
+	    "current", OVAL_DATATYPE_STRING, res->current,
+	    "supported", OVAL_DATATYPE_STRING, res->supported,
+	    "parent", OVAL_DATATYPE_STRING, res->parent,
+	    "ldom-role", OVAL_DATATYPE_STRING, res->ldomrole,
+	    "properties", OVAL_DATATYPE_RECORD, res->properties,
+	    NULL);
+	probe_item_collect(ctx, item);
+}
+
+static void
+get_env_props_str(v12n_env_t *curr, SEXP_t *properties)
+{
+	v12n_prop_t *props;
+	v12n_prop_t prop;
+	int i;
+
+	if (properties == NULL || curr == NULL)
+		return;
+	if ((props = v12n_list_env_props(curr)) == NULL) {
+		dE("No properties for current environment\n");
+		return;
+	}
+	for (i = 0; props[i] != 0;  i++) {
+		char *name = NULL, *value = NULL;
+		SEXP_t *field, se_tmp;
+
+		prop = props[i];
+		if ((name = v12n_get_prop_name(prop)) != NULL &&
+		    (prop ==  V12N_PROP_NAME || prop == V12N_PROP_CLASS))
+			continue;
+		if ((value = v12n_get_env_prop(curr, prop)) == NULL)
+			continue;
+		field = probe_ent_creat1(name, NULL,
+		    SEXP_string_new_r(&se_tmp, value, strlen(value)));
+		probe_ent_setdatatype(field, OVAL_DATATYPE_STRING);
+		SEXP_list_add(properties, field);
+		free(value);
+		SEXP_free_r(&se_tmp);
+		SEXP_free(field);
+	}
+	free(props);
+}
+
+static char *
+get_env_prop_str(v12n_env_t *curr, v12n_prop_t *prop)
+{
+	char *value = NULL;
+
+	if (curr != NULL && prop != NULL &&
+	    ((value = v12n_get_env_prop(curr, *prop)) != NULL) &&
+	    (strcmp(value, "non-virtualized") != 0)) {
+		return value;
+	}
+	return NULL;
+}
+
+static int
+get_supported_envs(v12n_env_t **envs, char **result)
+{
+	int i;
+	int size = 0;
+	int len;
+	int cur_size;
+	char *suppenvs;
+
+	cur_size = BUFFER_LEN;
+	if ((suppenvs = malloc(cur_size)) == NULL) {
+		dE("Out of memory error.\n");
+		return PROBE_ENOMEM;
+	}
+	suppenvs[0] = '\0';
+	for (i = 0; envs[i] != 0;  i++) {
+		char *child_env;
+		char *tmp;
+		v12n_env_t *supp;
+		v12n_prop_t prop;
+
+		supp = envs[i];
+		prop = V12N_PROP_NAME;
+		if ((child_env = get_env_prop_str(supp, &prop)) == NULL)
+			continue;
+		len = strlen(child_env);
+		if ((len + size + 2) > cur_size) {
+			cur_size = size *2 + len;
+			if ((suppenvs = realloc(suppenvs, cur_size)) == NULL) {
+				dE("Out of memory error.\n");
+				return PROBE_ENOMEM;
+			}
+		}
+		if (i > 0) {
+			suppenvs[size -1] = ' ';
+			suppenvs[size] = '\0';
+			tmp = &suppenvs[size];
+		} else {
+			tmp = &suppenvs[0];
+		}
+		strcpy(tmp, child_env);
+		size += len +1;
+		free(child_env);
+		v12n_free_env(envs[i]);
+	}
+	*result = suppenvs;
+	return 0;
+}
+
+static int
+get_environment_settings(probe_ctx *ctx)
+{
+	struct result_info r;
+	v12n_env_t **envs = NULL;
+	v12n_env_t *curr = NULL;
+	v12n_env_t *parent = NULL;
+	v12n_prop_t prop;
+	SEXP_t *properties;
+	boolean_t ldom = false;
+	int rc = 0;
+
+	memset(&r, 0x0, sizeof(struct result_info));
+	prop = V12N_PROP_NAME;
+	curr = v12n_get_current_env();
+	parent = v12n_get_parent_env();
+	r.current = get_env_prop_str(curr, &prop);
+	r.parent = get_env_prop_str(parent, &prop);
+	if (r.current != NULL && strcmp(r.current, "logical-domain") == 0)
+		ldom = true;
+	if ((envs = v12n_list_supported_envs()) != NULL) {
+		if ((rc = get_supported_envs(envs, &r.supported)) > 0)
+			goto error;
+	}
+	dI("supported envs: %s\n", r.supported);
+	dI("current: %s\n", r.current);
+	dI("parent: %s\n", r.parent);
+
+	/* check ldom roles */
+	if (ldom == true) {
+		for (prop = V12N_PROP_LDOMS_ROLE_CONTROL;
+		    prop < V12N_PROP_LDOMS_NAME; prop++) {
+			char *value = NULL;
+
+			if ((value = get_env_prop_str(curr, &prop)) != NULL &&
+			    strcmp(value, "true") == 0) {
+				r.ldomrole = strdup(v12n_get_prop_name(prop));
+				free(value);
+				break;
+			}
+			free(value);
+		}
+		dI("ldom-role : %s\n", r.ldomrole);
+	}
+
+	/* properties name, uuid, control-name, chassis, kzone-name */
+	properties = probe_ent_creat1("properties", NULL, NULL);
+	probe_ent_setdatatype(properties, OVAL_DATATYPE_RECORD);
+	get_env_props_str(curr, properties);
+	r.properties = properties;
+	report_finding(&r, ctx);
+	SEXP_free(properties);
+error:
+	v12n_free_env(curr);
+	v12n_free_env(parent);
+	free(envs);
+	free(r.supported);
+	free(r.current);
+	free(r.parent);
+	free(r.ldomrole);
+	return rc;
+}
+
+int
+virtualizationinfo_probe_main(probe_ctx *ctx, void *probe_arg)
+{
+
+	if (ctx == NULL) {
+		dE("No object in context.\n");
+		return PROBE_ENOOBJ;
+	}
+	return get_environment_settings(ctx);
+}
+#endif
diff -ruN openscap-1.3.4.org/src/OVAL/probes/unix/solaris/virtualizationinfo.h openscap-1.3.4/src/OVAL/probes/unix/solaris/virtualizationinfo.h
--- openscap-1.3.4.org/src/OVAL/probes/unix/solaris/virtualizationinfo.h	1969-12-31 16:00:00.000000000 +0000
+++ openscap-1.3.4/src/OVAL/probes/unix/solaris/virtualizationinfo.h	2021-03-02 02:39:11.285261003 +0000
@@ -0,0 +1,14 @@
+/**
+ * @file virtualizationinfo.h
+ * @brief This is a include file for virtualizationinfo.c.
+ */
+
+
+#ifndef OPENSCAP_VIRTUALIZATIONINFO_PROBE_H
+#define OPENSCAP_VIRTUALIZATIONINFO_PROBE_H
+
+#include "probe-api.h"
+
+int virtualizationinfo_probe_main(probe_ctx *ctx, void *probe_arg);
+
+#endif 
diff -ruN openscap-1.3.4.org/src/OVAL/public/oval_types.h openscap-1.3.4/src/OVAL/public/oval_types.h
--- openscap-1.3.4.org/src/OVAL/public/oval_types.h	2021-03-02 02:38:12.736130528 +0000
+++ openscap-1.3.4/src/OVAL/public/oval_types.h	2021-03-02 02:40:32.313668694 +0000
@@ -218,6 +218,7 @@
 	OVAL_SOLARIS_NDD = OVAL_FAMILY_SOLARIS + 6,
 	OVAL_SOLARIS_PACKAGECHECK = OVAL_FAMILY_SOLARIS + 7,
 	OVAL_SOLARIS_SMFPROPERTY = OVAL_FAMILY_SOLARIS + 8,
+	OVAL_SOLARIS_VIRTUALIZATIONINFO = OVAL_FAMILY_SOLARIS + 9,
 
 /// Unix subtypes
 	OVAL_UNIX_FILE = OVAL_FAMILY_UNIX + 1,
