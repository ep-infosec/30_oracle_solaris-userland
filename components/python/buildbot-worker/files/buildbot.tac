#
# Copyright (c) 2021, Oracle and/or its affiliates.
#
# Worker configuration file, generated by buildbot-worker service.
#
# !! Do not edit this file, it is a symbolic link to a shared file !!
#
# If you need to modify this file, make your own copy and place it instead of
# this symbolic link.
#

import os, sys, re

from buildbot_worker.bot import Worker
from twisted.application import service
from twisted.python.logfile import LogFile
from twisted.python.log import ILogObserver, FileLogObserver

from ctypes import cdll, c_char_p, c_void_p, c_ubyte, c_int64, POINTER


basedir = os.path.dirname(os.path.abspath(__file__))
svc = os.environ.get("SMF_FMRI")
if not svc:
    sys.exit("this script can only be invoked by smf(5)")

_libscf = cdll.LoadLibrary('libscf.so')

# Setup function prototype
_libscf.scf_simple_prop_get.argtypes = [c_void_p, c_char_p, c_char_p, c_char_p]
_libscf.scf_simple_prop_get.restype = c_void_p
_libscf.scf_simple_prop_next_astring.argtypes = [c_void_p]
_libscf.scf_simple_prop_next_astring.restype = c_char_p
_libscf.scf_simple_prop_next_integer.argtypes = [c_void_p]
_libscf.scf_simple_prop_next_integer.restype = POINTER(c_int64)
_libscf.scf_simple_prop_free.argtypes = [c_void_p]

def _get_prop_int(pg, prop, default=None):
    prop = _libscf.scf_simple_prop_get(None, svc.encode(), pg.encode(), prop.encode())
    if prop is None:
        return default

    val = _libscf.scf_simple_prop_next_integer(prop)
    return val.contents.value if val else default

def _get_prop_str(pg, prop, default=None):
    prop = _libscf.scf_simple_prop_get(None, svc.encode(), pg.encode(), prop.encode())
    if prop is None:
        return default

    val = _libscf.scf_simple_prop_next_astring(prop)
    return val.decode() if val else default


application = service.Application('buildbot-worker')

logfile = LogFile.fromFullPath(
    os.path.join(basedir, "twistd.log"),
    rotateLength = _get_prop_int("config", "log_rotate_length", 10000000),
    maxRotatedFiles = _get_prop_int("config", "log_max_rotated_files", 10)
)

application.setComponent(ILogObserver, FileLogObserver(logfile).emit)

# Prepare admin and host files based on the corresponding svc props
info_dir = os.path.join(basedir, "info")
with open(os.path.join(info_dir, "admin"), "w") as ofile:
    ofile.write(_get_prop_str("config/info", "admin",
                              default="Your Name Here <admin@example.com>"))
with open(os.path.join(info_dir, "host"), "w") as ofile:
    ofile.write(_get_prop_str("config/info", "host",
                              default="Description of this build host here"))

buildmaster_host = _get_prop_str("config", "master")
port = _get_prop_int("config", "port", 9989 if buildmaster_host else None)
name = _get_prop_str("config/credentials", "worker_name")
passwd = _get_prop_str("config/credentials", "worker_password")

s = Worker(buildmaster_host, port, name, passwd, basedir,
    keepalive=_get_prop_int("config", "keepalive"),
    maxdelay=_get_prop_int("config", "maxdelay"),
    useTls=_get_prop_int("config", "use_tls"),
    maxRetries=_get_prop_int("config", "maxretries"),
    connection_string=_get_prop_str("config", "connection_string"),
    proxy_connection_string=_get_prop_str("config", "proxy_connection_string")
)

s.setServiceParent(application)
