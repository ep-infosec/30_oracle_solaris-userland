Fixes CVE-2020-14422
Desc:
  Lib/ipaddress.py in Python through 3.8.3 improperly computes hash values in
  the IPv4Interface and IPv6Interface classes, which might allow a remote
  attacker to cause a denial of service if an application is affected by the
  performance of a dictionary containing IPv4Interface or IPv6Interface objects,
  and this attacker can cause many dictionary entries to be created.

Note that this is also true for this backport of the now-standard library.

Upstream bug: https://bugs.python.org/issue41004

Upstream PR:
https://github.com/python/cpython/pull/21033

--- ipaddress-1.0.23/ipaddress.py
+++ ipaddress-1.0.23/ipaddress.py
@@ -1536,7 +1536,7 @@ class IPv4Interface(IPv4Address):
             return False
 
     def __hash__(self):
-        return self._ip ^ self._prefixlen ^ int(self.network.network_address)
+        return hash((self._ip, self._prefixlen, int(self.network.network_address)))
 
     __reduce__ = _IPAddressBase.__reduce__
 
@@ -2229,7 +2229,7 @@ class IPv6Interface(IPv6Address):
             return False
 
     def __hash__(self):
-        return self._ip ^ self._prefixlen ^ int(self.network.network_address)
+        return hash((self._ip, self._prefixlen, int(self.network.network_address)))
 
     __reduce__ = _IPAddressBase.__reduce__
 
--- ipaddress-1.0.23/test_ipaddress.py
+++ ipaddress-1.0.23/test_ipaddress.py
@@ -2232,6 +2232,22 @@ class SingleIssuesTest(BaseTestCase):
         with self.assertRaisesRegex(TypeError, r'are not of the same version'):
             v6net.subnet_of(v4net)
 
+    # issue41004 Hash collisions in IPv4Interface and IPv6Interface
+    def testV4HashIsNotConstant(self):
+        ipv4_address1 = ipaddress.IPv4Interface("1.2.3.4")
+        ipv4_address2 = ipaddress.IPv4Interface("2.3.4.5")
+        self.assertNotEqual(32, ipv4_address1.__hash__())
+        self.assertNotEqual(32, ipv4_address2.__hash__())
+        self.assertNotEqual(ipv4_address1.__hash__(), ipv4_address2.__hash__())
+
+    # issue41004 Hash collisions in IPv4Interface and IPv6Interface
+    def testV6HashIsNotConstant(self):
+        ipv6_address1 = ipaddress.IPv6Interface("2001:658:22a:cafe:200:0:0:1")
+        ipv6_address2 = ipaddress.IPv6Interface("2001:658:22a:cafe:200:0:0:2")
+        self.assertNotEqual(128, ipv6_address1.__hash__())
+        self.assertNotEqual(128, ipv6_address2.__hash__())
+        self.assertNotEqual(ipv6_address1.__hash__(), ipv6_address2.__hash__())
+
 
 if __name__ == '__main__':
     unittest.main()
