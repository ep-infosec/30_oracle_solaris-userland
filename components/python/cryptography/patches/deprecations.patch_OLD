Don't report Python 2 and OpenSSL 1.0.2 deprecation warnings to users.

--- cryptography-3.1.1/src/cryptography/__init__.py
+++ cryptography-3.1.1/src/cryptography/__init__.py
@@ -31,14 +31,6 @@ __all__ = [
     "__copyright__",
 ]
 
-if sys.version_info[0] == 2:
-    warnings.warn(
-        "Python 2 is no longer supported by the Python core team. Support for "
-        "it is now deprecated in cryptography, and will be removed in a "
-        "future release.",
-        CryptographyDeprecationWarning,
-        stacklevel=2,
-    )
 if sys.version_info[:2] == (3, 5):
     warnings.warn(
         "Python 3.5 support will be dropped in the next release of"
--- cryptography-3.1.1/src/cryptography/hazmat/bindings/openssl/binding.py
+++ cryptography-3.1.1/src/cryptography/hazmat/bindings/openssl/binding.py
@@ -165,19 +165,6 @@ class Binding(object):
             _openssl_assert(cls.lib, res == 1)
 
 
-def _verify_openssl_version(lib):
-    if (
-        lib.CRYPTOGRAPHY_OPENSSL_LESS_THAN_110
-        and not lib.CRYPTOGRAPHY_IS_LIBRESSL
-    ):
-        warnings.warn(
-            "OpenSSL version 1.0.2 is no longer supported by the OpenSSL "
-            "project, please upgrade. The next version of cryptography will "
-            "drop support for it.",
-            utils.CryptographyDeprecationWarning,
-        )
-
-
 def _verify_package_version(version):
     # Occasionally we run into situations where the version of the Python
     # package does not match the version of the shared object that is loaded.
@@ -207,5 +194,3 @@ _verify_package_version(cryptography.__v
 # condition registering the OpenSSL locks. On Python 3.4+ the import lock
 # is per module so this approach will not work.
 Binding.init_static_locks()
-
-_verify_openssl_version(Binding.lib)
