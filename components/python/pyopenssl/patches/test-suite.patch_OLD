test_crypto:
* Solaris doesn't have flaky python package and, therefore, all tests depending
  on it are disabled.

* Serial numbers of both dumps can be displayed in two ways which are both
  valid, but simple string comparison fails due to that.  Patch fixes this by
  comparing both serial numbers first and than replacing both strings with the
  same one.

test_ssl:
* Solaris doesn't have pretend python package and, therefore, all tests
  depending on it are disabled.

* test_set_default_verify_paths tries to connect to an external server, which
  does not work within OWAN, even if proxy variables are set.

--- pyOpenSSL-19.0.0/tests/test_crypto.py
+++ pyOpenSSL-19.0.0/tests/test_crypto.py
@@ -20,8 +20,6 @@ from cryptography.hazmat.backends.openss
 from cryptography.hazmat.primitives import serialization
 from cryptography.hazmat.primitives.asymmetric import rsa
 
-import flaky
-
 from OpenSSL.crypto import TYPE_RSA, TYPE_DSA, Error, PKey, PKeyType
 from OpenSSL.crypto import X509, X509Type, X509Name, X509NameType
 from OpenSSL.crypto import (
@@ -1646,7 +1644,7 @@ WpOdIpB8KksUTCzV591Nr1wd
         with pytest.raises(TypeError):
             cert.gmtime_adj_notBefore(None)
 
-    @flaky.flaky
+    @pytest.mark.skip(reason="We don't have flaky python package in Solaris")
     def test_gmtime_adj_notBefore(self):
         """
         `X509.gmtime_adj_notBefore` changes the not-before timestamp to be the
@@ -1672,7 +1670,7 @@ WpOdIpB8KksUTCzV591Nr1wd
         with pytest.raises(TypeError):
             cert.gmtime_adj_notAfter(None)
 
-    @flaky.flaky
+    @pytest.mark.skip(reason="We don't have flaky python package in Solaris")
     def test_gmtime_adj_notAfter(self):
         """
         `X509.gmtime_adj_notAfter` changes the not-after timestamp
@@ -2714,7 +2712,30 @@ class TestFunction(object):
         dumped_text = dump_certificate(FILETYPE_TEXT, cert)
         good_text = _runopenssl(
             dumped_pem, b"x509", b"-noout", b"-text", b"-nameopt", b"")
-        assert dumped_text == good_text
+
+        # On Solaris, the serial number is displayed differently between both
+        # dumps (but both are correct). Add additional check for equality of
+        # those serial numbers.
+        import re
+        def get_serial_number(text):
+            match = re.search(b'Serial Number:[^\(]+\(0x(.*)\)', text)
+            if match:
+                return match.group(1)
+
+            match = re.search(b'Serial Number:\n[ ]*([^\n]+)', text)
+            if match:
+                return match.group(1).replace(':', '')
+            return None
+
+        good_serial_number = get_serial_number(good_text)
+        dumped_serial_number = get_serial_number(dumped_text)
+        assert good_serial_number == dumped_serial_number
+
+        # remove differences between both strings
+        def fix_text(text):
+            return re.sub(b'Serial Number:[ \n][^\n]+\n', b'Serial Number: ###\n', text)
+
+        assert fix_text(dumped_text) == fix_text(good_text)
 
     def test_dump_certificate_bad_type(self):
         """
@@ -3205,9 +3226,7 @@ class TestCRL(object):
             x509.NameAttribute(x509.NameOID.COMMON_NAME, u"Testing Root CA"),
         ])
 
-    # Flaky because we compare the output of running commands which sometimes
-    # varies by 1 second
-    @flaky.flaky
+    @pytest.mark.skip(reason="We don't have flaky python package in Solaris")
     def test_export_text(self):
         """
         If passed ``FILETYPE_TEXT`` for the format, ``CRL.export`` returns a
--- pyOpenSSL-19.0.0/tests/test_ssl.py
+++ pyOpenSSL-19.0.0/tests/test_ssl.py
@@ -20,8 +20,6 @@ from warnings import simplefilter
 
 import pytest
 
-from pretend import raiser
-
 from six import PY3, text_type
 
 from cryptography import x509
@@ -1150,6 +1148,7 @@ class TestContext(object):
         assert context._check_env_vars_set(dir_var, file_var) is True
         assert context._check_env_vars_set(dir_var, file_var) is True
 
+    @pytest.mark.skip(reason="We don't have pretend python package in Solaris")
     def test_verify_no_fallback_if_env_vars_set(self, monkeypatch):
         """
         Test that we don't use the fallback path if env vars are set.
@@ -1180,6 +1179,9 @@ class TestContext(object):
         reason="set_default_verify_paths appears not to work on Windows.  "
         "See LP#404343 and LP#404344."
     )
+    @pytest.mark.skip(
+        reason="This test doesn't work within OWAN, even with proxy set"
+    )
     def test_set_default_verify_paths(self):
         """
         `Context.set_default_verify_paths` causes the platform-specific CA
