Since the platform is known at this point, we can simplify the logic
and not deliver the windows related locking.

--- filelock-3.8.0/src/filelock/__init__.py
+++ filelock-3.8.0/src/filelock/__init__.py
@@ -13,23 +13,14 @@ import warnings
 from ._api import AcquireReturnProxy, BaseFileLock
 from ._error import Timeout
 from ._soft import SoftFileLock
-from ._unix import UnixFileLock, has_fcntl
-from ._windows import WindowsFileLock
+from ._unix import UnixFileLock
 from .version import version
 
 #: version of the project as a string
 __version__: str = version
 
 
-if sys.platform == "win32":  # pragma: win32 cover
-    _FileLock: type[BaseFileLock] = WindowsFileLock
-else:  # pragma: win32 no cover
-    if has_fcntl:
-        _FileLock: type[BaseFileLock] = UnixFileLock
-    else:
-        _FileLock = SoftFileLock
-        if warnings is not None:
-            warnings.warn("only soft file lock is available")
+_FileLock: type[BaseFileLock] = UnixFileLock
 
 #: Alias for the lock, which should be used for the current platform. On Windows, this is an alias for
 # :class:`WindowsFileLock`, on Unix for :class:`UnixFileLock` and otherwise for :class:`SoftFileLock`.
@@ -42,7 +33,6 @@ __all__ = [
     "SoftFileLock",
     "Timeout",
     "UnixFileLock",
-    "WindowsFileLock",
     "BaseFileLock",
     "AcquireReturnProxy",
 ]
--- filelock-3.8.0/tests/test_filelock.py
+++ filelock-3.8.0/tests/test_filelock.py
@@ -14,7 +14,7 @@ from typing import Callable, Iterator, T
 import pytest
 from _pytest.logging import LogCaptureFixture
 
-from filelock import BaseFileLock, FileLock, SoftFileLock, Timeout, UnixFileLock, WindowsFileLock
+from filelock import BaseFileLock, FileLock, SoftFileLock, Timeout, UnixFileLock
 
 
 @pytest.mark.parametrize(
@@ -408,6 +408,7 @@ def test_context_decorator(lock_type: ty
     assert not lock.is_locked
 
 
+@pytest.mark.skip(reason="We don't deliver WindowsFileLock with Solaris")
 def test_wrong_platform(tmp_path: Path) -> None:
     assert not inspect.isabstract(UnixFileLock)
     assert not inspect.isabstract(WindowsFileLock)
