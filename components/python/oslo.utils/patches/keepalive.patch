In-house patch to allow the TCP keepalive parameters to be used on Solaris.
Patch has not yet been submitted upstream.

--- oslo.utils-4.10.0/oslo_utils/netutils.py
+++ oslo.utils-4.10.0/oslo_utils/netutils.py
@@ -21,6 +21,7 @@ import logging
 import os
 import re
 import socket
+import sys
 from urllib import parse
 
 import netaddr
@@ -496,26 +497,44 @@ def set_tcp_keepalive(sock, tcp_keepaliv
     if not tcp_keepalive:
         return
 
-    # These options aren't available in the OS X version of eventlet,
-    # Idle + Count * Interval effectively gives you the total timeout.
-    if tcp_keepidle is not None:
-        if hasattr(socket, 'TCP_KEEPIDLE'):
-            sock.setsockopt(socket.IPPROTO_TCP,
-                            socket.TCP_KEEPIDLE,
-                            tcp_keepidle)
-        else:
-            LOG.warning('tcp_keepidle not available on your system')
-    if tcp_keepalive_interval is not None:
-        if hasattr(socket, 'TCP_KEEPINTVL'):
-            sock.setsockopt(socket.IPPROTO_TCP,
-                            socket.TCP_KEEPINTVL,
-                            tcp_keepalive_interval)
-        else:
-            LOG.warning('tcp_keepintvl not available on your system')
-    if tcp_keepalive_count is not None:
-        if hasattr(socket, 'TCP_KEEPCNT'):
-            sock.setsockopt(socket.IPPROTO_TCP,
-                            socket.TCP_KEEPCNT,
-                            tcp_keepalive_count)
-        else:
-            LOG.warning('tcp_keepcnt not available on your system')
+    if sys.platform == 'sunos5':
+        # Should match definitions in <netinet/tcp.h>
+        TCP_KEEPALIVE_THRESHOLD = 0x16
+        TCP_KEEPALIVE_ABORT_THRESHOLD = 0x17
+
+        if tcp_keepidle is not None:
+            sock.setsockopt(socket.IPPROTO_TCP, TCP_KEEPALIVE_THRESHOLD,
+                            tcp_keepidle * 1000)
+        if tcp_keepalive_interval is None and tcp_keepalive_count is None:
+            return
+        if tcp_keepalive_interval is None or tcp_keepalive_count is None:
+            LOG.warning('tcp_keepintvl and tcp_keepknt must be set '
+                            'together')
+        else:
+            sock.setsockopt(
+                socket.IPPROTO_TCP, TCP_KEEPALIVE_ABORT_THRESHOLD,
+                tcp_keepalive_interval * tcp_keepalive_count * 1000)
+    else:
+        # These options aren't available in the OS X version of eventlet,
+        # Idle + Count * Interval effectively gives you the total timeout.
+        if tcp_keepidle is not None:
+            if hasattr(socket, 'TCP_KEEPIDLE'):
+                sock.setsockopt(socket.IPPROTO_TCP,
+                                socket.TCP_KEEPIDLE,
+                                tcp_keepidle)
+            else:
+                LOG.warning('tcp_keepidle not available on your system')
+        if tcp_keepalive_interval is not None:
+            if hasattr(socket, 'TCP_KEEPINTVL'):
+                sock.setsockopt(socket.IPPROTO_TCP,
+                                socket.TCP_KEEPINTVL,
+                                tcp_keepalive_interval)
+            else:
+                LOG.warning('tcp_keepintvl not available on your system')
+        if tcp_keepalive_count is not None:
+            if hasattr(socket, 'TCP_KEEPCNT'):
+                sock.setsockopt(socket.IPPROTO_TCP,
+                                socket.TCP_KEEPCNT,
+                                tcp_keepalive_count)
+            else:
+                LOG.warning('tcp_keepcnt not available on your system')
