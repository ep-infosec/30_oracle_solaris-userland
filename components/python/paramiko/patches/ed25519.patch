We don't have PyNaCl and other supporting libraries in Solaris. Because of
that, we have to disable Ed25519 for now.

Original introduction pull request:
https://github.com/paramiko/paramiko/pull/972/files

--- paramiko-2.11.0/paramiko/__init__.py
+++ paramiko-2.11.0/paramiko/__init__.py
@@ -51,7 +51,6 @@ from paramiko.server import ServerInterf
 from paramiko.rsakey import RSAKey
 from paramiko.dsskey import DSSKey
 from paramiko.ecdsakey import ECDSAKey
-from paramiko.ed25519key import Ed25519Key
 from paramiko.sftp import SFTPError, BaseSFTP
 from paramiko.sftp_client import SFTP, SFTPClient
 from paramiko.sftp_server import SFTPServer
@@ -111,7 +110,6 @@ __all__ = [
     "CouldNotCanonicalize",
     "DSSKey",
     "ECDSAKey",
-    "Ed25519Key",
     "HostKeys",
     "Message",
     "MissingHostKeyPolicy",
--- paramiko-2.11.0/paramiko/client.py
+++ paramiko-2.11.0/paramiko/client.py
@@ -33,7 +33,6 @@ from paramiko.common import DEBUG
 from paramiko.config import SSH_PORT
 from paramiko.dsskey import DSSKey
 from paramiko.ecdsakey import ECDSAKey
-from paramiko.ed25519key import Ed25519Key
 from paramiko.hostkeys import HostKeys
 from paramiko.py3compat import string_types
 from paramiko.rsakey import RSAKey
@@ -673,7 +672,7 @@ class SSHClient(ClosingContextManager):
 
         if not two_factor:
             for key_filename in key_filenames:
-                for pkey_class in (RSAKey, DSSKey, ECDSAKey, Ed25519Key):
+                for pkey_class in (RSAKey, DSSKey, ECDSAKey):
                     try:
                         key = self._key_from_filepath(
                             key_filename, pkey_class, passphrase
@@ -715,7 +714,6 @@ class SSHClient(ClosingContextManager):
                 (RSAKey, "rsa"),
                 (DSSKey, "dsa"),
                 (ECDSAKey, "ecdsa"),
-                (Ed25519Key, "ed25519"),
             ]:
                 # ~/ssh/ is for windows
                 for directory in [".ssh", "ssh"]:
--- paramiko-2.11.0/paramiko/hostkeys.py
+++ paramiko-2.11.0/paramiko/hostkeys.py
@@ -34,7 +34,6 @@ from paramiko.dsskey import DSSKey
 from paramiko.rsakey import RSAKey
 from paramiko.util import get_logger, constant_time_bytes_eq
 from paramiko.ecdsakey import ECDSAKey
-from paramiko.ed25519key import Ed25519Key
 from paramiko.ssh_exception import SSHException
 
 
@@ -363,8 +362,6 @@ class HostKeyEntry:
                 key = DSSKey(data=decodebytes(key))
             elif keytype in ECDSAKey.supported_key_format_identifiers():
                 key = ECDSAKey(data=decodebytes(key), validate_point=False)
-            elif keytype == "ssh-ed25519":
-                key = Ed25519Key(data=decodebytes(key))
             else:
                 log.info("Unable to handle key of type {}".format(keytype))
                 return None
--- paramiko-2.11.0/paramiko/transport.py
+++ paramiko-2.11.0/paramiko/transport.py
@@ -89,7 +89,6 @@ from paramiko.common import (
 )
 from paramiko.compress import ZlibCompressor, ZlibDecompressor
 from paramiko.dsskey import DSSKey
-from paramiko.ed25519key import Ed25519Key
 from paramiko.kex_curve25519 import KexCurve25519
 from paramiko.kex_gex import KexGex, KexGexSHA256
 from paramiko.kex_group1 import KexGroup1
@@ -172,7 +171,6 @@ class Transport(threading.Thread, Closin
     )
     # ~= HostKeyAlgorithms in OpenSSH land
     _preferred_keys = (
-        "ssh-ed25519",
         "ecdsa-sha2-nistp256",
         "ecdsa-sha2-nistp384",
         "ecdsa-sha2-nistp521",
@@ -287,8 +285,6 @@ class Transport(threading.Thread, Closin
         "ecdsa-sha2-nistp384-cert-v01@openssh.com": ECDSAKey,
         "ecdsa-sha2-nistp521": ECDSAKey,
         "ecdsa-sha2-nistp521-cert-v01@openssh.com": ECDSAKey,
-        "ssh-ed25519": Ed25519Key,
-        "ssh-ed25519-cert-v01@openssh.com": Ed25519Key,
     }
 
     _kex_info = {
--- paramiko-2.11.0/tests/test_client.py
+++ paramiko-2.11.0/tests/test_client.py
@@ -52,7 +52,6 @@ FINGERPRINTS = {
     "ssh-dss": b"\x44\x78\xf0\xb9\xa2\x3c\xc5\x18\x20\x09\xff\x75\x5b\xc1\xd2\x6c",  # noqa
     "ssh-rsa": b"\x60\x73\x38\x44\xcb\x51\x86\x65\x7f\xde\xda\xa2\x2b\x5a\x57\xd5",  # noqa
     "ecdsa-sha2-nistp256": b"\x25\x19\xeb\x55\xe6\xa1\x47\xff\x4f\x38\xd2\x75\x6f\xa5\xd5\x60",  # noqa
-    "ssh-ed25519": b'\xb3\xd5"\xaa\xf9u^\xe8\xcd\x0e\xea\x02\xb9)\xa2\x80',
 }
 
 
@@ -273,10 +272,6 @@ class SSHClientTest(ClientTest):
         self._test_connection(key_filename=_support("test_ecdsa_256.key"))
 
     @requires_sha1_signing
-    def test_client_ed25519(self):
-        self._test_connection(key_filename=_support("test_ed25519.key"))
-
-    @requires_sha1_signing
     def test_multiple_key_files(self):
         """
         verify that SSHClient accepts and tries multiple key files.
@@ -328,7 +323,7 @@ class SSHClientTest(ClientTest):
         # They're similar except for which path is given; the expected auth and
         # server-side behavior is 100% identical.)
         # NOTE: only bothered whipping up one cert per overall class/family.
-        for type_ in ("rsa", "dss", "ecdsa_256", "ed25519"):
+        for type_ in ("rsa", "dss", "ecdsa_256"):
             cert_name = "test_{}.key-cert.pub".format(type_)
             cert_path = _support(os.path.join("cert_support", cert_name))
             self._test_connection(
@@ -344,7 +339,7 @@ class SSHClientTest(ClientTest):
         # about the server-side key object's public blob. Thus, we can prove
         # that a specific cert was found, along with regular authorization
         # succeeding proving that the overall flow works.
-        for type_ in ("rsa", "dss", "ecdsa_256", "ed25519"):
+        for type_ in ("rsa", "dss", "ecdsa_256"):
             key_name = "test_{}.key".format(type_)
             key_path = _support(os.path.join("cert_support", key_name))
             self._test_connection(
--- paramiko-2.11.0/tests/test_pkey.py
+++ paramiko-2.11.0/tests/test_pkey.py
@@ -31,7 +31,6 @@ from paramiko import (
     RSAKey,
     DSSKey,
     ECDSAKey,
-    Ed25519Key,
     Message,
     util,
     SSHException,
@@ -568,55 +567,11 @@ class KeyTest(unittest.TestCase):
         comparable = TEST_KEY_BYTESTR_2 if PY2 else TEST_KEY_BYTESTR_3
         self.assertEqual(str(key), comparable)
 
-    def test_ed25519(self):
-        key1 = Ed25519Key.from_private_key_file(_support("test_ed25519.key"))
-        key2 = Ed25519Key.from_private_key_file(
-            _support("test_ed25519_password.key"), b"abc123"
-        )
-        self.assertNotEqual(key1.asbytes(), key2.asbytes())
-
-    def test_ed25519_funky_padding(self):
-        # Proves #1306 by just not exploding with 'Invalid key'.
-        Ed25519Key.from_private_key_file(
-            _support("test_ed25519-funky-padding.key")
-        )
-
-    def test_ed25519_funky_padding_with_passphrase(self):
-        # Proves #1306 by just not exploding with 'Invalid key'.
-        Ed25519Key.from_private_key_file(
-            _support("test_ed25519-funky-padding_password.key"), b"asdf"
-        )
-
-    def test_ed25519_compare(self):
-        # verify that the private & public keys compare equal
-        key = Ed25519Key.from_private_key_file(_support("test_ed25519.key"))
-        self.assertEqual(key, key)
-        pub = Ed25519Key(data=key.asbytes())
-        self.assertTrue(key.can_sign())
-        self.assertTrue(not pub.can_sign())
-        self.assertEqual(key, pub)
-
-    # No point testing on systems that never exhibited the bug originally
-    @pytest.mark.skipif(
-        not is_low_entropy(), reason="Not a low-entropy system"
-    )
-    def test_ed25519_32bit_collision(self):
-        # Re: 2021.10.19 security report email: two different private keys
-        # which Paramiko compared as equal on low-entropy platforms.
-        original = Ed25519Key.from_private_key_file(
-            _support("badhash_key1.ed25519.key")
-        )
-        generated = Ed25519Key.from_private_key_file(
-            _support("badhash_key2.ed25519.key")
-        )
-        assert original != generated
-
     def keys(self):
         for key_class, filename in [
             (RSAKey, "test_rsa.key"),
             (DSSKey, "test_dss.key"),
             (ECDSAKey, "test_ecdsa_256.key"),
-            (Ed25519Key, "test_ed25519.key"),
         ]:
             key1 = key_class.from_private_key_file(_support(filename))
             key2 = key_class.from_private_key_file(_support(filename))
@@ -638,22 +593,6 @@ class KeyTest(unittest.TestCase):
         for key1, key2 in self.keys():
             assert hash(key1) == hash(key2)
 
-    def test_ed25519_nonbytes_password(self):
-        # https://github.com/paramiko/paramiko/issues/1039
-        Ed25519Key.from_private_key_file(
-            _support("test_ed25519_password.key"),
-            # NOTE: not a bytes. Amusingly, the test above for same key DOES
-            # explicitly cast to bytes...code smell!
-            "abc123",
-        )
-        # No exception -> it's good. Meh.
-
-    def test_ed25519_load_from_file_obj(self):
-        with open(_support("test_ed25519.key")) as pkey_fileobj:
-            key = Ed25519Key.from_private_key(pkey_fileobj)
-        self.assertEqual(key, key)
-        self.assertTrue(key.can_sign())
-
     def test_keyfile_is_actually_encrypted(self):
         # Read an existing encrypted private key
         file_ = _support("test_rsa_password.key")
@@ -697,15 +636,6 @@ class KeyTest(unittest.TestCase):
         # Serial number
         self.assertEqual(msg.get_int64(), 1234)
 
-        # Prevented from loading certificate that doesn't match
-        key_path = _support(os.path.join("cert_support", "test_ed25519.key"))
-        key1 = Ed25519Key.from_private_key_file(key_path)
-        self.assertRaises(
-            ValueError,
-            key1.load_certificate,
-            _support("test_rsa.key-cert.pub"),
-        )
-
     @patch("paramiko.pkey.os")
     def _test_keyfile_race(self, os_, exists):
         # Re: CVE-2022-24302
--- paramiko-2.11.0/setup.py
+++ paramiko-2.11.0/setup.py
@@ -94,7 +94,6 @@ setup(
     install_requires=[
         "bcrypt>=3.1.3",
         "cryptography>=2.5",
-        "pynacl>=1.0.1",
         "six",
     ],
     extras_require=extras_require,
--- paramiko-2.11.0/paramiko.egg-info/requires.txt
+++ paramiko-2.11.0/paramiko.egg-info/requires.txt
@@ -1,6 +1,5 @@
 bcrypt>=3.1.3
 cryptography>=2.5
-pynacl>=1.0.1
 six
 
 [all]
