#
# patch teaches configure.in to use FIPS_CPPFLAGS, FIPS_LDFLAGS,
# so it can build FIPSed mod_tls.so module for us.
#
# patch also fixes broken detection for FIPS support, which
# we got from upstream. The fix has been accepted by
# upstream [1].
#
# I have not sent remaining part yet for reasons as follows:
#    - I'd like to turn detection of FIPS presence to function
#      to avoid copy'n'paste anti-pattern
#    - I'd like to check other proftpd vendors first to see
#      if there is a chance our FIPS part is worth enough
#      to be kept in upstream
#
# https://github.com/proftpd/proftpd/issues/660
#

--- a/configure.in
+++ b/configure.in
@@ -48,6 +48,9 @@ AC_SUBST(BUILD_OPTS)
 AC_SUBST(OSREL)
 AC_SUBST(OSTYPE)
 
+AC_SUBST(FIPS_CPPFLAGS)
+AC_SUBST(FIPS_LDFLAGS)
+
 dnl MacOSX requires -traditional-cpp; autodetecting it isn't impossible
 dnl AFAIK, since assuming the need for -traditional-cpp breaks the build
 dnl on other OSes. -jwm, 30 Jan 2001
@@ -180,6 +183,9 @@ LIB_DEPS="\"\""
 
 AC_ARG_VAR(LIBS, [linker flags, e.g. -l<lib>.{a,so} if you have nonstandard libraries to link])
 
+AC_ARG_VAR(FIPS_CPPFLAGS, [specify C flags required to build mod_tls-fips-140])
+AC_ARG_VAR(FIPS_LDFLAGS, [specify runtime path to openssl FIPS-140])
+
 dnl configure command line options...
 
 dnl --with options.
@@ -4065,7 +4071,56 @@ for module in $ac_shared_modules; do
   src=`echo "$module" | sed -e 's/\.la$//'`.c;
   srcinc=`echo "$module" | sed -e 's/\.la$//'`.h;
 
-  if test -f $srcdir/modules/$src -o -f $srcdir/contrib/$src; then
+  if test "$module" = "mod_tls-fips-140.la" ; then
+    AC_MSG_CHECKING([Checking if mod_tls-fips-140 can be built using default flags])
+    saved_fips_libs="$LIBS"
+    dnl Splice out -lsupp, since that library hasn't been built yet
+    LIBS=`echo "$LIBS" | sed -e 's/-lsupp//g'`;
+    LIBS="$LIBS -lcrypto"
+    have_fips=0;
+    AC_TRY_RUN(
+      [
+        #include <openssl/crypto.h>
+        #include <openssl/fips.h>
+        int main(int argc, char *argv[]) {
+        # ifdef OPENSSL_FIPS
+          return 0;
+        # else
+          return 1;
+        #endif
+        }
+      ],
+      AC_MSG_RESULT(yes); have_fips=1,
+      AC_MSG_RESULT(no),
+      AC_MSG_RESULT(unknown)
+    )
+    if test $have_fips -eq 0 ; then
+      AC_MSG_CHECKING([Checking if mod_tls-fips-140 can be built using FIPS_CPPFLAGS ])
+      saved_fips_cppflags="$CPPFLAGS"
+      CPPFLAGS="$CPPFLAGS $FIPS_CPPFLAGS"
+      AC_TRY_RUN(
+        [
+          #include <openssl/crypto.h>
+          #include <openssl/fips.h>
+          int main(int argc, char *argv[]) {
+          # ifdef OPENSSL_FIPS
+            return 0;
+          # else
+            return 1;
+          #endif
+          }
+        ],
+        AC_MSG_RESULT(yes); have_fips=1,
+        AC_MSG_RESULT(no),
+        AC_MSG_RESULT(unknown)
+      )
+      CPPFLAGS="$saved_fips_cppflags"
+    fi
+    LIBS="$saved_fips_libs"
+    if test $have_fips -eq 0 ; then
+        AC_MSG_ERROR([can't build mod_tls-fips-140, no FIPS-140 openssl found])
+    fi
+  elif test -f $srcdir/modules/$src -o -f $srcdir/contrib/$src; then
     if test ! -e $srcdir/modules/$src; then
       olddir=`pwd`
       cd $srcdir/modules
