#
# Provide optional sftp idle session timeout for ZFSSA only.  
# Not documented for Solaris.
#
# The sftp-server changes are rejected by upstream in favor of a longer-term,
# more-comprehensive idle session timeout that is in development.  So the
# upstream fix, when it is published, will supplant this temporary fix
# as soon as is feasible within the ZFSSA release cycle. The requirement
# is tracked by enhancement bz2718.
#
# The interface to sftp MUST NOT BE CHANGED here without coordinating
# with ZFSSA.
#
--- old/sftp-server.c	2020-11-19 15:04:37.818147639 +0000
+++ new/sftp-server.c	2020-11-19 15:05:13.740161780 +0000
@@ -39,6 +39,7 @@
 #include <time.h>
 #include <unistd.h>
 #include <stdarg.h>
+#include <signal.h>
 
 #include "xmalloc.h"
 #include "sshbuf.h"
@@ -94,6 +95,9 @@ struct Stat {
 	Attrib attrib;
 };
 
+/* sftp idle timeout */
+static volatile sig_atomic_t g_timed_out = 0;
+
 /* Packet handlers */
 static void process_open(u_int32_t id);
 static void process_close(u_int32_t id);
@@ -1920,7 +1924,10 @@ sftp_server_cleanup_exit(int i)
 		    pw->pw_name, client_addr);
 	}
 #ifdef SFTP_AUDIT
-	audit_sftp_session_stop((i != 0) ? ADT_FAIL_VALUE_PROGRAM : 0);
+	if (i == 3)
+	    audit_sftp_session_stop(ADT_FAIL_VALUE_IDLE_TIMEOUT);
+	else
+	    audit_sftp_session_stop((i != 0) ? ADT_FAIL_VALUE_PROGRAM : 0);
 #endif
 	_exit(i);
 }
@@ -1939,11 +1946,18 @@ sftp_server_usage(void)
 	exit(1);
 }
 
+static void
+sftp_alarm_handler(int sig)
+{
+	g_timed_out = 1;
+}
+
 int
 sftp_server_main(int argc, char **argv, struct passwd *user_pw)
 {
 	fd_set *rset, *wset;
 	int i, r, in, out, max, ch, skipargs = 0, log_stderr = 0;
+	int timeout = 0;
 	ssize_t len, olen, set_size;
 	SyslogFacility log_facility = SYSLOG_FACILITY_AUTH;
 	char *cp, *homedir = NULL, uidstr[32], buf[4*4096];
@@ -1958,7 +1972,7 @@ sftp_server_main(int argc, char **argv,
 	pw = pwcopy(user_pw);
 
 	while (!skipargs && (ch = getopt(argc, argv,
-	    "d:f:l:P:p:Q:u:cehR")) != -1) {
+	    "d:f:l:P:p:Q:t:u:cehR")) != -1) {
 		switch (ch) {
 		case 'Q':
 			if (strcasecmp(optarg, "requests") != 0) {
@@ -2020,6 +2034,20 @@ sftp_server_main(int argc, char **argv,
 				fatal("Invalid umask \"%s\"", optarg);
 			(void)umask((mode_t)mask);
 			break;
+		case 't':
+			timeout = atoi(optarg);
+			debug("SFTP: optarg = %s\n", optarg);
+			debug("SFTP: setting timeout to %d\n", timeout);
+			if (timeout < 0) {
+				/*
+				 * -t0 is redundant, but will be used
+				 * by ZFSSA BUI/CLI
+				 */
+				error("Invalid timeout: \"%s\". Ignored.",
+				    optarg);
+				timeout = 0;
+			}
+			break;
 		case 'h':
 		default:
 			sftp_server_usage();
@@ -2091,6 +2119,7 @@ sftp_server_main(int argc, char **argv,
 	}
 
 	set_size = howmany(max + 1, NFDBITS) * sizeof(fd_mask);
+	signal(SIGALRM, sftp_alarm_handler);
 	for (;;) {
 		memset(rset, 0, set_size);
 		memset(wset, 0, set_size);
@@ -2112,13 +2141,23 @@ sftp_server_main(int argc, char **argv,
 		if (olen > 0)
 			FD_SET(out, wset);
 
+		if (timeout > 0)
+			alarm(timeout);
+
 		if (select(max+1, rset, wset, NULL, NULL) == -1) {
+			if (g_timed_out){
+				debug("SFTP idle timeout, closing session.");
+				sftp_server_cleanup_exit(3);
+			}
 			if (errno == EINTR)
 				continue;
 			error("select: %s", strerror(errno));
 			sftp_server_cleanup_exit(2);
 		}
 
+		if (timeout > 0)
+			alarm(0);
+
 		/* copy stdin to iqueue */
 		if (FD_ISSET(in, rset)) {
 			len = read(in, buf, sizeof buf);
