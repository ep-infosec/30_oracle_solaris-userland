From f4938cd15771c830eaa6c865a10cf84b28652713 Mon Sep 17 00:00:00 2001
From: Ludovic Rousseau <ludovic.rousseau@free.fr>
Date: Sat, 28 Sep 2019 13:42:58 +0200
Subject: [PATCH] Fix "Bus Error" on SPARC64 CPU and Solaris C compiler

SPARC64 CPU can't access non-aligned words and generates a Bus Error.
The GCC C compiler detect this situation and uses bytes access instead.
The Solaris C compiler is not smart enough.

The problem is with the PIN_VERIFY_STRUCTURE, PIN_MODIFY_STRUCTURE and
PCSC_TLV_STRUCTURE structures.
These structures use "#pragma pack(1)" to remove any padding so some
fields are NOT aligned.

Thanks to Kenjiro Tsuji fro the bug report and initial patch
https://salsa.debian.org/rousseau/CCID/issues/7#note_111153
"ccid may perform integer access to unaligned address"
---
 src/commands.c   | 31 ++++++++++++-------------
 src/ifdhandler.c | 20 ++++++++++------
 src/utils.c      | 60 ++++++++++++++++++++++++++++++++++++++++++++++++
 src/utils.h      |  6 +++++
 4 files changed, 94 insertions(+), 23 deletions(-)

diff --git a/src/commands.c b/src/commands.c
index 4c58b39..44a612a 100644
--- a/src/commands.c
+++ b/src/commands.c
@@ -59,12 +59,6 @@
 #define offsetof(TYPE, MEMBER) ((size_t) &((TYPE *)0)->MEMBER)
 #endif
 
-#ifndef BSWAP_16
-#define BSWAP_8(x)  ((x) & 0xff)
-#define BSWAP_16(x) ((BSWAP_8(x) << 8) | BSWAP_8((x) >> 8))
-#define BSWAP_32(x) ((BSWAP_16(x) << 16) | BSWAP_16((x) >> 16))
-#endif
-
 #define CHECK_STATUS(res) \
 	if (STATUS_NO_SUCH_DEVICE == res) \
 		return IFD_NO_SUCH_DEVICE; \
@@ -320,6 +314,8 @@ RESPONSECODE SecurePINVerify(unsigned int reader_index,
 	RESPONSECODE ret;
 	status_t res;
 
+	uint32_t ulDataLength;
+
 	pvs = (PIN_VERIFY_STRUCTURE *)TxBuffer;
 	cmd[0] = 0x69;	/* Secure */
 	cmd[5] = ccid_descriptor->bCurrentSlotIndex;	/* slot number */
@@ -337,15 +333,16 @@ RESPONSECODE SecurePINVerify(unsigned int reader_index,
 
 	/* On little endian machines we are all set. */
 	/* If on big endian machine and caller is using host byte order */
-	if ((pvs->ulDataLength + 19  == TxLength) &&
-		(bei2i((unsigned char*)(&pvs->ulDataLength)) == pvs->ulDataLength))
+	ulDataLength = get_U32(&pvs->ulDataLength);
+	if ((ulDataLength + 19 == TxLength) &&
+		(bei2i((unsigned char*)(&pvs->ulDataLength)) == ulDataLength))
 	{
 		DEBUG_INFO1("Reversing order from big to little endian");
 		/* If ulDataLength is big endian, assume others are too */
 		/* reverse the byte order for 3 fields */
-		pvs->wPINMaxExtraDigit = BSWAP_16(pvs->wPINMaxExtraDigit);
-		pvs->wLangId = BSWAP_16(pvs->wLangId);
-		pvs->ulDataLength = BSWAP_32(pvs->ulDataLength);
+		p_bswap_16(&pvs->wPINMaxExtraDigit);
+		p_bswap_16(&pvs->wLangId);
+		p_bswap_32(&pvs->ulDataLength);
 	}
 	/* At this point we now have the above 3 variables in little endian */
 
@@ -653,6 +650,7 @@ RESPONSECODE SecurePINModify(unsigned int reader_index,
 	int bNumberMessage = 0; /* for GemPC Pinpad */
 	int gemalto_modify_pin_bug;
 #endif
+	uint32_t ulDataLength;
 
 	pms = (PIN_MODIFY_STRUCTURE *)TxBuffer;
 	cmd[0] = 0x69;	/* Secure */
@@ -671,15 +669,16 @@ RESPONSECODE SecurePINModify(unsigned int reader_index,
 
 	/* On little endian machines we are all set. */
 	/* If on big endian machine and caller is using host byte order */
-	if ((pms->ulDataLength + 24  == TxLength) &&
-		(bei2i((unsigned char*)(&pms->ulDataLength)) == pms->ulDataLength))
+	ulDataLength = get_U32(&pms->ulDataLength);
+	if ((ulDataLength + 24 == TxLength) &&
+		(bei2i((unsigned char*)(&pms->ulDataLength)) == ulDataLength))
 	{
 		DEBUG_INFO1("Reversing order from big to little endian");
 		/* If ulDataLength is big endian, assume others are too */
 		/* reverse the byte order for 3 fields */
-		pms->wPINMaxExtraDigit = BSWAP_16(pms->wPINMaxExtraDigit);
-		pms->wLangId = BSWAP_16(pms->wLangId);
-		pms->ulDataLength = BSWAP_32(pms->ulDataLength);
+		p_bswap_16(&pms->wPINMaxExtraDigit);
+		p_bswap_16(&pms->wLangId);
+		p_bswap_32(&pms->ulDataLength);
 	}
 	/* At this point we now have the above 3 variables in little endian */
 
diff --git a/src/ifdhandler.c b/src/ifdhandler.c
index 5f9ec41..62443f2 100644
--- a/src/ifdhandler.c
+++ b/src/ifdhandler.c
@@ -1476,7 +1476,8 @@ EXTERNAL RESPONSECODE IFDHControl(DWORD Lun, DWORD dwControlCode,
 		{
 			pcsc_tlv -> tag = FEATURE_VERIFY_PIN_DIRECT;
 			pcsc_tlv -> length = 0x04; /* always 0x04 */
-			pcsc_tlv -> value = htonl(IOCTL_FEATURE_VERIFY_PIN_DIRECT);
+			set_U32(&pcsc_tlv -> value,
+			    htonl(IOCTL_FEATURE_VERIFY_PIN_DIRECT));
 
 			pcsc_tlv++;
 			iBytesReturned += sizeof(PCSC_TLV_STRUCTURE);
@@ -1486,7 +1487,8 @@ EXTERNAL RESPONSECODE IFDHControl(DWORD Lun, DWORD dwControlCode,
 		{
 			pcsc_tlv -> tag = FEATURE_MODIFY_PIN_DIRECT;
 			pcsc_tlv -> length = 0x04; /* always 0x04 */
-			pcsc_tlv -> value = htonl(IOCTL_FEATURE_MODIFY_PIN_DIRECT);
+			set_U32(&pcsc_tlv -> value,
+			    htonl(IOCTL_FEATURE_MODIFY_PIN_DIRECT));
 
 			pcsc_tlv++;
 			iBytesReturned += sizeof(PCSC_TLV_STRUCTURE);
@@ -1497,7 +1499,8 @@ EXTERNAL RESPONSECODE IFDHControl(DWORD Lun, DWORD dwControlCode,
 		{
 			pcsc_tlv -> tag = FEATURE_IFD_PIN_PROPERTIES;
 			pcsc_tlv -> length = 0x04; /* always 0x04 */
-			pcsc_tlv -> value = htonl(IOCTL_FEATURE_IFD_PIN_PROPERTIES);
+			set_U32(&pcsc_tlv -> value,
+			    htonl(IOCTL_FEATURE_IFD_PIN_PROPERTIES));
 
 			pcsc_tlv++;
 			iBytesReturned += sizeof(PCSC_TLV_STRUCTURE);
@@ -1508,7 +1511,8 @@ EXTERNAL RESPONSECODE IFDHControl(DWORD Lun, DWORD dwControlCode,
 		{
 			pcsc_tlv -> tag = FEATURE_MCT_READER_DIRECT;
 			pcsc_tlv -> length = 0x04; /* always 0x04 */
-			pcsc_tlv -> value = htonl(IOCTL_FEATURE_MCT_READER_DIRECT);
+			set_U32(&pcsc_tlv -> value,
+			    htonl(IOCTL_FEATURE_MCT_READER_DIRECT));
 
 			pcsc_tlv++;
 			iBytesReturned += sizeof(PCSC_TLV_STRUCTURE);
@@ -1516,7 +1520,8 @@ EXTERNAL RESPONSECODE IFDHControl(DWORD Lun, DWORD dwControlCode,
 
 		pcsc_tlv -> tag = FEATURE_GET_TLV_PROPERTIES;
 		pcsc_tlv -> length = 0x04; /* always 0x04 */
-		pcsc_tlv -> value = htonl(IOCTL_FEATURE_GET_TLV_PROPERTIES);
+		set_U32(&pcsc_tlv -> value,
+		    htonl(IOCTL_FEATURE_GET_TLV_PROPERTIES));
 		pcsc_tlv++;
 		iBytesReturned += sizeof(PCSC_TLV_STRUCTURE);
 
@@ -1525,7 +1530,8 @@ EXTERNAL RESPONSECODE IFDHControl(DWORD Lun, DWORD dwControlCode,
 		{
 			pcsc_tlv -> tag = FEATURE_CCID_ESC_COMMAND;
 			pcsc_tlv -> length = 0x04; /* always 0x04 */
-			pcsc_tlv -> value = htonl(IOCTL_SMARTCARD_VENDOR_IFD_EXCHANGE);
+			set_U32(&pcsc_tlv -> value,
+			    htonl(IOCTL_SMARTCARD_VENDOR_IFD_EXCHANGE));
 
 			pcsc_tlv++;
 			iBytesReturned += sizeof(PCSC_TLV_STRUCTURE);
@@ -1545,7 +1551,7 @@ EXTERNAL RESPONSECODE IFDHControl(DWORD Lun, DWORD dwControlCode,
 			return IFD_ERROR_INSUFFICIENT_BUFFER;
 
 		/* Only give the LCD size for now */
-		caps -> wLcdLayout = ccid_descriptor -> wLcdLayout;
+		set_U16(&caps -> wLcdLayout, ccid_descriptor -> wLcdLayout);
 
 		/* Hardcoded special reader cases */
 		switch (ccid_descriptor->readerID)
diff --git a/src/utils.c b/src/utils.c
index 60291b7..d8e07ab 100644
--- a/src/utils.c
+++ b/src/utils.c
@@ -17,6 +17,7 @@
 	Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */
 
+#include <string.h>
 #include <pcsclite.h>
 
 #include <config.h>
@@ -79,3 +80,62 @@ void ReleaseReaderIndex(const int index)
 	ReaderIndex[index] = -1;
 } /* ReleaseReaderIndex */
 
+/* Read a non aligned 16-bit integer */
+uint16_t get_U16(void *buf)
+{
+	uint16_t value;
+
+	memcpy(&value, buf, sizeof value);
+
+	return value;
+}
+
+/* Read a non aligned 32-bit integer */
+uint32_t get_U32(void *buf)
+{
+	uint32_t value;
+
+	memcpy(&value, buf, sizeof value);
+
+	return value;
+}
+
+/* Write a non aligned 16-bit integer */
+void set_U16(void *buf, uint16_t value)
+{
+	memcpy(buf, &value, sizeof value);
+}
+
+/* Write a non aligned 32-bit integer */
+void set_U32(void *buf, uint32_t value)
+{
+	memcpy(buf, &value, sizeof value);
+}
+
+/* swap a 16-bits integer in memory */
+/* "AB" -> "BA" */
+void p_bswap_16(void *ptr)
+{
+	uint8_t *array, tmp;
+
+	array = ptr;
+	tmp = array[0];
+	array[0] = array[1];
+	array[1] = tmp;
+}
+
+/* swap a 32-bits integer in memory */
+/* "ABCD" -> "DCBA" */
+void p_bswap_32(void *ptr)
+{
+	uint8_t *array, tmp;
+
+	array = ptr;
+	tmp = array[0];
+	array[0] = array[3];
+	array[3] = tmp;
+
+	tmp = array[1];
+	array[1] = array[2];
+	array[2] = tmp;
+}
diff --git a/src/utils.h b/src/utils.h
index b0a744f..a740610 100644
--- a/src/utils.h
+++ b/src/utils.h
@@ -27,3 +27,9 @@ int GetNewReaderIndex(const int Lun);
 int LunToReaderIndex(int Lun);
 void ReleaseReaderIndex(const int idx);
 
+uint16_t get_U16(void *);
+uint32_t get_U32(void *);
+void set_U16(void *, uint16_t);
+void set_U32(void *, uint32_t);
+void p_bswap_16(void *ptr);
+void p_bswap_32(void *ptr);
-- 
2.20.1

