Patch from sic team.
Will not send upstream.

--- a/nspr/pr/src/pthreads/ptthread.c	2017-07-26 09:44:59.117046039 +0000
+++ b/nspr/pr/src/pthreads/ptthread.c	2017-07-26 09:44:57.761778858 +0000
@@ -1738,6 +1738,19 @@
     PRThread *thread;
     size_t nameLen;
     int result = 0;
+#if defined(DARWIN)
+    int (*dynamic_pthread_setname_np)(const char*);
+#else
+    int (*dynamic_pthread_setname_np)(pthread_t, const char*);
+#endif
+
+#if !defined(OPENBSD) && !defined(FREEBSD) && !defined(DRAGONFLY) && !defined(NETBSD)
+#define SETNAME_LENGTH_CONSTRAINT 15
+#define SETNAME_FRAGMENT1_LENGTH (SETNAME_LENGTH_CONSTRAINT >> 1)
+#define SETNAME_FRAGMENT2_LENGTH \
+    (SETNAME_LENGTH_CONSTRAINT - SETNAME_FRAGMENT1_LENGTH - 1)
+    char name_dup[SETNAME_LENGTH_CONSTRAINT + 1];
+#endif
 
     if (!name) {
         PR_SetError(PR_INVALID_ARGUMENT_ERROR, 0);
@@ -1755,7 +1768,10 @@
         return PR_FAILURE;
     memcpy(thread->name, name, nameLen + 1);
 
-#if defined(OPENBSD) || defined(FREEBSD) || defined(DRAGONFLY)
+#if defined(AIX)
+    /* No pthread function to set thread name. */
+    result = 0;
+#elif defined(OPENBSD) || defined(FREEBSD) || defined(DRAGONFLY)
     pthread_set_name_np(thread->id, name);
 #elif defined(NETBSD)
     result = pthread_setname_np(thread->id, "%s", (void *)name);
@@ -1764,11 +1780,6 @@
      * On OSX, pthread_setname_np is only available in 10.6 or later, so test
      * for it at runtime.  It also may not be available on all linux distros.
      */
-#if defined(DARWIN)
-    int (*dynamic_pthread_setname_np)(const char*);
-#else
-    int (*dynamic_pthread_setname_np)(pthread_t, const char*);
-#endif
 
     *(void**)(&dynamic_pthread_setname_np) =
         dlsym(RTLD_DEFAULT, "pthread_setname_np");
@@ -1781,11 +1792,6 @@
      * accept as an argument to pthread_setname_np.  Otherwise the E2BIG
      * error is returned by the function.
      */
-#define SETNAME_LENGTH_CONSTRAINT 15
-#define SETNAME_FRAGMENT1_LENGTH (SETNAME_LENGTH_CONSTRAINT >> 1)
-#define SETNAME_FRAGMENT2_LENGTH \
-    (SETNAME_LENGTH_CONSTRAINT - SETNAME_FRAGMENT1_LENGTH - 1)
-    char name_dup[SETNAME_LENGTH_CONSTRAINT + 1];
     if (nameLen > SETNAME_LENGTH_CONSTRAINT) {
         memcpy(name_dup, name, SETNAME_FRAGMENT1_LENGTH);
         name_dup[SETNAME_FRAGMENT1_LENGTH] = '~';
