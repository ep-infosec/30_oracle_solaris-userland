Avoid procmail's benchmark-based selection between private strstr and libc
strstr which can change based on "benchmark" performance during build.
Moreover, we have to disable the benchmark to avoid infinite looping
in for loop (another bug reproducible with GCC).

A bug should be filed upstream to suggest that this check be removed or that
some way to override it be provided for reproducible builds.

diff --git a/src/autoconf b/src/autoconf
index ff78048..69f3446 100755
--- a/src/autoconf
+++ b/src/autoconf
@@ -1198,41 +1198,9 @@ unsigned long dobench(strstr,iter,haystack)char*(*const strstr)();
 #endif
 int main(argc,argv)int argc;const char*argv[];
 { if(argc==1)
-   { char*haystack;
-#ifdef BENCHSIZE
-     if(haystack=malloc(BENCHSIZE))
-      { unsigned c1,c2,i;time_t t;
-	unsigned long iter,titer,syscnt;
-	for(i=c1=c2=0;i<BENCHSIZE-1;i++,c1++,c2++)
-	 { haystack[i]='a';
-	   if(c1==37)
-	      c1=0,haystack[i]='\n';
-	   if(c2==51)
-	      c2=0,haystack[i]='\n';
-	 }
-	haystack[i]='\0';
-	for(titer=~(unsigned long)0,t=0,iter=1;t<=1&&iter<<1&&iter<titer;)
-	 { t=time((time_t*)0);
-	   if((syscnt=dobench(strstr,iter<<=1,haystack))&&!~titer)
-	      titer=iter*GRANULARITY;
-	   t=time((time_t*)0)-t;
-	 }
-	iter=dobench(sstrstr,iter,haystack);free(haystack);
-	if(!syscnt)
-	   syscnt=1;
-	if(!iter)
-	   iter=1;
-	printf("\
-/* Your system's strstr() is %.2f times %sER than my C-routine */\n",
-	 syscnt>=iter?(double)syscnt/iter:(double)iter/syscnt,
-	 syscnt>=iter?"SLOW":"FAST");
-	if(syscnt>iter+iter/16)		  /* if at least 1.0625 times slower */
+   {
 	   printf("\
-#define SLOWstrstr\t\t\t      /* using my substitute instead */\n");
-      }
-     else
-	printf("/* Insufficient memory to perform the benchmark! */\n");
-#endif /* SLOWstrstr */
+/* #define SLOWstrstr */\t\t\t      /* NOT using my substitute instead */\n");
 #ifndef NO_COMSAT
 #ifndef AF_INET
 	puts("#define NO_COMSAT");
