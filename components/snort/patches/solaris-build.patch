Changes needed to get snort to successfully build on Solaris.

1/ We need to define our own equivalent (snort_in6_addr) of the in6_addr
   struct from /usr/include/netinet/in.h because on Solaris we do not have
   a s6_addr16 definition. We then have to use snort_in6_addr instead of
   in6_addr in numerous places.
   CR #25300643 has been filed for this Solaris include file omission.

2/ Uses gethrtime() rather than trying to read the %tick register (the
   latter has issues in MP environments)

3/ Remove the need to define lines like "CFLAGS += -Du_int8_t=uint8_t"
   in the snort component Makefile by #include'ing "sf_types.h" in
   snort-2.9.9.0/src/sfutil/sf_ip.h

The gethrtime() changes will be pushed upstream and the other configure.in
change. The others should be fixed by changes to standard Solaris headers.

--- snort-2.9.18/configure.in
+++ snort-2.9.18/configure.in
@@ -957,27 +957,8 @@ else
     AC_MSG_RESULT(no)
 fi
 
-# check for sparc %time register
-if eval "echo $host_cpu|grep -i sparc >/dev/null"; then
-    OLD_CFLAGS="$CFLAGS"
-    CFLAGS="$CFLAGS -mcpu=v9 "
-    AC_MSG_CHECKING([for sparc %time register])
-    AC_RUN_IFELSE(
-    [AC_LANG_PROGRAM(
-    [[]],
-    [[
-        int val;
-        __asm__ __volatile__("rd %%tick, %0" : "=r"(val));
-    ]])],
-    [sparcv9="yes"],
-    [sparcv9="no"])
-    AC_MSG_RESULT($sparcv9)
-    if test "x$sparcv9" = "xyes"; then
-        AC_DEFINE([SPARCV9],[1],[For sparc v9 with %time register])
-    else
-        CFLAGS="$OLD_CFLAGS"
-    fi
-fi
+# Check for the presence of the Solaris gethrtime routine.
+AC_CHECK_FUNCS(gethrtime)
 
 # modified from gnulib/m4/visibility.m4
 AC_DEFUN([CC_VISIBILITY],
--- snort-2.9.18/src/cpuclock.h
+++ snort-2.9.18/src/cpuclock.h
@@ -84,26 +84,15 @@ } while (tbu0 != tbu1); \
     val = ((uint64_t)tbl) | (((uint64_t)tbu0) << 32);  \
 }
 #else
-/* SPARC */
-#ifdef SPARCV9
-#ifdef _LP64
+/* SOLARIS */
+#ifdef HAVE_GETHRTIME
 #define get_clockticks(val) \
 { \
-    __asm__ __volatile__("rd %%tick, %0" : "=r"(val)); \
+    val = gethrtime(); \
 }
 #else
-#define get_clockticks(val) \
-{ \
-    uint32_t a, b; \
-    __asm__ __volatile__("rd %%tick, %0\n" \
-                         "srlx %0, 32, %1" \
-                         : "=r"(a), "=r"(b)); \
-    val = ((uint64_t)a) | (((uint64_t)b) << 32); \
-}
-#endif /* _LP64 */
-#else
 #define get_clockticks(val)
-#endif /* SPARC */
+#endif /* HAVE_GETTHRTIME */
 #endif /* POWERPC || PPC */
 #endif /* IA64 && HPUX */
 #endif /* IA64 && GNUC */
--- snort-2.9.18/src/decode.c
+++ snort-2.9.18/src/decode.c
@@ -3304,7 +3304,7 @@ static void CheckIPV6Multicast(Packet *p
 {
     IP6RawHdr* hdr6 = (IP6RawHdr*)p->iph;
     uint8_t multicast_scope;
-    struct in6_addr* ip_dst;
+    struct snort_in6_addr* ip_dst;
     uint32_t h_ip_dst;
 
     if ( hdr6->ip6_src.s6_addr[0] == IP6_MULTICAST )
--- snort-2.9.18/src/decode.h
+++ snort-2.9.18/src/decode.h
@@ -1141,7 +1141,7 @@ } IP6Hdr;
 
 /* IPv6 address */
 #ifndef s6_addr
-struct in6_addr
+struct snort_in6_addr
 {
     union
     {
@@ -1163,8 +1163,8 @@ uint16_t ip6_payload_len;
     uint8_t  ip6_next;                /* next header */
     uint8_t  ip6_hoplim;               /* hop limit */
 
-    struct in6_addr ip6_src;      /* source address */
-    struct in6_addr ip6_dst;      /* destination address */
+    struct snort_in6_addr ip6_src;      /* source address */
+    struct snort_in6_addr ip6_dst;      /* destination address */
 } IP6RawHdr;
 
 #define ip6flow  ip6_vtf
@@ -1247,7 +1247,7 @@ uint8_t ip6rte0_type;
     uint8_t ip6rte0_seg_left;
     uint8_t ip6rte0_reserved;
     uint8_t ip6rte0_bitmap[3];
-    struct in6_addr ip6rte0_addr[1];  /* Up to 23 IP6 addresses */
+    struct snort_in6_addr ip6rte0_addr[1];  /* Up to 23 IP6 addresses */
 } IP6Route0;
 
 /* Fragment header */
--- snort-2.9.18/src/dynamic-plugins/sf_engine/sf_snort_plugin_api.h
+++ snort-2.9.18/src/dynamic-plugins/sf_engine/sf_snort_plugin_api.h
@@ -41,6 +41,7 @@ #include <winsock2.h>
 #include <windows.h>
 #endif
 
+#include "sf_types.h"
 #include "sf_dynamic_define.h"
 #include "sf_dynamic_engine.h"
 
--- snort-2.9.18/src/dynamic-preprocessors/appid/util/ip_funcs.h
+++ snort-2.9.18/src/dynamic-preprocessors/appid/util/ip_funcs.h
@@ -55,7 +55,7 @@ } RNAIpv6AddrSet;
 
 RNAIpv6AddrSet *ParseIpv6Cidr(char *);
 
-static inline void copyIpv4ToIpv6Network(struct in6_addr *keyIp, const uint32_t ip)
+static inline void copyIpv4ToIpv6Network(struct snort_in6_addr *keyIp, const uint32_t ip)
 {
     keyIp->s6_addr32[0] = keyIp->s6_addr32[1] = 0;
     keyIp->s6_addr16[4] = 0;
--- snort-2.9.18/src/file-process/file_resume_block.c
+++ snort-2.9.18/src/file-process/file_resume_block.c
@@ -56,8 +56,8 @@ static pthread_mutex_t file_cache_mutex
 
 typedef struct _FileHashKey
 {
-    struct in6_addr sip;
-    struct in6_addr dip;
+    struct snort_in6_addr sip;
+    struct snort_in6_addr dip;
     uint32_t file_sig;
 } FileHashKey;
 
--- snort-2.9.18/src/file-process/file_segment_process.h
+++ snort-2.9.18/src/file-process/file_segment_process.h
@@ -60,8 +60,8 @@ } FileSegment;
 
 typedef struct _FileKey
 {
-    struct in6_addr sip;
-    struct in6_addr dip;
+    struct snort_in6_addr sip;
+    struct snort_in6_addr dip;
     uint64_t file_id;
 } FileKey;
 
--- snort-2.9.18/src/pkt_tracer.c
+++ snort-2.9.18/src/pkt_tracer.c
@@ -41,9 +41,9 @@ #define DEBUG_SESSION_ID_SIZE (39+1+5+4+
 typedef struct _DebugSessionConstraints
 {
     uint16_t trace_version;
-    struct in6_addr sip;
+    struct snort_in6_addr sip;
     int sip_flag;
-    struct in6_addr dip;
+    struct snort_in6_addr dip;
     int dip_flag;
     uint16_t sport;
     uint16_t dport;
@@ -266,8 +266,8 @@ (!pkt_tracer_debug_info.dport || pkt_tra
            (!pkt_tracer_debug_info.dip_flag || memcmp(&pkt_tracer_debug_info.dip, src, sizeof(pkt_tracer_debug_info.dip)) == 0))))
     {
         int af;
-        const struct in6_addr* sip = (const struct in6_addr*)src;
-        const struct in6_addr* dip = (const struct in6_addr*)dst;
+        const struct snort_in6_addr* sip = (const struct snort_in6_addr*)src;
+        const struct snort_in6_addr* dip = (const struct snort_in6_addr*)dst;
         unsigned offset;
         char sipstr[INET6_ADDRSTRLEN];
         char dipstr[INET6_ADDRSTRLEN];
--- snort-2.9.18/src/preprocessors/Session/session_expect.c
+++ snort-2.9.18/src/preprocessors/Session/session_expect.c
@@ -94,8 +94,8 @@ } ExpectedSessionDataList;
 
 typedef struct _ExpectHashKey
 {
-    struct in6_addr ip1;
-    struct in6_addr ip2;
+    struct snort_in6_addr ip1;
+    struct snort_in6_addr ip2;
     uint16_t port1;
     uint16_t port2;
     uint32_t protocol;
--- snort-2.9.18/src/preprocessors/Session/stream5_ha.c
+++ snort-2.9.18/src/preprocessors/Session/stream5_ha.c
@@ -128,9 +128,9 @@ } StreamHAStats;
 typedef struct _HADebugSessionConstraints
 {
     int sip_flag;
-    struct in6_addr sip;
+    struct snort_in6_addr sip;
     int dip_flag;
-    struct in6_addr dip;
+    struct snort_in6_addr dip;
     uint16_t sport;
     uint16_t dport;
     uint8_t protocol;
--- snort-2.9.18/src/preprocessors/portscan.c
+++ snort-2.9.18/src/preprocessors/portscan.c
@@ -135,8 +135,8 @@ # define CLEARED &cleared
 typedef struct s_PS_HASH_KEY
 {
     int protocol;
-    struct in6_addr scanner;
-    struct in6_addr scanned;
+    struct snort_in6_addr scanner;
+    struct snort_in6_addr scanned;
     tSfPolicyId      policyId;
 } PS_HASH_KEY;
 
--- snort-2.9.18/src/sfutil/sf_ip.h
+++ snort-2.9.18/src/sfutil/sf_ip.h
@@ -43,6 +43,7 @@ #include <ws2tcpip.h>
 #endif
 
 #include "snort_debug.h" /* for inline definition */
+#include "sf_types.h"
 
 /* define SFIP_ROBUST to check pointers passed into the sfip libs.
  * Robustification should not be enabled if the client code is trustworthy.
@@ -87,9 +88,28 @@ #ifdef _WIN32
 #pragma pack(push,1)
 #endif
 
+/* Workaround the struct in6_addr definition in /usr/include/netinet/in.h
+ * on Solaris not having a s6_addr16 definition.
+ */
+
+#undef s6_addr
+#undef s6_addr16
+#undef s6_addr32
+
+struct snort_in6_addr {
+    union {
+        uint8_t  _S6_u8[16];
+        uint16_t _S6_u16[8];
+        uint32_t _S6_u32[4];
+    } in6_u;
+#define s6_addr    in6_u._S6_u8
+#define s6_addr16  in6_u._S6_u16
+#define s6_addr32  in6_u._S6_u32
+};
+
 struct _sfaddr
 {
-    struct in6_addr ip;
+    struct snort_in6_addr ip;
     uint16_t family;
 #   define ia8  ip.s6_addr
 #   define ia16 ip.s6_addr16
@@ -142,7 +162,7 @@ };
 
 #pragma pack(push,1)
 struct _sfaddr {
-    struct in6_addr ip;
+    struct snort_in6_addr ip;
     uint16_t family;
 #   define ia8  ip.s6_addr
 #   define ia16 ip.s6_addr16
@@ -268,7 +288,7 @@ SFIP_RET sfip_contains(const sfcidr_t *n
 /* Returns 1 if the IP is non-zero. 0 otherwise */
 /* XXX This is a performance critical function, \
  *  need to determine if it's safe to not check these pointers */\
-static inline int sfraw_is_set(const struct in6_addr *addr) {
+static inline int sfraw_is_set(const struct snort_in6_addr *addr) {
 /*    ARG_CHECK1(ip, -1); */
     return (addr->s6_addr32[3] || addr->s6_addr32[0] || addr->s6_addr32[1] || addr->s6_addr16[4] ||
             (addr->s6_addr16[5] && addr->s6_addr16[5] != 0xFFFF)) ? 1 : 0;
@@ -311,8 +331,8 @@ }
 /* Support function for sfip_compare */
 static inline SFIP_RET _ip6_cmp(const sfaddr_t *ip1, const sfaddr_t *ip2) {
     SFIP_RET ret;
-    const struct in6_addr p1 = *(struct in6_addr *)sfaddr_get_ip6_ptr(ip1);
-    const struct in6_addr p2 = *(struct in6_addr *)sfaddr_get_ip6_ptr(ip2);
+    const struct snort_in6_addr p1 = *(struct snort_in6_addr *)sfaddr_get_ip6_ptr(ip1);
+    const struct snort_in6_addr p2 = *(struct snort_in6_addr *)sfaddr_get_ip6_ptr(ip2);
 
     /* XXX
      * Argument are assumed trusted!
@@ -402,8 +422,8 @@ return sfaddr_get_ip4_value(ip1) == sfad
 }
 
 static inline int sfip_fast_lt6(const sfaddr_t *ip1, const sfaddr_t *ip2) {
-    const struct in6_addr p1 = *(struct in6_addr *)sfaddr_get_ip6_ptr(ip1);
-    const struct in6_addr p2 = *(struct in6_addr *)sfaddr_get_ip6_ptr(ip2);
+    const struct snort_in6_addr p1 = *(struct snort_in6_addr *)sfaddr_get_ip6_ptr(ip1);
+    const struct snort_in6_addr p2 = *(struct snort_in6_addr *)sfaddr_get_ip6_ptr(ip2);
 
     if(p1.s6_addr32[0] < p2.s6_addr32[0]) return 1;
     else if(p1.s6_addr32[0] > p2.s6_addr32[0]) return 0;
@@ -421,8 +441,8 @@ return 0;
 }
 
 static inline int sfip_fast_gt6(const sfaddr_t *ip1, const sfaddr_t *ip2) {
-    const struct in6_addr p1 = *(struct in6_addr *)sfaddr_get_ip6_ptr(ip1);
-    const struct in6_addr p2 = *(struct in6_addr *)sfaddr_get_ip6_ptr(ip2);
+    const struct snort_in6_addr p1 = *(struct snort_in6_addr *)sfaddr_get_ip6_ptr(ip1);
+    const struct snort_in6_addr p2 = *(struct snort_in6_addr *)sfaddr_get_ip6_ptr(ip2);
 
     if(p1.s6_addr32[0] > p2.s6_addr32[0]) return 1;
     else if(p1.s6_addr32[0] < p2.s6_addr32[0]) return 0;
@@ -440,8 +460,8 @@ return 0;
 }
 
 static inline int sfip_fast_eq6(const sfaddr_t *ip1, const sfaddr_t *ip2) {
-    const struct in6_addr p1 = *(struct in6_addr *)sfaddr_get_ip6_ptr(ip1);
-    const struct in6_addr p2 = *(struct in6_addr *)sfaddr_get_ip6_ptr(ip2);
+    const struct snort_in6_addr p1 = *(struct snort_in6_addr *)sfaddr_get_ip6_ptr(ip1);
+    const struct snort_in6_addr p2 = *(struct snort_in6_addr *)sfaddr_get_ip6_ptr(ip2);
 
     if(p1.s6_addr32[0] != p2.s6_addr32[0]) return 0;
     if(p1.s6_addr32[1] != p2.s6_addr32[1]) return 0;
@@ -563,7 +583,7 @@ }
     return 0;
 }
 
-static inline void sfaddr_copy_to_raw(struct in6_addr *dst, const sfaddr_t *src)
+static inline void sfaddr_copy_to_raw(struct snort_in6_addr *dst, const sfaddr_t *src)
 {
     dst->s6_addr32[0] = src->ia32[0];
     dst->s6_addr32[1] = src->ia32[1];
--- snort-2.9.18/src/sfutil/sfrf.c
+++ snort-2.9.18/src/sfutil/sfrf.c
@@ -78,7 +78,7 @@ /* Stores either source or destination I
      * whether dos threshold is tracking by source or destination IP address. For tracking
      * by rule, it is cleared out (all 0s).
      */
-    struct in6_addr ip;
+    struct snort_in6_addr ip;
 
 } tSFRFTrackingNodeKey ;
 
--- snort-2.9.18/src/sfutil/sfthd.h
+++ snort-2.9.18/src/sfutil/sfthd.h
@@ -103,7 +103,7 @@ */
 typedef struct{
 
     int thd_id;
-    struct in6_addr ip;
+    struct snort_in6_addr ip;
     tSfPolicyId policyId;
 
 } THD_IP_NODE_KEY ;
@@ -112,7 +112,7 @@ typedef struct{
 
     unsigned gen_id;
     unsigned sig_id;
-    struct in6_addr ip;
+    struct snort_in6_addr ip;
     tSfPolicyId policyId;
 
 } THD_IP_GNODE_KEY ;
--- snort-2.9.18/src/tag.c
+++ snort-2.9.18/src/tag.c
@@ -63,8 +63,8 @@ /**Key used for identifying a session or
  */
 typedef struct _tagSessionKey
 {
-    struct in6_addr sip;  ///source IP address
-    struct in6_addr dip;  ///destination IP address
+    struct snort_in6_addr sip;  ///source IP address
+    struct snort_in6_addr dip;  ///destination IP address
 
     /* ports */
     uint16_t sp; ///source port
@@ -317,7 +317,7 @@ * @param np TagNode ptr
  */
 static inline void SwapTag(TagNode *np)
 {
-    struct in6_addr tip;
+    struct snort_in6_addr tip;
     uint16_t tport;
 
     tip = np->key.sip;
@@ -345,7 +345,7 @@ 0);                         /* recycle n
 
     host_tag_cache_ptr = sfxhash_new(
                 hashTableSize,       /* number of hash buckets */
-                sizeof(struct in6_addr), /* size of the key we're going to use */
+                sizeof(struct snort_in6_addr), /* size of the key we're going to use */
                 0,                   /* size of the storage node */
                 0,                   /* disable memcap*/
                 0,                   /* use auto node recovery */
