Changes implements the Trusted Extension functionality in labeledtops filter
used to emit postscript banner and trailer pages.

--- a/Makefile.am
+++ b/Makefile.am
@@ -596,6 +596,10 @@ pkgfilter_PROGRAMS += \
 	imagetopdf \
 	imagetoraster
 endif
+if HAVE_TSOL
+pkgfilter_PROGRAMS += \
+	labeledtops
+endif
 
 check_PROGRAMS += \
 	test_pdf1 \
@@ -897,6 +901,15 @@ $(CUPS_LIBS) \
 	$(FONTCONFIG_LIBS) \
 	libfontembed.la
 
+labeledtops_SOURCES = \
+	filter/labeledtops.c
+labeledtops_CFLAGS = \
+	$(CUPS_CFLAGS)
+labeledtops_CXXFLAGS = $(labeledtops_CFLAGS)
+labeledtops_LDADD = \
+	$(LABELING_LIBS) \
+	$(CUPS_LIBS)
+
 # =====
 # UTILS
 # =====
--- a/configure.ac
+++ b/configure.ac
@@ -18,6 +18,7 @@ AC_CONFIG_MACRO_DIR([m4])
 m4_include([m4/ac_define_dir.m4])
 m4_include([m4/ax_compare_version.m4])
 m4_include([m4/basic-directories.m4])
+m4_include([m4/labeling.m4])
 AM_INIT_AUTOMAKE([1.11 gnu dist-xz dist-bzip2 subdir-objects])
 AM_SILENT_RULES([yes])
 AC_LANG([C++])
--- /dev/null
+++ b/filter/labeledtops.c
@@ -0,0 +1,446 @@
+#include <config.h>
+#include <cups/cups.h>
+#include <errno.h>
+#include <stdio.h>
+#include <stdarg.h>
+#include <stdlib.h>
+#include <strings.h>
+#include <tsol/label.h>
+#include <unistd.h>
+
+
+#define ME "labeledtops"
+
+#define FAIL(fmt, ...) {\
+	fprintf(stderr, "%s: ", ME);\
+	fprintf(stderr, fmt, ##__VA_ARGS__);\
+	fprintf(stderr, "\n");\
+	return 1;\
+}
+
+#define DEBUG(fmt, ...) {\
+	if (getenv("DEBUG")) {\
+		fprintf(stderr, "%s: ", ME);\
+		fprintf(stderr, fmt, ##__VA_ARGS__);\
+		fprintf(stderr, "\n");\
+	}\
+}
+
+
+struct data_t {
+	char *banner;
+	char *Job_Printer;
+	char *Job_Host;
+	char *Job_User;
+	char *Job_JobID;
+	char *Job_Title;
+	char *Job_DoPageLabels;
+	char *Job_Date;
+	char *Job_Hash;
+	char *Job_Classification;
+	char *Job_Protect;
+	char *Job_Caveats;
+	char *Job_Channels;
+	char *Job_SL_Internal;
+};
+
+struct template_t {
+	char *template;
+	char *templateBanner;
+	char *templateTrailer;
+};
+
+
+/*
+ * Misc
+ */
+
+int process_file(char *file, int (*parse_line)(char *, int, va_list args), ...) {
+	va_list args;
+	FILE	*fp;
+
+
+	DEBUG("Going to process file \"%s\".", file);
+
+	if (!strcmp(file, "-"))
+		fp = stdin;
+	else
+		if (!(fp = fopen(file, "r")))
+			FAIL("Cannot open file \"%s\".", file);
+
+	char *line = NULL;
+	size_t linecap = 0, linenum = 0;
+	ssize_t linelen;
+	va_start(args, parse_line);
+
+	while ((linelen = getline(&line, &linecap, fp)) > 0) {
+		if (linelen && line[linelen - 1] == '\n')
+			line[linelen - 1] = 0;
+
+		DEBUG("%ld: %s", linenum, line);
+
+		if (parse_line(line, linenum++, args)) {
+			va_end(args);
+			return 1;
+		}
+	}
+	free(line);
+
+	va_end(args);
+
+	fclose(fp);
+
+	return 0;
+}
+
+/*
+ * Banner file
+ */
+
+void free_template(struct template_t *template) {
+	if (template->template) free(template->template);
+	if (template->templateBanner) free(template->templateBanner);
+	if (template->templateTrailer) free(template->templateTrailer);
+}
+
+#define BANNER_TYPE	"#LABELED-BANNER"
+#define BANNER_TEMPLATE	"Template"
+#define BANNER_HEADER	"TemplateBanner"
+#define BANNER_TRAILER	"TemplateTrailer"
+int parse_line_banner(char *line, int linenum, va_list args) {
+	static struct template_t *template = NULL;
+
+	// header check
+	if (linenum == 0 && strcmp(line, BANNER_TYPE))
+		FAIL("Files has wrong type.")
+	// ignore comments
+	else if (line[0] == '#')
+		return 0;
+	// parse known keyword(s)
+	else {
+		int err = 0;
+		char *key = strsep(&line, " 	");
+		char *value = strsep(&line, " 	");
+
+		if (!template)
+			template = va_arg(args, struct template_t *);
+
+		if (!strcmp(key, BANNER_TEMPLATE)) {
+			if (!(template->template = strdup(value)))
+				err = 1;
+		} else if (!strcmp(key, BANNER_HEADER)) {
+			if (!(template->templateBanner = strdup(value)))
+				err = 1;
+		} else if (!strcmp(key, BANNER_TRAILER)) {
+			if (!(template->templateTrailer = strdup(value)))
+				err = 1;
+		} else {
+			free_template(template);
+			FAIL("Invalid keyword '%s'.", key);
+		}
+
+		if (err) {
+			free_template(template);
+			FAIL("strdup failed: %s.", strerror(errno));
+		}
+	}
+
+	return 0;
+}
+
+int copy_to_stdout(char *line, int lineno, va_list args) {
+	if (puts(line) == EOF)
+		FAIL("puts failed: %s.", strerror(errno));
+
+	return 0;
+}
+
+/*
+ * Data
+ */
+
+void free_data(struct data_t *data) {
+	if (data->Job_Printer) free(data->Job_Printer);
+	if (data->Job_Host) free(data->Job_Host);
+	if (data->Job_User) free(data->Job_User);
+	if (data->Job_JobID) free(data->Job_JobID);
+	if (data->Job_Title) free(data->Job_Title);
+	if (data->Job_DoPageLabels) free(data->Job_DoPageLabels);
+	if (data->Job_Date) free(data->Job_Date);
+	if (data->Job_Hash) free(data->Job_Hash);
+	if (data->Job_Classification) free(data->Job_Classification);
+	if (data->Job_Protect) free(data->Job_Protect);
+	if (data->Job_Caveats) free(data->Job_Caveats);
+	if (data->Job_Channels) free(data->Job_Channels);
+	if (data->Job_SL_Internal) free(data->Job_SL_Internal);
+}
+
+#define GD_CLEANUP\
+	if (file_label)\
+		m_label_free(file_label);\
+	if (options)\
+		cupsFreeOptions(noptions, options);\
+	if (host)\
+		free(host);\
+	if (date)\
+		free(date);\
+	if (hash)\
+		free(hash)
+#define GD_DUP(var, str)\
+	{\
+		char *gd_dup_tmp = str;\
+		if (gd_dup_tmp && !(var = strdup(gd_dup_tmp))) {\
+			GD_CLEANUP;\
+			FAIL("strdup failed: %s.", strerror(errno));\
+		}\
+	}
+#define GD_ASPRINTF(var, fmt, ...)\
+	if (asprintf(&(var), fmt, __VA_ARGS__) == -1) {\
+		GD_CLEANUP;\
+		FAIL("asprintf failed: %s.", strerror(errno));\
+	}
+#define GD_LABEL_TO_STR(var, name, names)\
+	if (label_to_str(file_label, &(var), name, names) != 0) {\
+		GD_CLEANUP;\
+		FAIL("label_to_str " #name " failed: %s.", strerror(errno));\
+	}
+#define GD_TRUSTED_FAIL(fmt, ...)\
+	{\
+		GD_CLEANUP;\
+		FAIL(fmt, __VA_ARGS__);\
+	}
+int get_data(struct data_t *data, char **argv, char *input, int *banner) {
+
+	int noptions;
+	cups_option_t *options = NULL;
+	char *host = NULL;
+	char *date = NULL;
+	char *hash = NULL;
+	static m_label_t *file_label = NULL;
+	const char *tmp;
+
+	/*
+	 * Gather information for data filling
+	 */
+
+	noptions = cupsParseOptions(argv[5], 0, &options);
+	
+	// fill banner, default is to print banner
+	if (cupsGetOption("trailer", noptions, options))
+		*banner = 0;
+	else
+		*banner = 1;
+
+	// host
+	tmp = cupsGetOption("job-originating-host-name", noptions, options);
+	GD_DUP(host, (char *) tmp);
+	if (tmp && !strcmp(tmp, "localhost")) {
+		char *sa = getenv("SERVER_ADMIN");
+		if (sa) {
+			size_t chars;
+		       	if ((chars = strcspn(sa, "@!"))) {
+				free(host);
+				GD_DUP(host, ((char *) sa) + chars + 1);
+			}
+		}
+	} 
+
+	// time
+	tmp = cupsGetOption("time-at-creation", noptions, options);
+	if (tmp) {
+		time_t c_time = atol(tmp);
+		GD_DUP(date, ctime(&c_time));
+		date[strlen(date) - 1] = 0;
+		GD_ASPRINTF(hash, "%ld", c_time % 100000L);
+	}
+
+	// trusted
+	if (!(file_label = m_label_alloc(MAC_LABEL)))
+		GD_TRUSTED_FAIL("m_label_alloc failed: %s.", strerror(errno));
+
+	if ((tmp = getenv("CLASSIFICATION"))) {
+		int err;
+		m_label_free(file_label);
+		file_label = NULL;
+		if (str_to_label(tmp, &file_label, MAC_LABEL,
+			L_NO_CORRECTION, &err) == -1)
+			GD_TRUSTED_FAIL("str_to_label failed: %s.", strerror (errno));
+	} else if (strcmp(input, "-") && fgetlabel(STDIN_FILENO, file_label) != 0)
+		GD_TRUSTED_FAIL("fgetlabel failed on stdin: %s.", strerror(errno))
+	else if (getlabel(input, file_label) != 0)
+		GD_TRUSTED_FAIL("getlabel failed on '%s': %s.", input, strerror(errno));
+
+	/*
+	 * Fill data
+	 */
+
+	GD_DUP(data->Job_Printer, argv[0]);
+	GD_DUP(data->Job_User, argv[2]);
+	GD_DUP(data->Job_Title, argv[3]);
+	GD_ASPRINTF(data->Job_JobID, "%s-%s", argv[0], argv[1]);
+	GD_DUP(data->Job_DoPageLabels, "NO");
+	GD_DUP(data->Job_Host, host);
+	GD_DUP(data->Job_Date, date);
+	GD_DUP(data->Job_Hash, hash);
+	GD_LABEL_TO_STR(data->Job_Classification, PRINTER_TOP_BOTTOM, DEF_NAMES);
+	GD_LABEL_TO_STR(data->Job_Protect, PRINTER_LABEL, DEF_NAMES);
+	GD_LABEL_TO_STR(data->Job_Caveats, PRINTER_CAVEATS, DEF_NAMES);
+	GD_LABEL_TO_STR(data->Job_Channels, PRINTER_CHANNELS, DEF_NAMES);
+	GD_LABEL_TO_STR(data->Job_SL_Internal, M_LABEL, LONG_NAMES);
+
+	GD_CLEANUP;
+
+	return 0;
+}
+
+
+/*
+ * Emit
+ */
+
+char * template_path(const char *name) {
+	char *datadir, *result;
+
+	if (!name)
+		return NULL;
+
+	if (name[0] == '/')
+		return strdup(name);
+
+	if ((datadir = getenv("CUPS_DATADIR")) == NULL) {
+		result = malloc(strlen(BANNERTOPDF_DATADIR) + strlen(name) + 2);
+		sprintf(result, "%s/%s", BANNERTOPDF_DATADIR, name);
+	} else {
+		result = malloc(strlen(datadir) + strlen(name) + 7);
+		sprintf(result, "%s/data/%s", datadir, name);
+	}
+
+	return result;
+}
+
+int emit_dict(struct data_t *data){
+	DEBUG("Going to emit dictionary.");
+
+	char dict[] =
+		"%%!PS-Adobe-3.0\n"
+		"%%%%\n"
+		"%%%% Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.\n"
+		"%%%%\n"
+		"%%%%Pages: 1\n"
+		"%%%%EndComments\n"
+		"%%%%BeginProlog\n"
+		"%%%% Create JobDict if it doesn't exist\n"
+		"userdict /JobDict known not {\n"
+		"  userdict /JobDict 100 dict put\n"
+		"} if\n"
+		"\n"
+		"%%%% Define job parameters, including TSOL security info\n"
+		"JobDict\n"
+		"begin\n"
+		"  /Job_Printer		(%1$s) def\n"
+		"  /Job_Host		(%2$s) def\n"
+		"  /Job_User		(%3$s) def\n"
+		"  /Job_JobID		(%4$s) def\n"
+		"  /Job_Title		(%5$s) def\n"
+		"  /Job_DoPageLabels	(%6$s) def\n"
+		"  /Job_Date		(%7$s) def\n"
+		"  /Job_Hash		(%8$s) def\n"
+		"  /Job_Classification	(%9$s) def\n"
+		"  /Job_Protect		(%10$s) def\n"
+		"  /Job_Caveats		(%11$s) def\n"
+		"  /Job_Channels	(%12$s) def\n"
+		"  /Job_SL_Internal	(%13$s) def\n"
+		"end\n"
+		"\n"
+		"%%%%EndProlog\n"
+		"%%%%Page: 1 1\n";
+
+	if (printf(dict,
+		data->Job_Printer,
+		data->Job_Host,
+		data->Job_User,
+		data->Job_JobID,
+		data->Job_Title,
+		data->Job_DoPageLabels,
+		data->Job_Date,
+		data->Job_Hash,
+		data->Job_Classification,
+		data->Job_Protect,
+		data->Job_Caveats,
+		data->Job_Channels,
+		data->Job_SL_Internal) < 0)
+		FAIL("printf failed: %s.", strerror(errno));
+
+	return 0;
+}
+
+int emit_template(struct template_t *template) {
+	char *path = template_path(template->template);
+
+	if (!path)
+		FAIL("Template file was not specified in the banner file.");
+
+	return process_file(path, copy_to_stdout);
+}
+
+int emit_banner_or_trailer(struct template_t *template, int banner) {
+	char *path = template_path(banner?
+		template->templateBanner: template->templateTrailer);
+
+	if (!path)
+		return 0;
+
+	return process_file(path, copy_to_stdout);
+}
+
+int main(int argc, char **argv) {
+	char		*input;
+	int		err = 0;
+	struct		data_t *data = NULL;
+	struct		template_t *template = NULL;
+	int		banner;
+
+	if (argc < 6)
+		FAIL("Usage: %s job-id user job-title nr-copies options [file]\n", argv[0]);
+
+	input = argc == 7? argv[6]: "-";
+
+	if (!is_system_labeled())
+		FAIL("System is not labeled.");
+
+	if (!(data = calloc(1, sizeof(struct data_t))))
+		FAIL("calloc failed: %s.", strerror(errno));
+	if (!(template = calloc(1, sizeof(struct data_t)))) {
+		free(data);
+		FAIL("calloc failed: %s.", strerror(errno));
+	}
+
+	if (get_data(data, argv, input, &banner))
+		err = 1;
+	if (!err && process_file(input, parse_line_banner, template))
+		err = 1;
+
+	if (template) {
+		DEBUG("Template: \"%s\".", template->template);
+		DEBUG("Template banner: \"%s\".", template->templateBanner);
+		DEBUG("Template trailer: \"%s\".", template->templateTrailer);
+	}
+
+	if (!err && emit_dict(data))
+		err = 1;
+	if (!err && emit_template(template))
+		err = 1;
+	if (!err && emit_banner_or_trailer(template, banner))
+		err = 1;
+
+	if (data) {
+		free_data(data);
+		free(data);
+	}
+	if (template) {
+		free_template(template);
+		free(template);
+	}
+
+	return err;
+}
--- /dev/null
+++ b/m4/labeling.m4
@@ -0,0 +1,8 @@
+AC_ARG_ENABLE(labeling, [   --enable-labeling      enable support for Solaris Trusted Extensions, default=auto])
+
+if test x"$enable_labeling" != xno; then
+	AC_CHECK_LIB(tsol, str_to_label, [LABELING_LIBS="-lbsm -ltsol" AC_SUBST(LABELING_LIBS)
+		AC_CHECK_HEADER(tsol/label.h)
+		AC_DEFINE(HAVE_TSOL, 1, [Define if Trusted Solaris is enabled.])])
+fi
+AM_CONDITIONAL([HAVE_TSOL], [test "x$enable_labeling" != "xno"])
--- a/mime/cupsfilters.convs.in
+++ b/mime/cupsfilters.convs.in
@@ -68,6 +68,7 @@ image/x-xpixmap		application/vnd.cups-pd
 image/x-xwindowdump	application/vnd.cups-pdf		65	imagetopdf
 image/x-sun-raster	application/vnd.cups-pdf		65	imagetopdf
 application/vnd.cups-pdf-banner	application/pdf			32	bannertopdf
+application/vnd.cups-labeled-banner application/postscript	32	labeledtops
 image/urf		application/pdf				0	@APPLE_RASTER_FILTER@
 @QPDF_NO_PCLM@application/vnd.cups-raster application/PCLm			32	rastertopclm
 
--- a/mime/cupsfilters.types
+++ b/mime/cupsfilters.types
@@ -101,5 +101,6 @@ #
 
 application/vnd.cups-pdf
 application/vnd.cups-pdf-banner     string(0,'#PDF-BANNER')
+application/vnd.cups-labeled-banner     string(0,'#LABELED-BANNER')
 application/PCLm
 
