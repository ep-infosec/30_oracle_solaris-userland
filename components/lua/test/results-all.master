
	Starting Tests
random seeds:
current path:
****/usr/share/lua/#.#/?.lua;/usr/share/lua/#.#/?/init.lua;/usr/lib/lua/#.#/?.lua;/usr/lib/lua/#.#/?/init.lua;./?.lua;./?/init.lua****


time:

***** FILE 'main.lua'*****

***** FILE 'gc.lua'*****
testing incremental garbage collection
creating many objects
functions with errors
long strings
steps
steps (#)
clearing tables
weak tables
+
self-referenced threads
OK

time:

***** FILE 'db.lua'*****
testing debug library and debug information
+
testing inspection of parameters/returned values
+
+
testing traceback sizes
testing debug functions on chunk without debug info
OK

time:

***** FILE 'calls.lua'*****
testing functions and calls
+
+
testing tail calls
+
+
testing binary chunks
OK
testing strings and string library
testing 'format %a %A'
OK
testing scanner
+
+
+
+
+
OK

time:

***** FILE 'tpack.lua'*****
testing pack/unpack
platform:
	short #, int #, long #, size_t #, float #, double #,
	lua Integer #, lua Number #
	alignment: #
testing invalid formats
testing pack/unpack of floating-point numbers
testing pack/unpack of strings
testing alignment
OK

time:

***** FILE 'attrib.lua'*****
testing require
package config: /|;|?|!|-|
testing 'require' message
+
testing assignments, logical operators, and constructors
+
OK

time:

***** FILE 'gengc.lua'*****
testing generational garbage collection
+
OK

time:

***** FILE 'locals.lua'*****
testing local variables and environments
+
testing to-be-closed variables
testing errors in __close
to-be-closed variables in coroutines
OK

time:

***** FILE 'constructs.lua'*****
testing syntax
+
testing short-circuit optimizations (#)
+
OK

time:

***** FILE 'code.lua'*****

time:

***** FILE 'cstack.lua'*****
testing stack overflow detection
testing stack overflow in message handling
final count: 	######
testing recursion inside pattern matching
testing stack-overflow in recursive 'gsub'
final count: 	###
testing stack-overflow in recursive 'gsub' with metatables
final count: 	##
testing limits in coroutines inside deep calls
final count: 	###
nesting of resuming yielded coroutines
final count: 	###
nesting coroutines running after recoverable errors
final count: 	###
OK

time:

***** FILE 'nextvar.lua'*****
testing tables, next, and for
+
+
+
testing next x GC of deleted keys
+
testing floats in numeric for
OK

time:

***** FILE 'pm.lua'*****
testing pattern matching
+
+
+
+
OK

time:

***** FILE 'utf#.lua'*****
testing UTF-# library
ok

time:

***** FILE 'api.lua'*****

time:

***** FILE 'events.lua'*****
testing metatables
+
+
OK

time:

***** FILE 'vararg.lua'*****
testing vararg
+
+
+
OK

time:

***** FILE 'closure.lua'*****
testing closures
+
OK

time:

***** FILE 'coroutine.lua'*****
testing coroutines
to-be-closed variables in coroutines
testing 'coroutine.close'
+
testing yields inside metamethods
+
testing yields inside 'for' iterators
OK

time:

***** FILE 'goto.lua'*****
OK

time:

***** FILE 'errors.lua'*****
testing errors
+
testing tokens in error messages
+
OK

time:

***** FILE 'math.lua'*****
testing numbers and math lib
##-bit integers, ##-bit (mantissa) floats
testing order (floats cannot represent all integers)
testing -# and NaN
testing 'math.random'
random seeds:
float random range in ##### calls:
integer random range in ##### calls:
OK

time:

***** FILE 'sort.lua'*****
testing (parts of) table library
testing unpack
testing pack
testing sort
sorting #### random elements in ### msec.
re-sorting #### sorted elements in ### msec.
Invert-sorting other #### elements in ### msec., with ##### comparisons
sorting #### equal elements in ### msec.
OK

time:

***** FILE 'bitwise.lua'*****
testing bitwise operations
+
testing bitwise library
+
+
OK

time:

***** FILE 'verybig.lua'*****
testing RK

time:

***** FILE 'files.lua'*****
testing i/o
+
+
+
+
+
+
testing date/time
test done on
Lua #.#
(there should be two warnings now)
Lua warning: #This is an expected warning
Lua warning: #This is another one
##-bit integers, ##-bit floats
cleaning all!!!!



total time:

final OK !!!
>>> closing state <<<

