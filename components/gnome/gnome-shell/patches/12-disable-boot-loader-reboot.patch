Revert c2b70101f2004307f663908258eef378fb1371d4 so that we can start
the desktop successfully.

With this, gnome-shell fails to start with:
(gnome-shell:1393): Gjs-CRITICAL **: 20:36:30.699: JS ERROR: TypeError: this._loginManager.canRebootToBootLoaderMenu is not a function

From c2b70101f2004307f663908258eef378fb1371d4 Mon Sep 17 00:00:00 2001
From: Hans de Goede <hdegoede@redhat.com>
Date: Wed, 15 Aug 2018 15:03:56 +0200
Subject: [PATCH] endSessionDialog: Support rebooting into the bootloader menu
 aka ("Boot Options")

This implements the "Alt" behavior for the "Reboot" button as outlined in
the design here: https://wiki.gnome.org/Design/OS/BootOptions

Note I've tried implemeting this with the AltSwitcher class from
js/ui/status/system.js first, but that puts the button in a St.Bin()
which causes the button to think it is the only button on the dialog
and makes it have rounded corners on both of its bottom corners.

--- a/js/ui/endSessionDialog.js	2021-02-15 20:58:41.692841035 -0800
+++ b/js/ui/endSessionDialog.js	2021-02-15 21:03:36.520911105 -0800
@@ -230,10 +230,6 @@
                       destroyOnClose: false });
 
         this._loginManager = LoginManager.getLoginManager();
-        this._loginManager.canRebootToBootLoaderMenu(
-            (canRebootToBootLoaderMenu, unusedNeedsAuth) => {
-                this._canRebootToBootLoaderMenu = canRebootToBootLoaderMenu;
-            });
 
         this._userManager = AccountsService.UserManager.get_default();
         this._user = this._userManager.get_user(GLib.get_user_name());
@@ -261,9 +257,6 @@
         this._totalSecondsToStayOpen = 0;
         this._applications = [];
         this._sessions = [];
-        this._capturedEventId = 0;
-        this._rebootButton = null;
-        this._rebootButtonAlt = null;
 
         this.connect('destroy',
                      this._onDestroy.bind(this));
@@ -411,26 +404,6 @@
         this._sessionSection.visible = hasSessions;
     }
 
-    _onCapturedEvent(actor, event) {
-        let altEnabled = false;
-
-        let type = event.type();
-        if (type !== Clutter.EventType.KEY_PRESS && type !== Clutter.EventType.KEY_RELEASE)
-            return Clutter.EVENT_PROPAGATE;
-
-        let key = event.get_key_symbol();
-        if (key !== Clutter.KEY_Alt_L && key !== Clutter.KEY_Alt_R)
-            return Clutter.EVENT_PROPAGATE;
-
-        if (type === Clutter.EventType.KEY_PRESS)
-            altEnabled = true;
-
-        this._rebootButton.visible = !altEnabled;
-        this._rebootButtonAlt.visible = altEnabled;
-
-        return Clutter.EVENT_PROPAGATE;
-    }
-
     _updateButtons() {
         this.clearButtons();
 
@@ -453,35 +426,9 @@
                 label,
             });
 
-            // Add Alt "Boot Options" option to the Reboot button
-            if (this._canRebootToBootLoaderMenu && signal === 'ConfirmedReboot') {
-                this._rebootButton = button;
-                this._rebootButtonAlt = this.addButton({
-                    action: () => {
-                        this.close(true);
-                        let signalId = this.connect('closed', () => {
-                            this.disconnect(signalId);
-                            this._confirmRebootToBootLoaderMenu();
-                        });
-                    },
-                    label: C_('button', 'Boot Options'),
-                });
-                this._rebootButtonAlt.visible = false;
-                this._capturedEventId = global.stage.connect('captured-event',
-                    this._onCapturedEvent.bind(this));
-            }
         }
     }
 
-    _stopAltCapture() {
-        if (this._capturedEventId > 0) {
-            global.stage.disconnect(this._capturedEventId);
-            this._capturedEventId = 0;
-        }
-        this._rebootButton = null;
-        this._rebootButtonAlt = null;
-    }
-
     close(skipSignal) {
         super.close();
 
@@ -491,21 +438,14 @@
 
     cancel() {
         this._stopTimer();
-        this._stopAltCapture();
         this._dbusImpl.emit_signal('Canceled', null);
         this.close();
     }
 
-    _confirmRebootToBootLoaderMenu() {
-        this._loginManager.setRebootToBootLoaderMenu();
-        this._confirm('ConfirmedReboot');
-    }
-
     _confirm(signal) {
         let callback = () => {
             this._fadeOutDialog();
             this._stopTimer();
-            this._stopAltCapture();
             this._dbusImpl.emit_signal(signal, null);
         };
 
