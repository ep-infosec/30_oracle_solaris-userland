.TH SIGSEGV 3 "17 June 2021" "Solaris 11.4"
.SH NAME
sigsegv  \-  Handling page faults in user mode
.sp
.SH SYNOPSIS
.sp
#include <\fBsigsegv.h\fR>
.sp
.SH DESCRIPTION
.sp
.LP
Sigsegv is a set of functions for handling page faults in user mode. A page fault occurs when a program tries to access to a region of memory that is currently not available. Catching and handling a page fault is a useful technique for implementing:
.RS +4
.TP
.ie t \(bu
.el o
pageable virtual memory
.RE
.RS +4
.TP
.ie t \(bu
.el o
memory-mapped access to persistent databases
.RE
.RS +4
.TP
.ie t \(bu
.el o
generational garbage collectors
.RE
.RS +4
.TP
.ie t \(bu
.el o
stack overflow handlers
.RE
.RS +4
.TP
.ie t \(bu
.el o
distributed shared memory
.RE
.RS +4
.TP
.ie t \(bu
.el o
\[char46]..
.RE
.sp
.LP  
The sigsegv functions are summarized in this section in the following groups:
.sp
.RS +4
.TP
.ie t \(bu
.el o  
Global SIGSEGV handlers
.RE
.RS +4
.TP
.ie t \(bu
.el o
Local SIGSEGV handlers (a handler per memory area)
.RE
.RS +4
.TP
.ie t \(bu
.el o
Stack overflow handlers
.RE
.sp
.LP
The <sigsegv.h> header defines the following symbols:
.sp
.RS +4
.TP
.ie t \(bu
.el o
HAVE_SIGSEGV_RECOVERY
.RE
.RS +4
.TP
.ie t \(bu
.el o
HAVE_STACK_OVERFLOW_RECOVERY
.RE
.RS +4
.TP
.ie t \(bu
.el o
LIBSIGSEGV_VERSION
.RE
.RS +4
.TP
.ie t \(bu
.el o
SIGSEGV_FAULT_ADDRESS_ALIGNMENT
.RE
.sp
.LP
The types listed below are defined as described in <sigsegv.h>:
.RS +4
.TP
.ie t \(bu
.el o
sigsegv_handler_t
.RE
.RS +4
.TP
.ie t \(bu
.el o
sigsegv_area_handler_t
.RE
.RS +4
.TP
.ie t \(bu
.el o
stackoverflow_handler_t
.RE
.RS +4
.TP
.ie t \(bu
.el o
stackoverflow_context_t
.RE
.sp
.SH GLOBAL SIGSEGV HANDLERS
.sp
int \fBsigsegv_install_handler\fR (sigsegv_handler_t handler);
.sp
void \fBsigsegv_deinstall_handler\fR (void);
.sp
.SH LOCAL SIGSEGV HANDLERS
.sp
void \fBsigsegv_init\fR (sigsegv_dispatcher* dispatcher);
.sp
void* \fBsigsegv_register\fR (sigsegv_dispatcher* dispatcher,
.RS +24
void* address, size_t len, 
sigsegv_area_handler_t handler,
void* handler_arg);
.RE
.sp
void \fBsigsegv_unregister\fR (sigsegv_dispatcher* dispatcher, 
.RS +25
void* ticket);
.RE
.sp
int \fBsigsegv_dispatch\fR (sigsegv_dispatcher* dispatcher, 
.RS +22
void* fault_address);
.RE
.sp
.SH STACK OVERFLOW HANDLERS
.sp
int \fBstackoverflow_install_handler\fR (stackoverflow_handler_t
.RS +27
handler, void* extra_stack,
size_t extra_stack_size);
.RE
.sp
void \fBstackoverflow_deinstall_handler\fR (void);
.sp
.SH COPYRIGHT
Copyright 1998-1999, 2002-2012, 2016-2021  Bruno Haible <bruno@clisp.org>
.br
Copyright 2002-2005, 2009  Paolo Bonzini <bonzini@gnu.org>
.br
Copyright 2008-2010  Eric Blake <ebb9@byu.net>
.br
Copyright 2002-2021  Free Software Foundation, Inc.


GNU libsigsegv library and manual pages are licensed under GNU GPL version 2
or later <https://gnu.org/licenses/gpl\-2.0.html>. This is free software:
you are free to change and redistribute it. There is NO WARRANTY, to the
extent permitted by law.
.SH SEE ALSO
.sp
.LP
\fBattributes\fR(7), \fBsigsegv\fR(3), \fBstandards\fR(7), \fBsigsegv_install_handler\fR(3), \fBsigsegv_deinstall_handler\fR(3), \fBsigsegv_init\fR(3), \fBsigsegv_register\fR(3), \fBsigsegv_unregister\fR(3), \fBsigsegv_dispatch\fR(3), \fBstackoverflow_install_handler\fR(3), \fBstackoverflow_deinstall_handler\fR(3)
