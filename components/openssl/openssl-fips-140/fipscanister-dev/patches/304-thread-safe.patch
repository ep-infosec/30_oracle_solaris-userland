#
# This was developed in house to fix the multi-thread issue.
# Not suitable for upstream.
#
--- a/crypto/thr_id.c	2017-11-09 09:04:18.035059845 -0800
+++ b/crypto/thr_id.c	2017-11-09 09:13:32.860313544 -0800
@@ -115,6 +115,7 @@
  */
 
 #include "cryptlib.h"
+#include <pthread.h>
 
 #ifndef OPENSSL_NO_DEPRECATED
 static unsigned long (MS_FAR *id_callback)(void)=0;
@@ -169,9 +170,10 @@
 
 int CRYPTO_THREADID_set_callback(void (*func)(CRYPTO_THREADID *))
 	{
-	if (threadid_callback)
-		return 0;
-	threadid_callback = func;
+	/*
+	 * Setting a threadid callback is no longer allowed; the compiled-in
+	 * platform-specific default is always used.
+	 */
 	return 1;
 	}
 
@@ -204,7 +205,7 @@
 	CRYPTO_THREADID_set_numeric(id, (unsigned long)find_thread(NULL));
 #else
-	/* For everything else, default to using the address of 'errno' */
-	CRYPTO_THREADID_set_pointer(id, &errno);
+ 	/* For everything else, default to using pthread_self() */
+	CRYPTO_THREADID_set_numeric(id, (unsigned long)pthread_self());
 #endif
 	}
 
@@ -231,7 +232,10 @@
 
 void CRYPTO_set_id_callback(unsigned long (*func)(void))
 	{
-	id_callback=func;
+	/*
+	 * Setting a threadid callback is no longer allowed; the compiled-in
+	 * platform-specific default is always used.
+	 */
 	}
 
 unsigned long CRYPTO_thread_id(void)
@@ -249,7 +253,7 @@
 #elif defined(OPENSSL_SYS_BEOS)
 		ret=(unsigned long)find_thread(NULL);
 #else
-		ret=(unsigned long)getpid();
+		ret=(unsigned long)pthread_self();
 #endif
 		}
 	else
