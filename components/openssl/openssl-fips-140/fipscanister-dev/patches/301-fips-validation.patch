# Developed in house: Solaris specific
# This patch is necessary to get a new FIPS validation:
# - Use modern compile options
# - Conform to FIPS 186-4: RSA key generation
# - Enable FIPS by default
--- a/Configure.orig	2016-07-15 01:47:46.399055235 -0700
+++ b/Configure	2016-07-15 01:59:36.376433305 -0700
@@ -221,8 +221,8 @@
 "solaris64-x86_64-gcc","gcc:-m64 -O3 -Wall -DL_ENDIAN::-D_REENTRANT::-lsocket -lnsl -ldl:SIXTY_FOUR_BIT_LONG RC4_CHUNK DES_INT DES_UNROLL:${x86_64_asm}:elf:dlfcn:solaris-shared:-fPIC:-m64 -shared -static-libgcc:.so.\$(SHLIB_MAJOR).\$(SHLIB_MINOR):::/64",
  
 #### Solaris x86 with Sun C setups
-"solaris-x86-cc","cc:-fast -O -Xa::-D_REENTRANT::-lsocket -lnsl -ldl:BN_LLONG RC4_CHAR RC4_CHUNK DES_PTR DES_UNROLL BF_PTR:${no_asm}:dlfcn:solaris-shared:-KPIC:-G -dy -z text:.so.\$(SHLIB_MAJOR).\$(SHLIB_MINOR)",
-"solaris64-x86_64-cc","cc:-fast -xarch=amd64 -xstrconst -Xa -DL_ENDIAN::-D_REENTRANT::-lsocket -lnsl -ldl:SIXTY_FOUR_BIT_LONG RC4_CHUNK DES_INT DES_UNROLL:${x86_64_asm}:elf:dlfcn:solaris-shared:-KPIC:-xarch=amd64 -G -dy -z text:.so.\$(SHLIB_MAJOR).\$(SHLIB_MINOR):::/64",
+"solaris-x86-cc","cc:-m32 -O -xstrconst -Xa::-D_REENTRANT::-lsocket -lnsl -ldl:BN_LLONG RC4_CHAR RC4_CHUNK DES_PTR DES_UNROLL BF_PTR:${no_asm}:dlfcn:solaris-shared:-KPIC:-G -dy -z text:.so.\$(SHLIB_MAJOR).\$(SHLIB_MINOR)",
+"solaris64-x86_64-cc","cc:-m64 -xstrconst -Xa -DL_ENDIAN::-D_REENTRANT::-lsocket -lnsl -ldl:SIXTY_FOUR_BIT_LONG RC4_CHUNK DES_INT DES_UNROLL:${x86_64_asm}:elf:dlfcn:solaris-shared:-KPIC:-m64 -G -dy -z text:.so.\$(SHLIB_MAJOR).\$(SHLIB_MINOR):::/64",
 
 #### SPARC Solaris with GNU C setups
 "solaris-sparcv7-gcc","gcc:-O3 -fomit-frame-pointer -Wall -DB_ENDIAN -DBN_DIV2W::-D_REENTRANT::-lsocket -lnsl -ldl:BN_LLONG RC4_CHAR RC4_CHUNK DES_UNROLL BF_PTR:${no_asm}:dlfcn:solaris-shared:-fPIC:-shared:.so.\$(SHLIB_MAJOR).\$(SHLIB_MINOR)",
@@ -239,12 +239,12 @@
 # SC4.2 is ok, better than gcc even on bn as long as you tell it -xarch=v8
 # SC5.0 note: Compiler common patch 107357-01 or later is required!
 "solaris-sparcv7-cc","cc:-xO5 -xstrconst -xdepend -Xa -DB_ENDIAN -DBN_DIV2W::-D_REENTRANT::-lsocket -lnsl -ldl:BN_LLONG RC4_CHAR RC4_CHUNK DES_PTR DES_RISC1 DES_UNROLL BF_PTR:${no_asm}:dlfcn:solaris-shared:-KPIC:-G -dy -z text:.so.\$(SHLIB_MAJOR).\$(SHLIB_MINOR)",
-"solaris-sparcv8-cc","cc:-xarch=v8 -xO5 -xstrconst -xdepend -Xa -DB_ENDIAN -DBN_DIV2W::-D_REENTRANT::-lsocket -lnsl -ldl:BN_LLONG RC4_CHAR RC4_CHUNK DES_PTR DES_RISC1 DES_UNROLL BF_PTR:${sparcv8_asm}:dlfcn:solaris-shared:-KPIC:-G -dy -z text:.so.\$(SHLIB_MAJOR).\$(SHLIB_MINOR)",
-"solaris-sparcv9-cc","cc:-xtarget=ultra -xarch=v8plus -xO5 -xstrconst -xdepend -Xa -DB_ENDIAN -DBN_DIV2W::-D_REENTRANT:ULTRASPARC:-lsocket -lnsl -ldl:BN_LLONG RC4_CHAR RC4_CHUNK_LL DES_PTR DES_RISC1 DES_UNROLL BF_PTR:${sparcv9_asm}:dlfcn:solaris-shared:-KPIC:-G -dy -z text:.so.\$(SHLIB_MAJOR).\$(SHLIB_MINOR)",
-"solaris64-sparcv9-cc","cc:-xtarget=ultra -xarch=v9 -xO5 -xstrconst -xdepend -Xa -DB_ENDIAN::-D_REENTRANT:ULTRASPARC:-lsocket -lnsl -ldl:BN_LLONG RC4_CHAR RC4_CHUNK DES_INT DES_PTR DES_RISC1 DES_UNROLL BF_PTR:${sparcv9_asm}:dlfcn:solaris-shared:-KPIC:-xarch=v9 -G -dy -z text:.so.\$(SHLIB_MAJOR).\$(SHLIB_MINOR):/usr/ccs/bin/ar rs::/64",
+"solaris-sparcv8-cc","cc:-m32 -xO5 -xstrconst -xdepend -Xa -DB_ENDIAN -DBN_DIV2W::-D_REENTRANT::-lsocket -lnsl -ldl:BN_LLONG RC4_CHAR RC4_CHUNK DES_PTR DES_RISC1 DES_UNROLL BF_PTR:${sparcv8_asm}:dlfcn:solaris-shared:-KPIC:-G -dy -z text:.so.\$(SHLIB_MAJOR).\$(SHLIB_MINOR)",
+"solaris-sparcv9-cc","cc:-m32 -xO5 -xstrconst -xdepend -Xa -DB_ENDIAN -DBN_DIV2W::-D_REENTRANT:ULTRASPARC:-lsocket -lnsl -ldl:BN_LLONG RC4_CHAR RC4_CHUNK_LL DES_PTR DES_RISC1 DES_UNROLL BF_PTR:${sparcv9_asm}:dlfcn:solaris-shared:-KPIC:-G -dy -z text:.so.\$(SHLIB_MAJOR).\$(SHLIB_MINOR)",
+"solaris64-sparcv9-cc","cc:-m64 -xO5 -xstrconst -xdepend -Xa -DB_ENDIAN::-D_REENTRANT:ULTRASPARC:-lsocket -lnsl -ldl:BN_LLONG RC4_CHAR RC4_CHUNK DES_INT DES_PTR DES_RISC1 DES_UNROLL BF_PTR:${sparcv9_asm}:dlfcn:solaris-shared:-KPIC:-m64 -G -dy -z text:.so.\$(SHLIB_MAJOR).\$(SHLIB_MINOR):/usr/ccs/bin/ar rs::/64",
 ####
-"debug-solaris-sparcv8-cc","cc:-DBN_DEBUG -DREF_CHECK -DCONF_DEBUG -DBN_CTX_DEBUG -DCRYPTO_MDEBUG_ALL -xarch=v8 -g -O -xstrconst -Xa -DB_ENDIAN -DBN_DIV2W::-D_REENTRANT::-lsocket -lnsl -ldl:BN_LLONG RC4_CHAR RC4_CHUNK DES_PTR DES_RISC1 DES_UNROLL BF_PTR:${sparcv8_asm}:dlfcn:solaris-shared:-KPIC:-G -dy -z text:.so.\$(SHLIB_MAJOR).\$(SHLIB_MINOR)",
-"debug-solaris-sparcv9-cc","cc:-DBN_DEBUG -DREF_CHECK -DCONF_DEBUG -DBN_CTX_DEBUG -DCRYPTO_MDEBUG_ALL -xtarget=ultra -xarch=v8plus -g -O -xstrconst -Xa -DB_ENDIAN -DBN_DIV2W::-D_REENTRANT:ULTRASPARC:-lsocket -lnsl -ldl:BN_LLONG RC4_CHAR RC4_CHUNK_LL DES_PTR DES_RISC1 DES_UNROLL BF_PTR:${sparcv9_asm}:dlfcn:solaris-shared:-KPIC:-G -dy -z text:.so.\$(SHLIB_MAJOR).\$(SHLIB_MINOR)", 
+"debug-solaris-sparcv8-cc","cc:-DBN_DEBUG -DREF_CHECK -DCONF_DEBUG -DBN_CTX_DEBUG -DCRYPTO_MDEBUG_ALL -m32 -g -O -xstrconst -Xa -DB_ENDIAN -DBN_DIV2W::-D_REENTRANT::-lsocket -lnsl -ldl:BN_LLONG RC4_CHAR RC4_CHUNK DES_PTR DES_RISC1 DES_UNROLL BF_PTR:${sparcv8_asm}:dlfcn:solaris-shared:-KPIC:-G -dy -z text:.so.\$(SHLIB_MAJOR).\$(SHLIB_MINOR)",
+"debug-solaris-sparcv9-cc","cc:-DBN_DEBUG -DREF_CHECK -DCONF_DEBUG -DBN_CTX_DEBUG -DCRYPTO_MDEBUG_ALL -m64 -g -O -xstrconst -Xa -DB_ENDIAN -DBN_DIV2W::-D_REENTRANT:ULTRASPARC:-lsocket -lnsl -ldl:BN_LLONG RC4_CHAR RC4_CHUNK_LL DES_PTR DES_RISC1 DES_UNROLL BF_PTR:${sparcv9_asm}:dlfcn:solaris-shared:-KPIC:-G -dy -z text:.so.\$(SHLIB_MAJOR).\$(SHLIB_MINOR)", 
 
 #### SunOS configs, assuming sparc for the gcc one.
 #"sunos-cc", "cc:-O4 -DNOPROTO -DNOCONST::(unknown):SUNOS::DES_UNROLL:${no_asm}::",
--- a/crypto/bn/bn_x931p.c.new	2016-07-15 02:15:47.056871670 -0700
+++ b/crypto/bn/bn_x931p.c	2015-11-16 13:45:17.000000000 -0800
@@ -78,8 +78,8 @@
 		{
 		i++;
 		BN_GENCB_call(cb, 0, i);
-		/* NB 27 MR is specificed in X9.31 */
-		if (BN_is_prime_fasttest_ex(pi, 27, ctx, 1, cb))
+		/* NB 32 MR is specificed in X9.31 */
+		if (BN_is_prime_fasttest_ex(pi, 32, ctx, 1, cb))
 			break;
 		if (!BN_add_word(pi, 2))
 			return 0;
@@ -254,9 +254,9 @@
 	if (!Xp2)
 		Xp2 = BN_CTX_get(ctx);
 
-	if (!BN_rand(Xp1, 101, 0, 0))
+	if (!BN_rand(Xp1, 171, 0, 0))
 		goto error;
-	if (!BN_rand(Xp2, 101, 0, 0))
+	if (!BN_rand(Xp2, 171, 0, 0))
 		goto error;
 	if (!BN_X931_derive_prime_ex(p, p1, p2, Xp, Xp1, Xp2, e, ctx, cb))
 		goto error;
--- a/fips/fips.c	2016-06-20 12:49:46.000000000 -0700
+++ b/fips/fips.c	2017-09-07 12:53:13.309095315 -0700
@@ -77,6 +77,7 @@
 static int fips_auth_fail = 0;
 static int fips_mode = 0;
 static int fips_started = 0;
+static int fips_post_pass = 0;
 
 static int fips_is_owning_thread(void);
 static int fips_set_owning_thread(void);
@@ -288,6 +289,21 @@
     {
     int ret = 0;
 
+    if (onoff)
+        {
+        if (FIPS_module_mode() == 1)
+            /* FIPS mode is already enabled: this is noop */
+            return 1;
+        else if (fips_started && fips_post_pass == 0)
+            {
+            /*
+             * If the FIPS mode was disabled at the load time, fail to
+             * enable the FIPS mode
+             */
+            return 0;
+            }
+        }
+
     fips_w_lock();
     fips_started = 1;
     fips_set_owning_thread();
@@ -301,20 +317,11 @@
 	    fips_auth_fail = 1;
 	    fips_selftest_fail = 1;
 	    FIPSerr(FIPS_F_FIPS_MODULE_MODE_SET,FIPS_R_AUTHENTICATION_FAILURE);
-	    return 0;
-	    }
-
-	/* Don't go into FIPS mode twice, just so we can do automagic
-	   seeding */
-	if(FIPS_module_mode())
-	    {
-	    FIPSerr(FIPS_F_FIPS_MODULE_MODE_SET,FIPS_R_FIPS_MODE_ALREADY_SET);
-	    fips_selftest_fail = 1;
 	    ret = 0;
 	    goto end;
 	    }
 
-#ifdef OPENSSL_IA32_SSE2
+#if 0
 	{
 	extern unsigned int OPENSSL_ia32cap_P[2];
 	if ((OPENSSL_ia32cap_P[0] & (1<<25|1<<26)) != (1<<25|1<<26))
@@ -338,7 +345,10 @@
 	    }
 
 	if(FIPS_selftest())
+           {
 	    fips_set_mode(onoff);
+           fips_post_pass = 1;
+           }
 	else
 	    {
 	    fips_selftest_fail = 1;
--- a/fips/fips_premain.c	2016-06-22 08:40:20.000000000 -0700
+++ b/fips/fips_premain.c	2017-09-08 14:07:28.888746325 -0700
@@ -4,9 +4,13 @@
  * OpenSSL license.
  */
 
+#ifdef __linux__
+#define _GNU_SOURCE
+#endif
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+#include <dlfcn.h>
 #if defined(__unix) || defined(__unix__) || defined(__vxworks) || defined(__ANDROID__) || defined(__APPLE__)
 #include <unistd.h>
 #endif
@@ -87,6 +88,8 @@
 extern const unsigned char FIPS_rodata_start[], FIPS_rodata_end[];
 extern unsigned char       FIPS_signature[20];
 extern unsigned int        FIPS_incore_fingerprint(unsigned char *,unsigned int);
+extern int                 FIPS_module_mode_set(int onoff, const char *auth);
+extern int                 solaris_fips_OPENSSL_init(void);
 
 /*
  * As name suggests this code is executed prior main(). We use this
@@ -97,6 +99,8 @@
 { unsigned char sig[sizeof(FIPS_signature)];
   const unsigned char * volatile p=FINGERPRINT_ascii_value;
   unsigned int len=sizeof(sig),i;
+  int fips_enabled;
+  int (*_fips_config_check)(void);
 
     /* "volatilization" is done to disengage unwanted optimization... */
     if (*((volatile unsigned char *)p)=='?')
@@ -143,6 +147,32 @@
 #if defined(__powerpc__) || defined(__ppc__) || defined(_ARCH_PPC)
     fips_openssl_cpuid_setup();
 #endif
+
+    /*
+     * If the OS provides _fips_config_check(), call the function to check
+     * the mode of the operation configured.
+     * Note: the function is not defined in Solaris, so Solaris will always
+     * enable the FIPS mode by default.
+     */
+    fips_enabled  = 1; /* by default, it is enabled */
+    _fips_config_check = (int (*)())dlsym(RTLD_DEFAULT, "_fips_config_check");
+    if (_fips_config_check) {
+        fips_enabled = _fips_config_check();
+    }
+
+    if (fips_enabled) {
+        /* enable FIPS mode by default */
+        if (solaris_fips_OPENSSL_init() != 1) {
+            fprintf(stderr, "Failed to set FIPS mode.\n");
+            abort();
+        }
+    } else {
+        /*
+         * Call FIPS_module_mode_set(0) to indicate that the FIPS mode was
+         * false when the module is loaded and POST was not executed.
+         */
+        (void) FIPS_module_mode_set(0, NULL);
+    }
 }
 
 #else
