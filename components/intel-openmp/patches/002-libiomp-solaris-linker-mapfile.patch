# Linker mapfile for the Intel OpenMP Library and the Solaris
# linker. The original mapfile is written for the GNU Linker.
# This patch is probably not going to be accepted upstream,
# because the Intel XE Compilers do not support Solaris in any way.
--- src/exports_so.txt	2015-10-09 11:05:44.000000000 -0700
+++ src/exports_so.txt	2016-08-04 13:52:18.786942786 -0700
@@ -1,7 +1,7 @@
 # exports_so.txt #
 
 # <copyright>
-#    Copyright (c) 2013-2015 Intel Corporation.  All Rights Reserved.
+#    Copyright (C) 2016 Oracle and/or its affiliates.  All Rights Reserved.
 #
 #    Redistribution and use in source and binary forms, with or without
 #    modification, are permitted provided that the following conditions
@@ -30,119 +30,796 @@
 #
 # </copyright>
 
-# This is version script for OMP RTL shared library (libiomp5*.so)
+# Solaris linker mapfile for the Solaris OpenMP RTL shared library
+# (libiomp5*.so).
 
-VERSION {
+$mapfile_version 2
 
-    global: # Exported symbols.
-
-        #
-        # "Normal" symbols.
-        #
-        omp_*;     # Standard OpenMP functions.
-        ompt_initialize;     # OMPT initialization interface
-        ompt_control;        # OMPT control interface
-        
-        #
-        # OMPT state placeholders
-        #
-        ompt_idle;
-        ompt_overhead;
-        ompt_barrier_wait;
-        ompt_task_wait;
-        ompt_mutex_wait;
-
-        ompc_*;    # omp.h renames some standard functions to ompc_*.
-        kmp_*;     # Intel extensions.
-        kmpc_*;    # Intel extensions.
-        __kmpc_*;  # Functions called by compiler-generated code.
-        GOMP_*;    # GNU C compatibility functions.
-
-        _You_must_link_with_*;     # Mutual detection/MS compatibility symbols.
-
-
-        #
-        # Debugger support.
-        #
-#if USE_DEBUGGER
-        __kmp_debugging;
-        __kmp_omp_debug_struct_info;
-#endif /* USE_DEBUGGER */
-
-        #
-        # Internal functions exported for testing purposes.
-        #
-        __kmp_get_reduce_method;
-        ___kmp_allocate;
-        ___kmp_free;
-        __kmp_thread_pool;
-        __kmp_thread_pool_nth;
-
-	__kmp_reset_stats;
-
-#if USE_ITT_BUILD
-        #
-        # ITT support.
-        #
-        # The following entry points are added so that the backtraces from
-        # the tools contain meaningful names for all the functions that might
-        # appear in a backtrace of a thread which is blocked in the RTL.
-        __kmp_acquire_drdpa_lock;
-        __kmp_acquire_nested_drdpa_lock;
-        __kmp_acquire_nested_queuing_lock;
-        __kmp_acquire_nested_tas_lock;
-        __kmp_acquire_nested_ticket_lock;
-        __kmp_acquire_queuing_lock;
-        __kmp_acquire_tas_lock;
-        __kmp_acquire_ticket_lock;
+SYMBOL_SCOPE {
+  global:
+    GOMP_atomic_end;
+    GOMP_atomic_start;
+    GOMP_barrier;
+    GOMP_barrier_cancel;
+    GOMP_cancel;
+    GOMP_cancellation_point;
+    GOMP_critical_end;
+    GOMP_critical_name_end;
+    GOMP_critical_name_start;
+    GOMP_critical_start;
+    GOMP_loop_dynamic_next;
+    GOMP_loop_dynamic_start;
+    GOMP_loop_end;
+    GOMP_loop_end_cancel;
+    GOMP_loop_end_nowait;
+    GOMP_loop_guided_next;
+    GOMP_loop_guided_start;
+    GOMP_loop_ordered_dynamic_next;
+    GOMP_loop_ordered_dynamic_start;
+    GOMP_loop_ordered_guided_next;
+    GOMP_loop_ordered_guided_start;
+    GOMP_loop_ordered_runtime_next;
+    GOMP_loop_ordered_runtime_start;
+    GOMP_loop_ordered_static_next;
+    GOMP_loop_ordered_static_start;
+    GOMP_loop_runtime_next;
+    GOMP_loop_runtime_start;
+    GOMP_loop_static_next;
+    GOMP_loop_static_start;
+    GOMP_loop_ull_dynamic_next;
+    GOMP_loop_ull_dynamic_start;
+    GOMP_loop_ull_guided_next;
+    GOMP_loop_ull_guided_start;
+    GOMP_loop_ull_ordered_dynamic_next;
+    GOMP_loop_ull_ordered_dynamic_start;
+    GOMP_loop_ull_ordered_guided_next;
+    GOMP_loop_ull_ordered_guided_start;
+    GOMP_loop_ull_ordered_runtime_next;
+    GOMP_loop_ull_ordered_runtime_start;
+    GOMP_loop_ull_ordered_static_next;
+    GOMP_loop_ull_ordered_static_start;
+    GOMP_loop_ull_runtime_next;
+    GOMP_loop_ull_runtime_start;
+    GOMP_loop_ull_static_next;
+    GOMP_loop_ull_static_start;
+    GOMP_ordered_end;
+    GOMP_ordered_start;
+    GOMP_parallel;
+    GOMP_parallel_end;
+    GOMP_parallel_loop_dynamic;
+    GOMP_parallel_loop_dynamic_start;
+    GOMP_parallel_loop_guided;
+    GOMP_parallel_loop_guided_start;
+    GOMP_parallel_loop_runtime;
+    GOMP_parallel_loop_runtime_start;
+    GOMP_parallel_loop_static;
+    GOMP_parallel_loop_static_start;
+    GOMP_parallel_sections;
+    GOMP_parallel_sections_start;
+    GOMP_parallel_start;
+    GOMP_sections_end;
+    GOMP_sections_end_cancel;
+    GOMP_sections_end_nowait;
+    GOMP_sections_next;
+    GOMP_sections_start;
+    GOMP_single_copy_end;
+    GOMP_single_copy_start;
+    GOMP_single_start;
+    GOMP_target;
+    GOMP_target_data;
+    GOMP_target_end_data;
+    GOMP_target_update;
+    GOMP_task;
+    GOMP_taskgroup_end;
+    GOMP_taskgroup_start;
+    GOMP_taskwait;
+    GOMP_taskyield;
+    GOMP_teams;
+    _Z14kmpc_poolprintv;
+    _Z15__kmp_env_printv;
+    $if _sparc
+      _Z17__kmpc_atomic_endv;
+    $else
+      __kmpc_atomic_end;
+    $endif
+    _Z17kmpc_get_poolmodev;
+    _Z17kmpc_get_poolsizev;
+    $if _ELF64
+      _Z17kmpc_get_poolstatPmS_;
+    $else
+      _Z17kmpc_get_poolstatPjS_;
+    $endif
+    _Z17kmpc_set_poolmodei;
+    $if _ELF64
+      _Z17kmpc_set_poolsizem;
+    $else
+      _Z17kmpc_set_poolsizej;
+    $endif
+    _Z17__kmp_env_print_2v;
+    _Z18__kmp_fork_barrierii;
+    _Z18__kmp_join_barrieri;
+    $if _sparc
+      _Z19__kmpc_atomic_startv;
+    $else
+      __kmpc_atomic_start;
+    $endif
+    _Z20__kmp_change_libraryi;
+    _Z20__kmp_env_initializePKc;
+    _Z20__kmp_resume_monitorv;
+    _Z20__kmp_setup_icv_copyP8kmp_teamiP20kmp_internal_controlP5ident;
+    $if _ELF64
+      _Z21__ompt_team_assign_idP8kmp_teamm;
+    $else
+      _Z21__ompt_team_assign_idP8kmp_teamy;
+    $endif
+    $if _ELF64
+      _Z23__ompt_lw_taskteam_initP18ompt_lw_taskteam_sP8kmp_infoiPvm;
+    $else
+      _Z23__ompt_lw_taskteam_initP18ompt_lw_taskteam_sP8kmp_infoiPvy;
+    $endif
+    _Z23__ompt_lw_taskteam_linkP18ompt_lw_taskteam_sP8kmp_info;
+    _Z25__kmp_default_tp_capacityiii;
+    _Z25__ompt_lw_taskteam_unlinkP8kmp_info;
+    _Z29__kmp_convert_to_millisecondsPKc;
+    _Z30__kmp_initial_threads_capacityi;
+    _Z30__kmp_register_library_startupv;
+    _Z36__kmp_unregister_root_current_threadi;
+    __kmp_abort_process;
+    __kmp_abort_thread;
+    __kmp_acquire_drdpa_lock;
+    __kmp_acquire_nested_drdpa_lock;
+    __kmp_acquire_nested_queuing_lock;
+    __kmp_acquire_nested_tas_lock;
+    __kmp_acquire_nested_ticket_lock;
+    __kmp_acquire_queuing_lock;
+    __kmp_acquire_tas_lock;
+    __kmp_acquire_ticket_lock;
+    ___kmp_allocate;
+    __kmp_allocate_cons_stack;
+    __kmp_allocate_indirect_lock;
+    __kmp_allocate_team;
+    __kmp_allocate_thread;
+    __kmp_aux_dispatch_fini_chunk_4;
+    __kmp_aux_dispatch_fini_chunk_4u;
+    __kmp_aux_dispatch_fini_chunk_8;
+    __kmp_aux_dispatch_fini_chunk_8u;
+    __kmp_aux_dispatch_init_4;
+    __kmp_aux_dispatch_init_4u;
+    __kmp_aux_dispatch_init_8;
+    __kmp_aux_dispatch_init_8u;
+    __kmp_aux_set_blocktime;
+    __kmp_aux_set_defaults;
+    __kmp_aux_set_library;
+    __kmp_aux_set_stacksize;
+    __kmp_barrier;
+    kmp_calloc;
+    __kmpc_atomic_1;
+    __kmpc_atomic_10;
+    __kmpc_atomic_16;
+    __kmpc_atomic_2;
+    __kmpc_atomic_20;
+    __kmpc_atomic_32;
+    __kmpc_atomic_4;
+    __kmpc_atomic_8;
+    __kmpc_atomic_cmplx10_add;
+    __kmpc_atomic_cmplx10_div;
+    __kmpc_atomic_cmplx10_mul;
+    __kmpc_atomic_cmplx10_sub;
+    __kmpc_atomic_cmplx16_add;
+    __kmpc_atomic_cmplx16_div;
+    __kmpc_atomic_cmplx16_mul;
+    __kmpc_atomic_cmplx16_sub;
+    __kmpc_atomic_cmplx4_add;
+    __kmpc_atomic_cmplx4_add_cmplx8;
+    __kmpc_atomic_cmplx4_div;
+    __kmpc_atomic_cmplx4_div_cmplx8;
+    __kmpc_atomic_cmplx4_mul;
+    __kmpc_atomic_cmplx4_mul_cmplx8;
+    __kmpc_atomic_cmplx4_sub;
+    __kmpc_atomic_cmplx4_sub_cmplx8;
+    __kmpc_atomic_cmplx8_add;
+    __kmpc_atomic_cmplx8_div;
+    __kmpc_atomic_cmplx8_mul;
+    __kmpc_atomic_cmplx8_sub;
+    __kmpc_atomic_fixed1_add;
+    __kmpc_atomic_fixed1_add_fp;
+    __kmpc_atomic_fixed1_andb;
+    __kmpc_atomic_fixed1_andl;
+    __kmpc_atomic_fixed1_div;
+    __kmpc_atomic_fixed1_div_float8;
+    __kmpc_atomic_fixed1_div_fp;
+    __kmpc_atomic_fixed1_eqv;
+    __kmpc_atomic_fixed1_max;
+    __kmpc_atomic_fixed1_min;
+    __kmpc_atomic_fixed1_mul;
+    __kmpc_atomic_fixed1_mul_float8;
+    __kmpc_atomic_fixed1_mul_fp;
+    __kmpc_atomic_fixed1_neqv;
+    __kmpc_atomic_fixed1_orb;
+    __kmpc_atomic_fixed1_orl;
+    __kmpc_atomic_fixed1_shl;
+    __kmpc_atomic_fixed1_shr;
+    __kmpc_atomic_fixed1_sub;
+    __kmpc_atomic_fixed1_sub_fp;
+    __kmpc_atomic_fixed1u_div;
+    __kmpc_atomic_fixed1u_div_fp;
+    __kmpc_atomic_fixed1u_shr;
+    __kmpc_atomic_fixed1_xor;
+    __kmpc_atomic_fixed2_add;
+    __kmpc_atomic_fixed2_add_fp;
+    __kmpc_atomic_fixed2_andb;
+    __kmpc_atomic_fixed2_andl;
+    __kmpc_atomic_fixed2_div;
+    __kmpc_atomic_fixed2_div_float8;
+    __kmpc_atomic_fixed2_div_fp;
+    __kmpc_atomic_fixed2_eqv;
+    __kmpc_atomic_fixed2_max;
+    __kmpc_atomic_fixed2_min;
+    __kmpc_atomic_fixed2_mul;
+    __kmpc_atomic_fixed2_mul_float8;
+    __kmpc_atomic_fixed2_mul_fp;
+    __kmpc_atomic_fixed2_neqv;
+    __kmpc_atomic_fixed2_orb;
+    __kmpc_atomic_fixed2_orl;
+    __kmpc_atomic_fixed2_shl;
+    __kmpc_atomic_fixed2_shr;
+    __kmpc_atomic_fixed2_sub;
+    __kmpc_atomic_fixed2_sub_fp;
+    __kmpc_atomic_fixed2u_div;
+    __kmpc_atomic_fixed2u_div_fp;
+    __kmpc_atomic_fixed2u_shr;
+    __kmpc_atomic_fixed2_xor;
+    __kmpc_atomic_fixed4_add;
+    __kmpc_atomic_fixed4_add_fp;
+    __kmpc_atomic_fixed4_andb;
+    __kmpc_atomic_fixed4_andl;
+    __kmpc_atomic_fixed4_div;
+    __kmpc_atomic_fixed4_div_float8;
+    __kmpc_atomic_fixed4_div_fp;
+    __kmpc_atomic_fixed4_eqv;
+    __kmpc_atomic_fixed4_max;
+    __kmpc_atomic_fixed4_min;
+    __kmpc_atomic_fixed4_mul;
+    __kmpc_atomic_fixed4_mul_float8;
+    __kmpc_atomic_fixed4_mul_fp;
+    __kmpc_atomic_fixed4_neqv;
+    __kmpc_atomic_fixed4_orb;
+    __kmpc_atomic_fixed4_orl;
+    __kmpc_atomic_fixed4_shl;
+    __kmpc_atomic_fixed4_shr;
+    __kmpc_atomic_fixed4_sub;
+    __kmpc_atomic_fixed4_sub_fp;
+    __kmpc_atomic_fixed4u_div;
+    __kmpc_atomic_fixed4u_div_fp;
+    __kmpc_atomic_fixed4u_shr;
+    __kmpc_atomic_fixed4_xor;
+    __kmpc_atomic_fixed8_add;
+    __kmpc_atomic_fixed8_add_fp;
+    __kmpc_atomic_fixed8_andb;
+    __kmpc_atomic_fixed8_andl;
+    __kmpc_atomic_fixed8_div;
+    __kmpc_atomic_fixed8_div_float8;
+    __kmpc_atomic_fixed8_div_fp;
+    __kmpc_atomic_fixed8_eqv;
+    __kmpc_atomic_fixed8_max;
+    __kmpc_atomic_fixed8_min;
+    __kmpc_atomic_fixed8_mul;
+    __kmpc_atomic_fixed8_mul_float8;
+    __kmpc_atomic_fixed8_mul_fp;
+    __kmpc_atomic_fixed8_neqv;
+    __kmpc_atomic_fixed8_orb;
+    __kmpc_atomic_fixed8_orl;
+    __kmpc_atomic_fixed8_shl;
+    __kmpc_atomic_fixed8_shr;
+    __kmpc_atomic_fixed8_sub;
+    __kmpc_atomic_fixed8_sub_fp;
+    __kmpc_atomic_fixed8u_div;
+    __kmpc_atomic_fixed8u_div_fp;
+    __kmpc_atomic_fixed8u_shr;
+    __kmpc_atomic_fixed8_xor;
+    __kmpc_atomic_float10_add;
+    __kmpc_atomic_float10_add_fp;
+    __kmpc_atomic_float10_div;
+    __kmpc_atomic_float10_div_fp;
+    __kmpc_atomic_float10_mul;
+    __kmpc_atomic_float10_mul_fp;
+    __kmpc_atomic_float10_sub;
+    __kmpc_atomic_float10_sub_fp;
+    __kmpc_atomic_float16_add;
+    __kmpc_atomic_float16_div;
+    __kmpc_atomic_float16_max;
+    __kmpc_atomic_float16_min;
+    __kmpc_atomic_float16_mul;
+    __kmpc_atomic_float16_sub;
+    __kmpc_atomic_float4_add;
+    __kmpc_atomic_float4_add_float8;
+    __kmpc_atomic_float4_add_fp;
+    __kmpc_atomic_float4_div;
+    __kmpc_atomic_float4_div_float8;
+    __kmpc_atomic_float4_div_fp;
+    __kmpc_atomic_float4_max;
+    __kmpc_atomic_float4_min;
+    __kmpc_atomic_float4_mul;
+    __kmpc_atomic_float4_mul_float8;
+    __kmpc_atomic_float4_mul_fp;
+    __kmpc_atomic_float4_sub;
+    __kmpc_atomic_float4_sub_float8;
+    __kmpc_atomic_float4_sub_fp;
+    __kmpc_atomic_float8_add;
+    __kmpc_atomic_float8_add_fp;
+    __kmpc_atomic_float8_div;
+    __kmpc_atomic_float8_div_fp;
+    __kmpc_atomic_float8_max;
+    __kmpc_atomic_float8_min;
+    __kmpc_atomic_float8_mul;
+    __kmpc_atomic_float8_mul_fp;
+    __kmpc_atomic_float8_sub;
+    __kmpc_atomic_float8_sub_fp;
+    __kmpc_barrier;
+    __kmpc_barrier_master;
+    __kmpc_barrier_master_nowait;
+    __kmpc_begin;
+    __kmpc_bound_num_threads;
+    __kmpc_bound_thread_num;
+    kmpc_calloc;
+    __kmpc_cancel;
+    __kmpc_cancel_barrier;
+    __kmpc_cancellationpoint;
+    __kmpc_copyprivate;
+    __kmpc_critical;
+    __kmpc_critical_with_hint;
+    __kmpc_destroy_lock;
+    __kmpc_destroy_nest_lock;
+    __kmpc_dispatch_fini_4;
+    __kmpc_dispatch_fini_4u;
+    __kmpc_dispatch_fini_8;
+    __kmpc_dispatch_fini_8u;
+    __kmpc_dispatch_init_4;
+    __kmpc_dispatch_init_4u;
+    __kmpc_dispatch_init_8;
+    __kmpc_dispatch_init_8u;
+    __kmpc_dispatch_next_4;
+    __kmpc_dispatch_next_4u;
+    __kmpc_dispatch_next_8;
+    __kmpc_dispatch_next_8u;
+    __kmpc_dist_dispatch_init_4;
+    __kmpc_dist_dispatch_init_4u;
+    __kmpc_dist_dispatch_init_8;
+    __kmpc_dist_dispatch_init_8u;
+    __kmpc_dist_for_static_init_4;
+    __kmpc_dist_for_static_init_4u;
+    __kmpc_dist_for_static_init_8;
+    __kmpc_dist_for_static_init_8u;
+    __kmpc_end;
+    __kmpc_end_barrier_master;
+    __kmpc_end_critical;
+    __kmpc_end_master;
+    __kmpc_end_ordered;
+    __kmpc_end_reduce;
+    __kmpc_end_reduce_nowait;
+    __kmpc_end_serialized_parallel;
+    __kmpc_end_single;
+    __kmpc_end_taskgroup;
+    __kmpc_end_taskq;
+    __kmpc_end_taskq_task;
+    __kmpc_flush;
+    __kmpc_fork_call;
+    __kmpc_fork_teams;
+    __kmpc_for_static_fini;
+    __kmpc_for_static_init_4;
+    __kmpc_for_static_init_4u;
+    __kmpc_for_static_init_8;
+    __kmpc_for_static_init_8u;
+    kmpc_free;
+    __kmpc_get_parent_taskid;
+    __kmpc_get_taskid;
+    __kmpc_global_num_threads;
+    __kmpc_global_thread_num;
+    __kmp_check_barrier;
+    __kmp_check_stack_overlap;
+    __kmp_check_sync;
+    __kmp_check_workshare;
+    __kmpc_init_lock;
+    __kmpc_init_lock_with_hint;
+    __kmpc_init_nest_lock;
+    __kmpc_init_nest_lock_with_hint;
+    __kmpc_in_parallel;
+    __kmpc_invoke_task_func;
+    __kmp_cleanup;
+    __kmp_cleanup_hierarchy;
+    __kmp_cleanup_indirect_user_locks;
+    __kmp_clear_system_time;
+    kmpc_malloc;
+    __kmpc_master;
+    __kmpc_ok_to_fork;
+    __kmp_common_destroy;
+    __kmp_common_destroy_gtid;
+    __kmp_common_initialize;
+    __kmpc_omp_task;
+    __kmpc_omp_task_alloc;
+    __kmpc_omp_task_begin_if0;
+    __kmpc_omp_task_complete_if0;
+    __kmpc_omp_task_parts;
+    __kmpc_omp_taskwait;
+    __kmpc_omp_task_with_deps;
+    __kmpc_omp_taskyield;
+    __kmpc_omp_wait_deps;
+    __kmpc_ordered;
+    __kmpc_place_threads;
+    __kmpc_pop_num_threads;
+    __kmpc_proxy_task_completed;
+    __kmpc_proxy_task_completed_ooo;
+    __kmpc_push_num_teams;
+    __kmpc_push_num_threads;
+    __kmpc_push_proc_bind;
+    kmpc_realloc;
+    __kmp_create_monitor;
+    __kmp_create_worker;
+    __kmpc_reduce;
+    __kmpc_reduce_nowait;
+    __kmpc_serialized_parallel;
+    kmpc_set_blocktime;
+    kmpc_set_defaults;
+    kmpc_set_library;
+    __kmpc_set_lock;
+    __kmpc_set_nest_lock;
+    kmpc_set_stacksize;
+    kmpc_set_stacksize_s;
+    __kmpc_single;
+    __kmpc_task;
+    __kmpc_task_buffer;
+    __kmpc_taskgroup;
+    __kmpc_taskq;
+    __kmpc_taskq_task;
+    __kmpc_team_static_init_4;
+    __kmpc_team_static_init_4u;
+    __kmpc_team_static_init_8;
+    __kmpc_team_static_init_8u;
+    __kmpc_test_lock;
+    __kmpc_test_nest_lock;
+    __kmpc_threadprivate;
+    __kmpc_threadprivate_cached;
+    __kmpc_threadprivate_register;
+    __kmpc_threadprivate_register_vec;
+    __kmpc_unset_lock;
+    __kmpc_unset_nest_lock;
+    __kmp_debug_assert;
+    __kmp_debug_printf;
+    __kmp_destroy_drdpa_lock;
+    __kmp_destroy_nested_drdpa_lock;
+    __kmp_destroy_nested_queuing_lock;
+    __kmp_destroy_nested_tas_lock;
+    __kmp_destroy_nested_ticket_lock;
+    __kmp_destroy_queuing_lock;
+    __kmp_destroy_tas_lock;
+    __kmp_destroy_ticket_lock;
+    __kmp_determine_reduction_method;
+    __kmp_disable;
+    __kmp_dump_debug_buffer;
+    __kmp_elapsed;
+    __kmp_elapsed_tick;
+    __kmp_enable;
+    __kmp_end_split_barrier;
+    __kmp_enter_single;
+    __kmp_env_blk_free;
+    __kmp_env_blk_init;
+    __kmp_env_blk_sort;
+    __kmp_env_blk_var;
+    __kmp_env_exists;
+    __kmp_env_free;
+    __kmp_env_get;
+    __kmp_env_set;
+    __kmp_env_unset;
+    __kmp_eq_4;
+    __kmp_error_construct;
+    __kmp_error_construct2;
+    __kmp_execute_tasks_32;
+    __kmp_execute_tasks_64;
+    __kmp_execute_tasks_oncore;
+    __kmp_exit_single;
+    __kmp_exit_thread;
+    __kmp_expand_file_name;
+    __kmp_expand_host_name;
+    ___kmp_fast_allocate;
+    ___kmp_fast_free;
+    __kmp_finalize_bget;
         __kmp_fork_call;
+    kmp_free_;
+    __kmp_free_cons_stack;
+    __kmp_free_fast_memory;
+    __kmp_free_task_team;
+    __kmp_free_team;
+    __kmp_free_thread;
+    __kmp_ge_4;
+    __kmp_get_ancestor_thread_num;
+    kmp_get_blocktime_;
+    kmp_get_cancellation_status_;
+    __kmp_get_global_thread_id;
+    __kmp_get_global_thread_id_reg;
+    __kmp_get_hierarchy;
+    kmp_get_library_;
+    __kmp_get_load_balance;
+    __kmp_get_max_active_levels;
+    kmp_get_num_known_threads_;
+    __kmp_get_random;
         __kmp_get_reduce_method;
-        __kmp_invoke_microtask;
-        __kmp_itt_fini_ittlib;
-        __kmp_itt_init_ittlib;
-        __kmp_launch_monitor;
-        __kmp_launch_worker;
+    __kmp_get_schedule;
+    __kmp_get_schedule_global;
+    kmp_get_stacksize_;
+    kmp_get_stacksize_s_;
+    __kmp_get_team_size;
+    __kmp_get_user_lock_owner;
+    __kmp_gtid_get_specific;
+    __kmp_gtid_set_specific;
+    __kmp_i18n_catclose;
+    __kmp_i18n_catgets;
+    __kmp_i18n_catopen;
+    __kmp_ignore_mppbeg;
+    __kmp_ignore_mppend;
+    __kmp_infinite_loop;
+    __kmp_init_drdpa_lock;
+    __kmp_init_dynamic_user_locks;
+    __kmp_initialize_bget;
+    __kmp_initialize_fast_memory;
+    __kmp_init_implicit_task;
+    __kmp_init_nested_drdpa_lock;
+    __kmp_init_nested_queuing_lock;
+    __kmp_init_nested_tas_lock;
+    __kmp_init_nested_ticket_lock;
+    __kmp_init_queuing_lock;
+    __kmp_init_random;
+    __kmp_init_tas_lock;
+    __kmp_init_ticket_lock;
+    __kmp_internal_begin;
+    __kmp_internal_end_atexit;
+    __kmp_internal_end_dest;
+    __kmp_internal_end_dtor;
+    __kmp_internal_end_fini;
+    __kmp_internal_end_library;
+    __kmp_internal_end_thread;
+    __kmp_internal_fork;
+    __kmp_internal_join;
+    $if _sparc
+      __kmp_invoke_microtask;
+    $endif
+    __kmp_invoke_task_func;
+    __kmp_invoke_teams_master;
+    __kmp_is_address_mapped;
+    __kmp_join_call;
+    __kmp_launch_thread;
+    __kmp_le_4;
+    __kmp_lt_4;
+    kmp_malloc_;
+    __kmp_middle_initialize;
+    __kmp_msg;
+    __kmp_msg_error_code;
+    __kmp_msg_error_mesg;
+    __kmp_msg_format;
+    __kmp_neq_4;
+    __kmp_omp_num_threads;
+    __kmp_omp_task;
+    ___kmp_page_allocate;
+    __kmp_parallel_deo;
+    __kmp_parallel_dxo;
+    __kmp_parallel_initialize;
+    __kmp_pop_current_task_from_thread;
+    __kmp_pop_parallel;
+    __kmp_pop_sync;
+    __kmp_pop_workshare;
+    __kmp_printf;
+    __kmp_printf_no_lock;
+    __kmp_print_storage_map_gtid;
+    __kmp_print_version_1;
+    __kmp_print_version_2;
+    __kmp_push_current_task_to_thread;
+    __kmp_push_num_teams;
+    __kmp_push_num_threads;
+    __kmp_push_parallel;
+    __kmp_push_proc_bind;
+    __kmp_push_sync;
+    __kmp_push_workshare;
+    __kmp_read_cpu_time;
+    __kmp_read_from_file;
+    __kmp_read_system_info;
+    __kmp_read_system_time;
+    kmp_realloc;
         __kmp_reap_monitor;
+    __kmp_reap_task_teams;
+    __kmp_reap_team;
         __kmp_reap_worker;
+    __kmp_register_atfork;
+    __kmp_register_root;
         __kmp_release_32;
         __kmp_release_64;
+    __kmp_release_deps;
+    __kmp_release_drdpa_lock;
+    __kmp_release_nested_drdpa_lock;
+    __kmp_release_nested_queuing_lock;
+    __kmp_release_nested_tas_lock;
+    __kmp_release_nested_ticket_lock;
         __kmp_release_oncore;
+    __kmp_release_queuing_lock;
+    __kmp_release_tas_lock;
+    __kmp_release_ticket_lock;
+    __kmp_resume_32;
+    __kmp_resume_64;
+    __kmp_resume_oncore;
+    __kmp_run_after_invoked_task;
+    __kmp_run_before_invoked_task;
+    __kmp_runtime_destroy;
+    __kmp_runtime_initialize;
+    __kmp_save_internal_controls;
+    __kmp_serial_initialize;
+    __kmp_serialized_parallel;
+    kmp_set_blocktime;
+    kmp_set_defaults;
+    kmp_set_library_;
+    kmp_set_library_serial_;
+    kmp_set_library_throughput;
+    kmp_set_library_turnaround;
+    __kmp_set_max_active_levels;
+    __kmp_set_num_threads;
+    __kmp_set_schedule;
+    kmp_set_stacksize;
+    kmp_set_stacksize_s;
+    kmp_set_warnings_off_;
+    kmp_set_warnings_on;
+    __kmp_str_buf_cat;
+    __kmp_str_buf_clear;
+    __kmp_str_buf_detach;
+    __kmp_str_buf_free;
+    __kmp_str_buf_print;
+    __kmp_str_buf_print_size;
+    __kmp_str_buf_reserve;
+    __kmp_str_buf_vprint;
+    __kmp_str_eqf;
+    __kmp_str_fname_free;
+    __kmp_str_fname_init;
+    __kmp_str_fname_match;
+    __kmp_str_format;
+    __kmp_str_free;
+    __kmp_str_loc_free;
+    __kmp_str_loc_init;
+    __kmp_str_match;
+    __kmp_str_match_false;
+    __kmp_str_match_true;
+    __kmp_str_replace;
+    __kmp_str_split;
+    __kmp_str_to_int;
+    __kmp_str_token;
+    __kmp_str_to_size;
+    __kmp_str_to_uint;
+    __kmp_suspend_32;
+    __kmp_suspend_64;
+    __kmp_suspend_initialize;
+    __kmp_suspend_oncore;
+    __kmp_suspend_uninitialize_thread;
+    __kmp_task_alloc;
+    __kmp_tasking_barrier;
+    __kmp_task_init_ompt;
+    __kmp_task_team_setup;
+    __kmp_task_team_sync;
+    __kmp_task_team_wait;
+    __kmp_teams_master;
+    __kmp_terminate_thread;
+    __kmp_test_drdpa_lock;
+    __kmp_test_nested_drdpa_lock;
+    __kmp_test_nested_queuing_lock;
+    __kmp_test_nested_tas_lock;
+    __kmp_test_nested_ticket_lock;
+    __kmp_test_queuing_lock;
+    __kmp_test_tas_lock;
+    __kmp_test_ticket_lock;
+    ___kmp_thread_calloc;
+    ___kmp_thread_free;
+    ___kmp_thread_malloc;
+    kmp_threadprivate_insert;
+    kmp_threadprivate_insert_private_data;
+    ___kmp_thread_realloc;
+    __kmp_thread_sleep;
+    __kmp_tv_threadprivate_store;
+    __kmp_user_set_library;
+    __kmp_validate_locks;
+    __kmp_vprintf;
         __kmp_wait_32;
         __kmp_wait_64;
         __kmp_wait_oncore;
+    __kmp_wait_to_unref_task_teams;
         __kmp_wait_yield_4;
-
-        # ittnotify symbols to be used by debugger
+    __kmp_warn;
+    __kmp_yield;
+    _Z17__kmp_itt_destroyv;
+    _Z20__kmp_itt_initializev;
+    __kmp_itt_error_handler;
         __kmp_itt_fini_ittlib;
         __kmp_itt_init_ittlib;
-#endif /* USE_ITT_BUILD */
-
-    local: # Non-exported symbols.
-
-        *;         # All other symbols are not exported.
-
-}; # VERSION
-
-# sets up GCC OMP_ version dependency chain
-OMP_1.0 {
-};
-OMP_2.0 {
-} OMP_1.0;
-OMP_3.0 {
-} OMP_2.0;
-OMP_3.1 {
-} OMP_3.0;
-OMP_4.0 {
-} OMP_3.1;
-
-# sets up GCC GOMP_ version dependency chain
-GOMP_1.0 {
+    __kmp_itt_set_error_handler;
+    ompc_get_ancestor_thread_num;
+    ompc_get_team_size;
+    ompc_set_dynamic;
+    ompc_set_max_active_levels;
+    ompc_set_nested;
+    ompc_set_num_threads;
+    ompc_set_schedule;
+    omp_destroy_lock;
+    omp_destroy_lock_;
+    omp_destroy_nest_lock;
+    omp_destroy_nest_lock_;
+    omp_get_active_level;
+    omp_get_active_level_;
+    omp_get_ancestor_thread_num;
+    omp_get_ancestor_thread_num_;
+    omp_get_cancellation;
+    omp_get_cancellation_;
+    omp_get_dynamic;
+    omp_get_dynamic_;
+    omp_get_level;
+    omp_get_level_;
+    omp_get_max_active_levels;
+    omp_get_max_active_levels_;
+    omp_get_max_threads;
+    omp_get_max_threads_;
+    omp_get_nested;
+    omp_get_nested_;
+    omp_get_num_procs;
+    omp_get_num_procs_;
+    omp_get_num_teams;
+    omp_get_num_teams_;
+    omp_get_num_threads;
+    omp_get_num_threads_;
+    omp_get_proc_bind;
+    omp_get_proc_bind_;
+    omp_get_schedule;
+    omp_get_schedule_;
+    omp_get_team_num;
+    omp_get_team_num_;
+    omp_get_team_size;
+    omp_get_team_size_;
+    omp_get_thread_limit;
+    omp_get_thread_limit_;
+    omp_get_thread_num;
+    omp_get_thread_num_;
+    omp_get_wtick;
+    omp_get_wtick_;
+    omp_get_wtime;
+    omp_get_wtime_;
+    omp_in_final;
+    omp_in_final_;
+    omp_in_parallel;
+    omp_in_parallel_;
+    omp_init_lock;
+    omp_init_lock_;
+    omp_init_lock_with_hint;
+    omp_init_lock_with_hint_;
+    omp_init_nest_lock;
+    omp_init_nest_lock_;
+    omp_init_nest_lock_with_hint;
+    omp_init_nest_lock_with_hint_;
+    omp_is_initial_device;
+    omp_is_initial_device_;
+    omp_set_dynamic;
+    omp_set_dynamic_;
+    omp_set_lock;
+    omp_set_lock_;
+    omp_set_max_active_levels;
+    omp_set_max_active_levels_;
+    omp_set_nest_lock;
+    omp_set_nest_lock_;
+    omp_set_nested;
+    omp_set_nested_;
+    omp_set_num_threads;
+    omp_set_num_threads_;
+    omp_set_schedule;
+    omp_set_schedule_;
+    omp_test_lock;
+    omp_test_lock_;
+    omp_test_nest_lock;
+    omp_test_nest_lock_;
+    omp_unset_lock;
+    omp_unset_lock_;
+    omp_unset_nest_lock;
+    omp_unset_nest_lock_;
+  local:
+    *;
 };
-GOMP_2.0 {
-} GOMP_1.0;
-GOMP_3.0 {
-} GOMP_2.0;
-GOMP_4.0 {
-} GOMP_3.0;
 
-# end of file #
