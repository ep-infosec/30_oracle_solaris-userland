This patch fixes an issue with inconsistent -m?? flag passing to compiler by
cmake.

It also enforce UNIXv7 strict conformance mode to compile some parts of
unit tests because _DEFAULT_SOURCE is not enough on Solaris.

This is a Solaris specific patch.

--- poppler-21.10.0/cmake/modules/PopplerMacros.cmake.orig	2021-10-13 14:22:10.726290108 +0200
+++ poppler-21.10.0/cmake/modules/PopplerMacros.cmake	2021-10-13 14:50:17.247654912 +0200
@@ -79,6 +79,14 @@
   set(CMAKE_BUILD_TYPE RelWithDebInfo)
 endif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
 
+set(DEFAULT_CXX_FLAGS   "-fno-exceptions -fno-check-new -fno-common")
+set(DEFAULT_C_FLAGS     "-std=c99 -D_XOPEN_SOURCE=700")
+string(FIND "${CMAKE_CXX_FLAGS} ${CMAKE_C_FLAGS}" "-m32" SEARCH_IDX)
+if("${SEARCH_IDX}" GREATER "-1")
+	set(DEFAULT_CXX_FLAGS "${DEFAULT_CXX_FLAGS} -m32")
+	set(DEFAULT_C_FLAGS "${DEFAULT_C_FLAGS} -m32")
+endif()
+
 string(TOUPPER "${CMAKE_BUILD_TYPE}" _CMAKE_BUILD_TYPE_UPPER)
 set(_known_build_types RELWITHDEBINFO;RELEASE;DEBUG;DEBUGFULL;PROFILE)
 # We override CMAKE_CXX_FLAGS_${_CMAKE_BUILD_TYPE_UPPER} below. If the user
@@ -117,13 +125,13 @@
   set(DEFAULT_COMPILE_WARNINGS "${_warn}")
   set(DEFAULT_COMPILE_WARNINGS_EXTRA "${_warn} ${_warnx}")
 
-  set(CMAKE_CXX_FLAGS                "-fno-exceptions -fno-check-new -fno-common -fno-operator-names -D_DEFAULT_SOURCE")
+  set(CMAKE_CXX_FLAGS                "${DEFAULT_CXX_FLAGS}")
   set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O2 -g")
   set(CMAKE_CXX_FLAGS_RELEASE        "-O2 -DNDEBUG")
   set(CMAKE_CXX_FLAGS_DEBUG          "-g -O2 -fno-reorder-blocks -fno-schedule-insns -fno-inline")
   set(CMAKE_CXX_FLAGS_DEBUGFULL      "-g3 -fno-inline")
   set(CMAKE_CXX_FLAGS_PROFILE        "-g3 -fno-inline -ftest-coverage -fprofile-arcs")
-  set(CMAKE_C_FLAGS                  "-std=c99 -D_DEFAULT_SOURCE")
+  set(CMAKE_C_FLAGS                  "${DEFAULT_C_FLAGS}")
   set(CMAKE_C_FLAGS_RELWITHDEBINFO   "-O2 -g")
   set(CMAKE_C_FLAGS_RELEASE          "-O2 -DNDEBUG")
   set(CMAKE_C_FLAGS_DEBUG            "-g -O2 -fno-reorder-blocks -fno-schedule-insns -fno-inline")
@@ -161,7 +169,7 @@
   set(DEFAULT_COMPILE_WARNINGS "${_warn}")
   set(DEFAULT_COMPILE_WARNINGS_EXTRA "${_warn} ${_warnx}")
 
-  set(CMAKE_CXX_FLAGS                "-fno-exceptions -fno-check-new -fno-common -D_DEFAULT_SOURCE")
+  set(CMAKE_CXX_FLAGS                "${DEFAULT_CXX_FLAGS}")
   set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O2 -g")
   set(CMAKE_CXX_FLAGS_RELEASE        "-O2 -DNDEBUG")
   # clang does not support -fno-reorder-blocks -fno-schedule-insns, so do not use -O2
@@ -168,7 +176,7 @@
   set(CMAKE_CXX_FLAGS_DEBUG          "-g")
   set(CMAKE_CXX_FLAGS_DEBUGFULL      "-g3 -fno-inline")
   set(CMAKE_CXX_FLAGS_PROFILE        "-g3 -fno-inline -ftest-coverage -fprofile-arcs")
-  set(CMAKE_C_FLAGS                  "-std=c99 -D_DEFAULT_SOURCE")
+  set(CMAKE_C_FLAGS                  "${DEFAULT_C_FLAGS}")
   set(CMAKE_C_FLAGS_RELWITHDEBINFO   "-O2 -g")
   set(CMAKE_C_FLAGS_RELEASE          "-O2 -DNDEBUG")
   # clang does not support -fno-reorder-blocks -fno-schedule-insns, so do not use -O2
