The wanboot on Intel platforms uses GnuTLS static libraries.
This patch reverts the following upstream patches to avoid
the dependency on clock_gettime and inet_ntop functions.

commit 8a2ee790126f2ef4bb6ba9987e05d70d2f07ed1e
Author: Martin Storsjo <martin@martin.st>
Date:   Thu Jun 14 12:53:42 2018 +0300

    configure: Check for clock_gettime and fmemopen using a proper test

    Don't use AC_CHECK_FUNCS for these functions, but actually test by
    including the real header that defines the functions. This allows
    the macOS version selection work as intended, making the references
    to these functions weak if targeting a version of macOS where these
    functions aren't available. Thanks to -no_weak_imports, these weak
    references end up in failed linker tests, marking the functions as
    unavailable.

    This fixes issue #142.

    Signed-off-by: Martin Storsjo <martin@martin.st>

commit db5ac39e61fe1fc20bf3f69f603516803631cbeb
Author: Tim Rühsen <tim.ruehsen@gmx.de>
Date:   Wed Feb 6 20:35:11 2019 +0100

    Use inet_ntop() from gnulib

    Signed-off-by: Tim Rühsen <tim.ruehsen@gmx.de>

diff --git a/configure.ac b/configure.ac
index d59553b..521ddea 100644
--- a/configure.ac	Wed Apr 14 17:57:57 2021 +0200
+++ b/configure.ac	Wed Apr 14 18:01:30 2021 +0200
@@ -355,24 +355,7 @@
 
 dnl No fork on MinGW, disable some self-tests until we fix them.
 dnl Check clock_gettime and pthread_mutex_lock in libc (avoid linking to other libs)
-AC_CHECK_FUNCS([fork setitimer getrusage getpwuid_r nanosleep daemon getpid localtime mmap],,)
-dnl Manually check some functions by including headers first. On macOS, you
-dnl normally only have the latest SDK available, containing all existing
-dnl functions, but having them restricted according to target version in
-dnl headers. If we bypass the headers and just try linking (as AC_CHECK_FUNCS
-dnl does), we will accidentally detect functions which we shouldn't use. Set
-dnl ac_cv_func_* as well, to avoid later AC_CHECK_FUNCS from other included
-dnl scripts from overriding it.
-AC_MSG_CHECKING([for clock_gettime])
-AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <time.h>], [clock_gettime(0, 0);])],
-  [AC_MSG_RESULT(yes); ac_cv_func_clock_gettime=yes
-  AC_DEFINE([HAVE_CLOCK_GETTIME], 1, [Define to 1 if you have the `clock_gettime' function.])],
-  [AC_MSG_RESULT(no); ac_cv_func_clock_gettime=no])
-AC_MSG_CHECKING([for fmemopen])
-AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <stdio.h>], [fmemopen(0, 0, 0);])],
-  [AC_MSG_RESULT(yes); ac_cv_func_fmemopen=yes
-  AC_DEFINE([HAVE_FMEMOPEN], 1, [Define to 1 if you have the `fmemopen' function.])],
-  [AC_MSG_RESULT(no); ac_cv_func_fmemopen=no])
+AC_CHECK_FUNCS([fork setitimer getrusage getpwuid_r inet_ntop nanosleep daemon getpid clock_gettime localtime fmemopen mmap],,)
 
 AM_CONDITIONAL(HAVE_FORK, test "$ac_cv_func_fork" != "no")
 
diff --git a/lib/Makefile.am b/lib/Makefile.am
index f55f298..bb30590 100644
--- a/lib/Makefile.am
+++ b/lib/Makefile.am
@@ -81,7 +81,7 @@ COBJECTS = range.c record.c compress.c debug.c cipher.c gthreads.h handshake-tls
 	cert-session.c handshake-checks.c dtls-sw.c dh-primes.c openpgp_compat.c \
 	crypto-selftests.c crypto-selftests-pk.c secrets.c extv.c extv.h \
 	hello_ext_lib.c hello_ext_lib.h ocsp-api.c stek.c cert-cred-rawpk.c \
-	iov.c iov.h
+	iov.c iov.h system/inet_ntop.c
 
 if ENABLE_GOST
 COBJECTS += vko.c
diff --git a/lib/system/inet_ntop.c b/lib/system/inet_ntop.c
new file mode 100644
index 0000000..87760eb
--- /dev/null
+++ b/lib/system/inet_ntop.c
@@ -0,0 +1,250 @@
+/* inet_ntop.c -- convert IPv4 and IPv6 addresses from binary to text form
+
+   Copyright (C) 2005-2006, 2008-2015 Free Software Foundation, Inc.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 2, or (at your option)
+   any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program; if not, see <http://www.gnu.org/licenses/>.  */
+
+/*
+ * Copyright (c) 1996-1999 by Internet Software Consortium.
+ *
+ * Permission to use, copy, modify, and distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM DISCLAIMS
+ * ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL INTERNET SOFTWARE
+ * CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
+ * DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
+ * PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
+ * ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
+ * SOFTWARE.
+ */
+
+#include <config.h>
+
+#ifndef HAVE_INET_NTOP
+
+# include <stdio.h>
+# include <string.h>
+# include <errno.h>
+# include <sys/socket.h>
+# include "system.h"
+
+# ifndef IF_LINT
+#  define IF_LINT
+#endif
+
+# ifndef HAVE_IPV6
+#  define HAVE_IPV6 1
+# endif
+
+# ifndef HAVE_IPV4
+#  define HAVE_IPV4 1
+# endif
+
+# define NS_IN6ADDRSZ 16
+# define NS_INT16SZ 2
+
+/*
+ * WARNING: Don't even consider trying to compile this on a system where
+ * sizeof(int) < 4.  sizeof(int) > 4 is fine; all the world's not a VAX.
+ */
+typedef int verify_int_size[4 <= sizeof (int) ? 1 : -1];
+
+static const char *inet_ntop4 (const unsigned char *src, char *dst, unsigned size);
+# if HAVE_IPV6
+static const char *inet_ntop6 (const unsigned char *src, char *dst, unsigned size);
+# endif
+
+
+/* char *
+ * inet_ntop(af, src, dst, size)
+ *      convert a network format address to presentation format.
+ * return:
+ *      pointer to presentation format address ('dst'), or NULL (see errno).
+ * author:
+ *      Paul Vixie, 1996.
+ */
+const char *
+inet_ntop (int af, const void *restrict src,
+	   char *restrict dst, unsigned cnt)
+{
+  switch (af)
+    {
+# if HAVE_IPV4
+    case AF_INET:
+      return (inet_ntop4 (src, dst, cnt));
+# endif
+
+# if HAVE_IPV6
+    case AF_INET6:
+      return (inet_ntop6 (src, dst, cnt));
+# endif
+
+    default:
+      errno = EAFNOSUPPORT;
+      return (NULL);
+    }
+  /* NOTREACHED */
+}
+
+/* const char *
+ * inet_ntop4(src, dst, size)
+ *      format an IPv4 address
+ * return:
+ *      'dst' (as a const)
+ * notes:
+ *      (1) uses no statics
+ *      (2) takes a u_char* not an in_addr as input
+ * author:
+ *      Paul Vixie, 1996.
+ */
+static const char *
+inet_ntop4 (const unsigned char *src, char *dst, unsigned size)
+{
+  char tmp[sizeof "255.255.255.255"];
+  int len;
+
+  len = sprintf (tmp, "%u.%u.%u.%u", src[0], src[1], src[2], src[3]);
+  if (len < 0)
+    return NULL;
+
+  if ((unsigned)len > size)
+    {
+      errno = ENOSPC;
+      return NULL;
+    }
+
+  return strcpy (dst, tmp);
+}
+
+# if HAVE_IPV6
+
+/* const char *
+ * inet_ntop6(src, dst, size)
+ *      convert IPv6 binary address into presentation (printable) format
+ * author:
+ *      Paul Vixie, 1996.
+ */
+static const char *
+inet_ntop6 (const unsigned char *src, char *dst, unsigned size)
+{
+  /*
+   * Note that int32_t and int16_t need only be "at least" large enough
+   * to contain a value of the specified size.  On some systems, like
+   * Crays, there is no such thing as an integer variable with 16 bits.
+   * Keep this in mind if you think this function should have been coded
+   * to use pointer overlays.  All the world's not a VAX.
+   */
+  char tmp[sizeof "ffff:ffff:ffff:ffff:ffff:ffff:255.255.255.255"], *tp;
+  struct
+  {
+    int base, len;
+  } best, cur;
+  unsigned int words[NS_IN6ADDRSZ / NS_INT16SZ];
+  int i;
+
+  /*
+   * Preprocess:
+   *      Copy the input (bytewise) array into a wordwise array.
+   *      Find the longest run of 0x00's in src[] for :: shorthanding.
+   */
+  memset (words, '\0', sizeof words);
+  for (i = 0; i < NS_IN6ADDRSZ; i += 2)
+    words[i / 2] = (src[i] << 8) | src[i + 1];
+  best.base = -1;
+  cur.base = -1;
+  IF_LINT(best.len = 0);
+  IF_LINT(cur.len = 0);
+  for (i = 0; i < (NS_IN6ADDRSZ / NS_INT16SZ); i++)
+    {
+      if (words[i] == 0)
+	{
+	  if (cur.base == -1)
+	    cur.base = i, cur.len = 1;
+	  else
+	    cur.len++;
+	}
+      else
+	{
+	  if (cur.base != -1)
+	    {
+	      if (best.base == -1 || cur.len > best.len)
+		best = cur;
+	      cur.base = -1;
+	    }
+	}
+    }
+  if (cur.base != -1)
+    {
+      if (best.base == -1 || cur.len > best.len)
+	best = cur;
+    }
+  if (best.base != -1 && best.len < 2)
+    best.base = -1;
+
+  /*
+   * Format the result.
+   */
+  tp = tmp;
+  for (i = 0; i < (NS_IN6ADDRSZ / NS_INT16SZ); i++)
+    {
+      /* Are we inside the best run of 0x00's? */
+      if (best.base != -1 && i >= best.base && i < (best.base + best.len))
+	{
+	  if (i == best.base)
+	    *tp++ = ':';
+	  continue;
+	}
+      /* Are we following an initial run of 0x00s or any real hex? */
+      if (i != 0)
+	*tp++ = ':';
+      /* Is this address an encapsulated IPv4? */
+      if (i == 6 && best.base == 0 &&
+	  (best.len == 6 || (best.len == 5 && words[5] == 0xffff)))
+	{
+	  if (!inet_ntop4 (src + 12, tp, sizeof tmp - (tp - tmp)))
+	    return (NULL);
+	  tp += strlen (tp);
+	  break;
+	}
+      {
+	int len = sprintf (tp, "%x", words[i]);
+	if (len < 0)
+	  return NULL;
+	tp += len;
+      }
+    }
+  /* Was it a trailing run of 0x00's? */
+  if (best.base != -1 && (best.base + best.len) ==
+      (NS_IN6ADDRSZ / NS_INT16SZ))
+    *tp++ = ':';
+  *tp++ = '\0';
+
+  /*
+   * Check for overflow, copy, and we're done.
+   */
+  if ((unsigned) (tp - tmp) > size)
+    {
+      errno = ENOSPC;
+      return NULL;
+    }
+
+  return strcpy (dst, tmp);
+}
+
+# endif
+
+#endif
diff --git a/lib/system.h b/lib/system.h
index b7b964f..6f3bf5a 100644
--- a/lib/system.h
+++ b/lib/system.h
@@ -107,4 +107,11 @@ void _gnutls_global_set_gettime_function(gnutls_gettime_func gettime_func);
 int gnutls_system_global_init(void);
 void gnutls_system_global_deinit(void);
 
+#ifndef HAVE_INET_NTOP
+# undef inet_ntop
+# define inet_ntop _gnutls_inet_ntop
+const char *inet_ntop(int af, const void *src,
+         char *dst, unsigned size);
+#endif
+
 #endif /* GNUTLS_LIB_SYSTEM_H */
diff --git a/lib/x509/ip.c b/lib/x509/ip.c
index c4cb008..b359d27 100644
--- a/lib/x509/ip.c
+++ b/lib/x509/ip.c
@@ -24,7 +24,10 @@
 #include "gnutls_int.h"
 #include "ip.h"
 #include <gnutls/x509.h>
-#include <arpa/inet.h>
+
+#ifdef HAVE_INET_NTOP
+# include <arpa/inet.h>
+#endif
 
 /*-
  * _gnutls_mask_to_prefix:
