#
# This patch allows for backwards compatibility with the rcache interface.
# Solaris currently supports the deprecated interface for specifying the rcache
# file; KRB5RCNAME.  Which is defined as:
#
#    KRB5RCNAME=[FILE|MEMORY|NONE]:<rcache name>
#    with: FILE:/var/krb5/rcache/<service_name>_<euid> as the default setting.
# This patch keeps this interface as well as preserve the existing interface
# with MIT through various environment variables:
#    KRB5RCACHETYPE=[dfl|none]
#    KRB5RCACHENAME=<rcache name>
#    KRB5RCACHEDIR=<rcache directory>
#    where the default configuration, dfl:/var/tmp/<service name>_<euid>,
#    is transformed to dfl:/var/krb5/rcache/<service_name>_<euid> in Solaris
#    where dfl is a file based replay cache
#
# The following CRs are fixed with this patch, in sequence:
#
# 15299709 SUNBT6355096-SOLARIS_11 rcache name value is now expected to be...
# 15184486 SUNBT4950986 caching behavior of the Kerberos 5 replay cache is...
# 15291109 SUNBT6334655-SOLARIS_11 with <rc type>=MEMORY as said in...
# 15299707 SUNBT6355094-SOLARIS_11 Some parts of the krb mem rcache should...
# 15731568 SUNBT7071883 mech_krb5.so.1`krb5_rc_dfl_close_no_free+0x21...
#
# Note: An MIT ticket will subsequently be filed, but the solution may differ
# from what we currently offer in Solaris, because they may not want a memory
# replay cache, because of the known limitations of this type of cache and may
# integrate features that don't require replay caches in the the future.
# Patch source: in-house
#
--- a/src/lib/krb5/rcache/Makefile.in
+++ b/src/lib/krb5/rcache/Makefile.in
@@ -10,14 +10,16 @@ STLIBOBJS = \
 	rc_base.o	\
 	rc_dfl.o 	\
 	rc_file2.o	\
-	rc_none.o
+	rc_none.o	\
+	rc_mem.o
 
 OBJS=	\
 	$(OUTPRE)memrcache.$(OBJEXT)	\
 	$(OUTPRE)rc_base.$(OBJEXT)	\
 	$(OUTPRE)rc_dfl.$(OBJEXT) 	\
-	$(OUTPRE)rc_file2.$(OBJEXT) 	\
-	$(OUTPRE)rc_none.$(OBJEXT)
+	$(OUTPRE)rc_file2.$(OBJEXT)	\
+	$(OUTPRE)rc_none.$(OBJEXT)	\
+	$(OUTPRE)rc_mem.$(OBJEXT)
 
 SRCS=	\
 	$(srcdir)/memrcache.c	\
@@ -26,7 +28,8 @@ SRCS=	\
 	$(srcdir)/rc_file2.c 	\
 	$(srcdir)/rc_none.c	\
 	$(srcdir)/t_memrcache.c	\
-	$(srcdir)/t_rcfile2.c
+	$(srcdir)/t_rcfile2.c	\
+	$(srcdir)/rc_mem.c
 
 ##DOS##LIBOBJS = $(OBJS)
 
--- a/src/lib/krb5/rcache/rc-int.h
+++ b/src/lib/krb5/rcache/rc-int.h
@@ -48,10 +48,12 @@ struct krb5_rc_st {
 extern const krb5_rc_ops k5_rc_dfl_ops;
 extern const krb5_rc_ops k5_rc_file2_ops;
 extern const krb5_rc_ops k5_rc_none_ops;
+extern const krb5_rc_ops k5_rc_mem_ops;
 
 /* Check and store a replay record in an open (but not locked) file descriptor,
  * using the file2 format.  fd is assumed to be at offset 0. */
 krb5_error_code k5_rcfile2_store(krb5_context context, int fd,
                                  const krb5_data *tag_data);
 
+
 #endif /* RC_INT_H */
--- a/src/lib/krb5/rcache/rc_base.c
+++ b/src/lib/krb5/rcache/rc_base.c
@@ -20,7 +20,8 @@ struct typelist {
     struct typelist *next;
 };
 static struct typelist none = { &k5_rc_none_ops, 0 };
-static struct typelist file2 = { &k5_rc_file2_ops, &none };
+static struct typelist mem = { &k5_rc_mem_ops, &none };
+static struct typelist file2 = { &k5_rc_file2_ops, &mem };
 static struct typelist dfl = { &k5_rc_dfl_ops, &file2 };
 static struct typelist *typehead = &dfl;
 
@@ -33,6 +34,14 @@ k5_rc_default(krb5_context context, krb5_rcache *rc_out)
 
     *rc_out = NULL;
 
+    /*
+     * If KRB5RCNAME is Solars backward compatibility, value follows same
+     * format/grammar as upstream uses for KRB5RCACHENAME
+     */
+    val = secure_getenv("KRB5RCNAME");
+    if (val != NULL)
+        return k5_rc_resolve(context, val, rc_out);
+
     /* If KRB5RCACHENAME is set in the environment, resolve it. */
     val = secure_getenv("KRB5RCACHENAME");
     if (val != NULL)
