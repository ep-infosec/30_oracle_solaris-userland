#
# This patch updates the MIT Kerberos mechanism to integrate with the kernel
# mechanism in Solaris with the following updates:
#
# 1. The MIT implementation uses a combination of static and dynamically
# linked mechanisms, whereas Solaris only used dynamically loaded mechanisms.
# The statically loaded mech for krb does not include a kernel module by
# default for MIT and any dynamically loadable mech is not added when the mech
# has the same OID. Therefore this patch adds the kernel module with the static
# linking method during mech initialization.
#
# 2.  After implementing 1. another problem occurs when actually messaging
# with the kernel.  Specifically the security context import fails due to
# differences in messaging information as follows:
#
#    a. KV5M_CONTEXT
#    b. KV5M_AUTH_CONTEXT
#    c. KV5M_AUTHDATA
#    d. KV5M_AUTHDATA_CONTEXT
#    e. big_endian
#    f. kernel uses queue structure vs. sequence state
#
# Using the LUCID context would pare down the information to what the kernel
# needs, but currently the LUCID functions do not serialize this data compared
# to the normal export security context routine.
#
# Note: That this patch is specific to the Solaris kernel implementation and
# therefore should not be considered as an upstream contribution to MIT.
# Patch source: in-house
#
--- a/src/lib/gssapi/generic/Makefile.in
+++ b/src/lib/gssapi/generic/Makefile.in
@@ -66,6 +66,7 @@ SRCS = \
 	$(srcdir)/util_buffer.c \
 	$(srcdir)/util_buffer_set.c \
 	$(srcdir)/util_errmap.c \
+	$(srcdir)/util_ordering.c \
 	$(srcdir)/util_set.c \
 	$(srcdir)/util_seqstate.c \
 	$(srcdir)/util_token.c \
@@ -83,6 +84,7 @@ OBJS = \
 	$(OUTPRE)util_buffer.$(OBJEXT) \
 	$(OUTPRE)util_buffer_set.$(OBJEXT) \
 	$(OUTPRE)util_errmap.$(OBJEXT) \
+	$(OUTPRE)util_ordering.$(OBJEXT) \
 	$(OUTPRE)util_set.$(OBJEXT) \
 	$(OUTPRE)util_seqstate.$(OBJEXT) \
 	$(OUTPRE)util_token.$(OBJEXT) \
@@ -98,6 +100,7 @@ STLIBOBJS = \
 	util_buffer.o \
 	util_buffer_set.o \
 	util_errmap.o \
+	util_ordering.o \
 	util_set.o \
 	util_seqstate.o \
 	util_token.o \
--- a/src/lib/gssapi/generic/deps
+++ b/src/lib/gssapi/generic/deps
@@ -64,6 +64,13 @@ util_errmap.so util_errmap.po $(OUTPRE)util_errmap.$(OBJEXT): \
   $(top_srcdir)/include/k5-thread.h $(top_srcdir)/include/krb5.h \
   errmap.h gssapiP_generic.h gssapi_err_generic.h gssapi_ext.h \
   gssapi_generic.h util_errmap.c
+util_ordering.so util_ordering.po $(OUTPRE)util_ordering.$(OBJEXT): \
+  $(BUILDTOP)/include/autoconf.h $(BUILDTOP)/include/gssapi/gssapi.h \
+  $(BUILDTOP)/include/gssapi/gssapi_alloc.h $(COM_ERR_DEPS) \
+  $(top_srcdir)/include/k5-buf.h $(top_srcdir)/include/k5-platform.h \
+  $(top_srcdir)/include/k5-thread.h gssapiP_generic.h \
+  gssapi_err_generic.h gssapi_ext.h gssapi_generic.h \
+  util_ordering.c
 util_set.so util_set.po $(OUTPRE)util_set.$(OBJEXT): \
   $(BUILDTOP)/include/autoconf.h $(BUILDTOP)/include/gssapi/gssapi.h \
   $(BUILDTOP)/include/gssapi/gssapi_alloc.h $(COM_ERR_DEPS) \
--- a/src/lib/gssapi/generic/gssapiP_generic.h
+++ b/src/lib/gssapi/generic/gssapiP_generic.h
@@ -116,6 +116,14 @@
 #define g_seqstate_size         gssint_g_seqstate_size
 #define g_seqstate_externalize  gssint_g_seqstate_externalize
 #define g_seqstate_internalize  gssint_g_seqstate_internalize
+#define g_seqstate_rebase       gssint_g_seqstate_rebase
+#define	g_order_init		gssint_g_order_init
+#define	g_order_check		gssint_g_order_check
+#define	g_order_free		gssint_g_order_free
+#define	g_queue_size		gssint_g_queue_size
+#define	g_queue_externalize	gssint_g_queue_externalize
+#define	g_queue_internalize	gssint_g_queue_internalize
+#define	g_queue_firstnum	gssint_g_queue_firstnum
 #define g_canonicalize_host     gssint_g_canonicalize_host
 #define g_local_host_name       gssint_g_local_host_name
 #define g_strdup                gssint_g_strdup
@@ -184,6 +192,21 @@ long g_seqstate_externalize(g_seqnum_state state, unsigned char **buf,
                             size_t *lenremain);
 long g_seqstate_internalize(g_seqnum_state *state_out, unsigned char **buf,
                             size_t *lenremain);
+uint64_t g_seqstate_rebase(g_seqnum_state state);
+
+gss_int32 g_order_init (void **queue, uint64_t seqnum,
+				  int do_replay, int do_sequence, int wide);
+
+gss_int32 g_order_check (void **queue, uint64_t seqnum);
+
+void g_order_free (void **queue);
+
+gss_uint32 g_queue_size(void *vqueue, size_t *sizep);
+gss_uint32 g_queue_externalize(void *vqueue, unsigned char **buf,
+			       size_t *lenremain);
+gss_uint32 g_queue_internalize(void **vqueue, unsigned char **buf,
+			       size_t *lenremain);
+uint64_t g_queue_firstnum(void **vqueue);
 
 char *g_strdup (char *str);
 
--- a/src/lib/gssapi/generic/util_seqstate.c
+++ b/src/lib/gssapi/generic/util_seqstate.c
@@ -161,3 +161,9 @@ g_seqstate_internalize(g_seqnum_state *state_out, unsigned char **buf,
     *state_out = state;
     return 0;
 }
+
+uint64_t
+g_seqstate_rebase(g_seqnum_state state)
+{
+	return (state->base + state->next);
+}
--- a/src/lib/gssapi/krb5/accept_sec_context.c
+++ b/src/lib/gssapi/krb5/accept_sec_context.c
@@ -478,7 +478,7 @@ process_checksum(OM_uint32 *minor_status, krb5_context context,
                  krb5_auth_context auth_context, krb5_flags ap_req_options,
                  krb5_authenticator *authenticator, krb5_gss_ctx_ext_t exts,
                  krb5_gss_cred_id_t *deleg_out, krb5_ui_4 *flags_out,
-                 krb5_error_code *code_out)
+                 krb5_error_code *code_out, int *bigend_out)
 {
     krb5_error_code code = 0;
     OM_uint32 status, option_id, token_flags;
@@ -490,6 +490,15 @@ process_checksum(OM_uint32 *minor_status, krb5_context context,
     const uint8_t *token_cb, *option_bytes;
     struct k5input in;
     const krb5_checksum *cksum = authenticator->checksum;
+    int bigend = 0;
+    uint32_t (*input_get_uint32[2])(struct k5input *) = {
+        &k5_input_get_uint32_le,
+        &k5_input_get_uint32_be
+    };
+    uint16_t (*input_get_uint16[2])(struct k5input *) = {
+        &k5_input_get_uint16_le,
+        &k5_input_get_uint16_be
+    };
 
     cb_cksum.contents = NULL;
 
@@ -533,13 +542,21 @@ process_checksum(OM_uint32 *minor_status, krb5_context context,
         }
 
         k5_input_init(&in, cksum->contents, cksum->length);
-        cb_len = k5_input_get_uint32_le(&in);
+        cb_len = input_get_uint32[bigend](&in);
         if (cb_len != CB_MD5_LEN) {
-            code = KG_BAD_LENGTH;
-            status = GSS_S_FAILURE;
-            goto fail;
+	    bigend = 1;
+            k5_input_init(&in, cksum->contents, cksum->length);
+	    cb_len = input_get_uint32[bigend](&in);
+	    if (cb_len != CB_MD5_LEN) {
+		code = KG_BAD_LENGTH;
+		status = GSS_S_FAILURE;
+		goto fail;
+	    }
         }
 
+        if (bigend_out != NULL)
+            *bigend_out = bigend;
+
         token_cb = k5_input_get_bytes(&in, cb_len);
         if (acceptor_cb != GSS_C_NO_CHANNEL_BINDINGS) {
             code = kg_checksum_channel_bindings(context, acceptor_cb,
@@ -558,15 +575,15 @@ process_checksum(OM_uint32 *minor_status, krb5_context context,
         }
 
         /* Read the token flags and accept some of them as context flags. */
-        token_flags = k5_input_get_uint32_le(&in);
+	token_flags = input_get_uint32[bigend](&in);
         *flags_out = token_flags & INITIATOR_FLAGS;
         if (cb_match)
             *flags_out |= GSS_C_CHANNEL_BOUND_FLAG;
 
         /* Read the delegated credential if present. */
         if (in.len >= 4 && (token_flags & GSS_C_DELEG_FLAG)) {
-            option_id = k5_input_get_uint16_le(&in);
-            option_len = k5_input_get_uint16_le(&in);
+            option_id = input_get_uint16[bigend](&in);
+            option_len = input_get_uint16[bigend](&in);
             option_bytes = k5_input_get_bytes(&in, option_len);
             option = make_data((uint8_t *)option_bytes, option_len);
             if (in.status) {
@@ -658,6 +675,7 @@ kg_accept_krb5(minor_status, context_handle,
     krb5_context context;
     unsigned char *ptr;
     char *sptr;
+    int bigend = 0;
     krb5_gss_cred_id_t cred = 0;
     krb5_data ap_rep, ap_req;
     krb5_error_code code;
@@ -862,7 +880,7 @@ kg_accept_krb5(minor_status, context_handle,
                                     auth_context, ap_req_options,
                                     authdat, exts,
                                     delegated_cred_handle ? &deleg_cred : NULL,
-                                    &gss_flags, &code);
+                                    &gss_flags, &code, &bigend);
 
     if (major_status != GSS_S_COMPLETE)
         goto fail;
@@ -894,6 +912,7 @@ kg_accept_krb5(minor_status, context_handle,
     ctx->initiate = 0;
     ctx->gss_flags = gss_flags | GSS_C_TRANS_FLAG;
     ctx->seed_init = 0;
+    ctx->big_endian = bigend;
     ctx->cred_rcache = cred_rcache;
 
     /* XXX move this into gss_name_t */
--- a/src/lib/gssapi/krb5/gssapiP_krb5.h
+++ b/src/lib/gssapi/krb5/gssapiP_krb5.h
@@ -207,6 +207,7 @@ typedef struct _krb5_gss_ctx_id_rec {
     krb5_magic magic;
     unsigned int initiate : 1;   /* nonzero if initiating, zero if accepting */
     unsigned int established : 1;
+    unsigned int big_endian : 1;
     unsigned int have_acceptor_subkey : 1;
     unsigned int seed_init : 1;  /* XXX tested but never actually set */
     unsigned int terminated : 1;
--- a/src/lib/gssapi/krb5/gssapi_krb5.c
+++ b/src/lib/gssapi/krb5/gssapi_krb5.c
@@ -1019,6 +1019,7 @@ static int gss_krb5mechglue_init(void)
 
     mech_krb5.mechNameStr = "kerberos_v5";
     mech_krb5.mech_type = (gss_OID)gss_mech_krb5;
+    mech_krb5.kmodName = "kmech_krb5";
     gssint_register_mechinfo(&mech_krb5);
 
     mech_krb5.mechNameStr = "kerberos_v5_old";
--- a/src/lib/gssapi/krb5/import_sec_context.c
+++ b/src/lib/gssapi/krb5/import_sec_context.c
@@ -84,7 +84,6 @@ krb5_gss_import_sec_context(minor_status, interprocess_token, context_handle)
         krb5_free_context(context);
         return(GSS_S_FAILURE);
     }
-    krb5_free_context(context);
 
     ctx->mech_used = krb5_gss_convert_static_mech_oid(ctx->mech_used);
 
--- a/src/lib/gssapi/krb5/ser_sctx.c
+++ b/src/lib/gssapi/krb5/ser_sctx.c
@@ -136,6 +136,21 @@ kg_oid_size(gss_OID oid, size_t *sizep)
     return(kret);
 }
 
+static krb5_error_code
+kg_queue_externalize(arg, buffer, lenremain)
+    krb5_pointer        arg;
+    krb5_octet          **buffer;
+    size_t              *lenremain;
+{
+    krb5_error_code err;
+    err = krb5_ser_pack_int32(KV5M_GSS_QUEUE, buffer, lenremain);
+    if (err == 0)
+        err = g_queue_externalize(arg, buffer, lenremain);
+    if (err == 0)
+        err = krb5_ser_pack_int32(KV5M_GSS_QUEUE, buffer, lenremain);
+    return err;
+}
+
 static krb5_error_code
 kg_seqstate_externalize(arg, buffer, lenremain)
     g_seqnum_state      arg;
@@ -151,6 +166,47 @@ kg_seqstate_externalize(arg, buffer, lenremain)
     return err;
 }
 
+static krb5_error_code
+kg_queue_internalize(argp, buffer, lenremain)
+    krb5_pointer        *argp;
+    krb5_octet          **buffer;
+    size_t              *lenremain;
+{
+    krb5_int32 ibuf;
+    krb5_octet         *bp;
+    size_t             remain;
+    krb5_error_code    err;
+
+    bp = *buffer;
+    remain = *lenremain;
+
+    /* Read in and check our magic number */
+    if (krb5_ser_unpack_int32(&ibuf, &bp, &remain))
+        return (EINVAL);
+
+    if (ibuf != KV5M_GSS_QUEUE)
+        return (EINVAL);
+
+    err = g_queue_internalize(argp, &bp, &remain);
+    if (err)
+        return err;
+
+    /* Read in and check our trailing magic number */
+    if (krb5_ser_unpack_int32(&ibuf, &bp, &remain)) {
+        g_order_free(argp);
+        return (EINVAL);
+    }
+
+    if (ibuf != KV5M_GSS_QUEUE) {
+        g_order_free(argp);
+        return (EINVAL);
+    }
+
+    *buffer = bp;
+    *lenremain = remain;
+    return 0;
+}
+
 static krb5_error_code
 kg_seqstate_internalize(argp, buffer, lenremain)
     g_seqnum_state      *argp;
@@ -192,6 +248,25 @@ kg_seqstate_internalize(argp, buffer, lenremain)
     return 0;
 }
 
+static krb5_error_code
+kg_queue_size(arg, sizep)
+    krb5_pointer        arg;
+    size_t              *sizep;
+{
+    krb5_error_code kret;
+    size_t required;
+
+    kret = EINVAL;
+    if (arg) {
+        required = 2*sizeof(krb5_int32); /* For the header and trailer */
+        (void) g_queue_size(arg, &required);
+
+        kret = 0;
+        *sizep += required;
+    }
+    return(kret);
+}
+
 static krb5_error_code
 kg_seqstate_size(arg, sizep)
     g_seqnum_state      arg;
@@ -282,7 +357,7 @@ kg_ctx_size(krb5_context kcontext, krb5_gss_ctx_id_t ctx, size_t *sizep)
             kret = kg_oid_size(ctx->mech_used, &required);
 
         if (!kret && ctx->seqstate)
-            kret = kg_seqstate_size(ctx->seqstate, &required);
+            kret = kg_queue_size(ctx->seqstate, &required);
 
         if (!kret)
             kret = k5_size_context(ctx->k5_context, &required);
@@ -346,6 +421,8 @@ kg_ctx_externalize(krb5_context kcontext, krb5_gss_ctx_id_t ctx,
                                        &bp, &remain);
             (void) krb5_ser_pack_int32((krb5_int32) ctx->established,
                                        &bp, &remain);
+	    (void) krb5_ser_pack_int32((krb5_int32) ctx->big_endian,
+				       &bp, &remain);
             (void) krb5_ser_pack_int32((krb5_int32) ctx->have_acceptor_subkey,
                                        &bp, &remain);
             (void) krb5_ser_pack_int32((krb5_int32) ctx->seed_init,
@@ -402,8 +479,25 @@ kg_ctx_externalize(krb5_context kcontext, krb5_gss_ctx_id_t ctx,
                 kret = k5_externalize_keyblock(&ctx->seq->keyblock,
                                                &bp, &remain);
 
-            if (!kret && ctx->seqstate)
-                kret = kg_seqstate_externalize(ctx->seqstate, &bp, &remain);
+            if (!kret && ctx->seqstate) {
+                void *q = NULL;
+
+                /*
+                 * we need to pass next (exepected) sequence number,
+                 * when exporting context, so context receiver can
+                 * continue with sequence number checks, when integrity
+                 * protection is enabled.
+                 */
+                kret = g_order_init(&q, g_seqstate_rebase(ctx->seqstate),
+                                    (ctx->gss_flags & GSS_C_REPLAY_FLAG) != 0,
+                                    (ctx->gss_flags & GSS_C_SEQUENCE_FLAG) != 0,
+                                    ctx->proto);
+
+                if (!kret) {
+                    kret = kg_queue_externalize(q, &bp, &remain);
+                    g_order_free(&q);
+                }
+            }
 
             if (!kret)
                 kret = k5_externalize_context(ctx->k5_context, &bp, &remain);
@@ -529,6 +623,8 @@ kg_ctx_internalize(krb5_context kcontext, krb5_gss_ctx_id_t *argp,
             (void) krb5_ser_unpack_int32(&ibuf, &bp, &remain);
             ctx->established = (int) ibuf;
             (void) krb5_ser_unpack_int32(&ibuf, &bp, &remain);
+            ctx->big_endian = (int) ibuf;
+            (void) krb5_ser_unpack_int32(&ibuf, &bp, &remain);
             ctx->have_acceptor_subkey = (int) ibuf;
             (void) krb5_ser_unpack_int32(&ibuf, &bp, &remain);
             ctx->seed_init = (int) ibuf;
@@ -606,7 +702,7 @@ kg_ctx_internalize(krb5_context kcontext, krb5_gss_ctx_id_t *argp,
             }
 
             if (!kret) {
-                kret = kg_seqstate_internalize(&ctx->seqstate, &bp, &remain);
+                kret = kg_queue_internalize(&ctx->seqstate, &bp, &remain);
                 if (kret == EINVAL)
                     kret = 0;
             }
@@ -621,6 +717,25 @@ kg_ctx_internalize(krb5_context kcontext, krb5_gss_ctx_id_t *argp,
             if (!kret)
                 kret = krb5_ser_unpack_int32(&ibuf, &bp, &remain);
             ctx->proto = ibuf;
+
+            if (!kret && (ctx->seqstate != NULL)) {
+		uint64_t base = g_queue_firstnum((void **)&(ctx->seqstate));
+
+                g_order_free((void **)&(ctx->seqstate));
+                /*
+		 * The seqstate number we've imported becomes our first
+		 * sequence number received (base number for us), so we can
+		 * continue with integrity protection in imported context.
+                 */
+                kret = g_seqstate_init(&(ctx->seqstate), base,
+                    (ctx->gss_flags & GSS_C_REPLAY_FLAG) != 0,
+                    (ctx->gss_flags & GSS_C_SEQUENCE_FLAG) != 0, ctx->proto);
+            } else if (ctx->gss_flags &
+                (GSS_C_REPLAY_FLAG|GSS_C_SEQUENCE_FLAG)) {
+                if (!kret)
+                    kret = EINVAL;
+            }
+
             if (!kret)
                 kret = krb5_ser_unpack_int32(&ibuf, &bp, &remain);
             ctx->cksumtype = ibuf;
