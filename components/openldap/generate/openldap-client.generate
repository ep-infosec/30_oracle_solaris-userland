#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#

#
# Copyright (c) 2020, Oracle and/or its affiliates.
#

# components/openldap/generate/openldap-client.generate, dynamic package actions.

<include generate/common.transform>

# Delete everything not belonging to this package
<transform file link pkg.type=(?!client-pkg) -> drop>
# Remove temporarily assigned pkg.type definitions.
<transform file link -> delete pkg.type .*>


# Have usr/bin/ldap* command files moved to lib/openldap/bin directory.
# ---------------------------------------------------------------------
# And add compatibility links.  The order here is important.
<transform file path=usr/bin/ldap.* -> set action.hash %(path)>
<transform file path=usr/bin/(ldap.*) -> emit link path=usr/lib/openldap/bin/%<1> target=../../../bin/open%<1>>
<transform file path=usr/bin/(ldap.*) -> emit link path=usr/bin/%<1> target=open%<1>>
<transform file path=usr/bin/(ldap.*) -> edit path usr/bin/(.*) usr/bin/open%<1>>
# Add dependency on libsasl, exception for openldapurl.
<transform file path=usr/bin/openldap.* -> set pkg.depend.bypass-generate libsasl2.so.3>
<transform file path=usr/bin/.*ldapurl -> delete pkg.depend.bypass-generate libsasl2.so.3>

# Modify usr/bin/ldap* links.
# ---------------------------
# Create links for openldap/bin backward compatibility commands.
<transform link path=usr/bin/(ldap.*) target=^(ldap.+)$ -> emit link path=usr/lib/openldap/bin/%<1> target=../../../bin/open%<2>>
# links in usr/bin need to point to openldap target, and have backward compat link (this is ldapadd -> ldapmodify).
<transform link path=usr/bin/(ldap.+) target=^(ldap.+)$ -> emit link path=usr/bin/open%<1> target=open%<2>>
<transform link path=usr/bin/(ldap.+) target=^(ldap.+)$ -> edit target ^(ldap.+)$ open%<2>>

# Header files, Include link in parent directory to sub directory.
<transform file path=usr/include/openldap/(.*) -> emit link path=usr/include/%<1> target=openldap/%<1>>

# Manual pages are shipped in section <n>oldap and not <n>.
# ---------------------------------------------------------
# For every man page file emit the oldap location.
<transform file path=(usr/share/man/man[135])/(.*)\.(.*) -> emit file path=%<1>oldap/%<2>.%<3>oldap>
# For man1 pages emit a link from the standard name to the oldap page.
<transform file path=(usr/share/man/man1)/(.*)\.(.*) -> emit link path=%<1>/%<2>.%<3> target=../man1oldap/%<2>.%<3>oldap>
# Also for man1 pages emit a link from the open* name to the standard page.
<transform file path=(usr/share/man/man1)/(.*)\.(.*) -> emit link path=%<1>/open%<2>.%<3> target=../man1oldap/%<2>.%<3>oldap>
# Discard the actual line, the topmost transforms in openldap-client.p5m file will match with emitted file line above.
<transform file path=usr/share/man/man[135]/.*$ -> drop>

# Links in man1 need to point to man1oldap.
<transform link path=usr/share/man/man1/(.*).1$ target=(.*).1$ -> edit path=usr/share/man/man1/%<1>.1 target=../man1oldap/%<2>.%<3>oldap>
# With the exception of ldapadd.1 -> ldapmodify.1, which for ease is
# listed in openldap-client.static file.
<transform link path=usr/share/man/man1/ldapadd.1 target=ldapmodify.1 -> drop>

# Links in man3 are moved to man3oldap and to point to man3oldap.
<transform link path=usr/share/man/man3/(.*)$ -> edit path usr/share/man/man3/(.*)$ usr/share/man/man3oldap/%<1>oldap>
<transform link path=usr/share/man/man3oldap/(.*)oldap$ target=(.*3)$ -> edit target .*3 %<2>oldap>

# Decorate (add File Actions) as required.
# ----------------------------------------
<transform file path=etc/openldap/ldap.conf$ -> set owner root>
<transform file path=etc/openldap/ldap.conf$ -> set group openldap>
<transform file path=etc/openldap/ldap.conf$ -> set mode 0644>
<transform file path=etc/openldap/ldap.conf$ -> set overlay allow>
<transform file path=etc/openldap/ldap.conf$ -> set preserve true>

<transform file path=usr/lib.*/libldap_r-.* -> set pkg.depend.bypass-generate libsasl2.so.3>

# Oracle Solaris only provides the MT HOT library libldap_r.so.
# -------------------------------------------------------------
# For compatibility libldap.so and specific version-ed libraries
# are links to libldap_r.so.
# This conversion recreates the p5m libraries as it was prior to
# this generation translator.

# The point of this generator is to automatically pick up the version
# strings and make it easier to updated the package file, and of
# course easily identify any new or missing files.

# Want link like path=usr/lib/$(MACH64)/libldap_r-2.4.so target=libldap_r-2.4.so.2.10.14
# Therefore using link path=usr/lib/libldap_r-2.4.so.2 target=libldap_r-2.4.so.2.10.14
<transform link path=(usr/lib.*/libldap_r-.*\.so)\..*$ target=(libldap_r-.*)$ -> emit link path=%<1> target=%<2>>
# Want link like path=usr/lib/$(MACH64)/libldap-2.4.so target=libldap_r-2.4.so.2.10.14
<transform link path=(usr/lib.*/libldap).so target=libldap-(.*)\.so\.(.*) -> emit link path=%<1>-%<2>.so target=libldap_r-%<2>.so.%<3>>

# make libldap-2.4.so.2.10.14 target=libldap_r-2.4.so.2.10.14
<transform link path=usr/lib.*/libldap.so target=libldap-(.*) -> set target libldap_r-%<1>>
<transform link path=usr/lib.*/libldap-(.*)\.so target=libldap-(.*) -> set target libldap_r-%<2>>

# File build/prototype/sparc/usr/lib/sparcv9/libldap-2.4.so.2.10.14
# and build/prototype/sparc/usr/lib/libldap-2.4.so.2.10.14
# Deliver as links to libldap_r file.
<transform file path=(usr/lib.*/libldap-)(.*\.so\..*) -> emit link path=%<1>%<2> target=libldap_r-%<2>>
<transform file path=(usr/lib.*/libldap-)(.*\.so\..*) -> drop>

# llib-llb, add a couple of links
# +link path=usr/lib/$(MACH64)/llib-lldap-2.4.ln target=llib-lldap_r-2.4.ln
# +link path=usr/lib/$(MACH64)/llib-lldap.ln target=llib-lldap_r-2.4.ln
# +link path=usr/lib/llib-lldap-2.4.ln target=llib-lldap_r-2.4.ln
# +link path=usr/lib/llib-lldap.ln target=llib-lldap_r-2.4.ln
# First make non-version link without _r point to _r version.
<transform file path=(usr/lib.*/)(llib-l.*)_r-(.*).ln$ -> emit link path=%<1>%<2>.ln target=%<2>_r-%<3>.ln>
# Secondly versioned link without _r , point to _r version.
<transform file path=(usr/lib.*/)(llib-l.*)_r-(.*).ln$ -> emit link path=%<1>%<2>-%<3>.ln target=%<2>_r-%<3>.ln>

# Use the ln file to create other links to match the current p5m file!
# +link path=usr/lib/$(MACH64)/llib-llber.ln target=llib-llber-2.4.ln
# +link path=usr/lib/llib-lldap_r.ln target=llib-lldap_r-2.4.ln
<transform file path=(usr/lib.*/)(llib-lldap_r)-(.*).ln$ -> emit link path=%<1>%<2>.ln target=%<2>-%<3>.ln>
# +link path=usr/lib/llib-llber.ln target=llib-llber-2.4.ln
<transform file path=(usr/lib.*/)(llib-llber)-(.*).ln$ -> emit link path=%<1>%<2>.ln target=%<2>-%<3>.ln>

# +link path=usr/lib/liblber-2.4.so target=liblber-2.4.so.2.10.14
# +link path=usr/lib/$(MACH64)/liblber-2.4.so target=liblber-2.4.so.2.10.14
<transform file path=(usr/lib.*/)(liblber-.*\.so)(\..*) -> emit link path=%<1>%<2> target=%<2>%<3>>
